From e8cbf211b78620c96406a64391f036543f598219 Mon Sep 17 00:00:00 2001
From: Lorenzo Gaifas <brisvag@gmail.com>
Date: Tue, 25 Jul 2023 17:40:23 +0200
Subject: [PATCH] Fix point selection highlight (#5737)

Fix some tests for point selection, and fix highlight not being updated
correctly when changing zoom.

To reproduce the issue on main:

```py
import napari
import numpy as np
v = napari.Viewer()
pts = np.array([[0, 0], [10, 10]])
pl = v.add_points(pts, scale=[5, 5])
pl.mode = 'select'
```

Then select points (manually or with a box) and zoom in and out, and
repeat. You'll see that unless you hover a point, the hihglight
thickness is not properly updated with the zoom. This PR ensures that
zooming always triggers an update to the highlight thickness.

---------

Co-authored-by: Genevieve Buckley <30920819+GenevieveBuckley@users.noreply.github.com>
---
 .../_tests/test_points_mouse_bindings.py      | 37 ++++++++++++++-----
 napari/layers/points/points.py                | 16 ++++++--
 2 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/napari/layers/points/_tests/test_points_mouse_bindings.py b/napari/layers/points/_tests/test_points_mouse_bindings.py
index 26a4818e..4e307dec 100644
--- a/napari/layers/points/_tests/test_points_mouse_bindings.py
+++ b/napari/layers/points/_tests/test_points_mouse_bindings.py
@@ -51,7 +51,7 @@ def create_known_points_layer_2d():
         testing when needing to guarantee no point is clicked on.
     """
     data = [[1, 3], [8, 4], [10, 10], [15, 4]]
-    known_non_point = [20, 30]
+    known_non_point = [10, 11]
     n_points = len(data)
 
     layer = Points(data, size=1)
@@ -470,6 +470,20 @@ def test_unselecting_points(create_known_points_layer_2d):
     # Check clicked point selected
     assert len(layer.selected_data) == 0
 
+    # check that this also works with scaled data and position near a point (see #5737)
+    # we are taking the first point and shiftling *slightly* more than the point size
+    layer.scale = 100, 100
+    pos = np.array(layer.data[0])
+    pos[1] += layer.size[0] * 2
+
+    event = read_only_event(type='mouse_press', position=pos)
+    mouse_press_callbacks(layer, event)
+    event = read_only_event(type='mouse_release', position=pos)
+    mouse_release_callbacks(layer, event)
+
+    # Check clicked point selected
+    assert len(layer.selected_data) == 0
+
 
 def test_selecting_all_points_with_drag_2d(create_known_points_layer_2d):
     """Select all points when drag box includes all of them."""
@@ -477,22 +491,30 @@ def test_selecting_all_points_with_drag_2d(create_known_points_layer_2d):
 
     layer.mode = 'select'
 
+    # drag a box that includes all the points
+    box_drag_begin = (20, 20)
+    box_drag_end = (0, 0)
+
     # Simulate click
-    event = read_only_event(type='mouse_press', position=known_non_point)
+    event = read_only_event(type='mouse_press', position=box_drag_begin)
     mouse_press_callbacks(layer, event)
 
     # Simulate drag start
     event = read_only_event(
-        type='mouse_move', is_dragging=True, position=known_non_point
+        type='mouse_move', is_dragging=True, position=box_drag_begin
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate drag end
-    event = read_only_event(type='mouse_move', is_dragging=True)
+    event = read_only_event(
+        type='mouse_move', is_dragging=True, position=box_drag_end
+    )
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = read_only_event(type='mouse_release', is_dragging=True)
+    event = read_only_event(
+        type='mouse_release', is_dragging=True, position=box_drag_end
+    )
     mouse_release_callbacks(layer, event)
 
     # Check all points selected as drag box contains them
@@ -666,10 +688,7 @@ def test_drag_start_selection(
     layer.mode = 'select'
     layer.selected_data = pre_selection
 
-    if on_point:
-        initial_position = tuple(layer.data[0])
-    else:
-        initial_position = tuple(known_non_point)
+    initial_position = tuple(layer.data[0]) if on_point else (20, 20)
     zero_pos = [0, 0]
     initial_position_1 = tuple(layer.data[1])
     diff_data_1 = [
diff --git a/napari/layers/points/points.py b/napari/layers/points/points.py
index c441276d..4da8ab07 100644
--- a/napari/layers/points/points.py
+++ b/napari/layers/points/points.py
@@ -1568,6 +1568,14 @@ class Points(Layer):
         if not self.editable:
             self.mode = Mode.PAN_ZOOM
 
+    def _update_draw(
+        self, scale_factor, corner_pixels_displayed, shape_threshold
+    ):
+        super()._update_draw(
+            scale_factor, corner_pixels_displayed, shape_threshold
+        )
+        self._set_highlight(force=True)
+
     def _slice_data(
         self, dims_indices
     ) -> Tuple[List[int], Union[float, np.ndarray]]:
@@ -1649,10 +1657,10 @@ class Points(Layer):
             # Without this implementation, point hover and selection (and anything depending
             # on self.get_value()) won't be aware of the real extent of points, causing
             # unexpected behaviour. See #3734 for details.
+            sizes = np.expand_dims(self._view_size, axis=1) / scale_ratio / 2
             distances = abs(view_data - displayed_position)
             in_slice_matches = np.all(
-                distances
-                <= np.expand_dims(self._view_size, axis=1) / scale_ratio / 2,
+                distances <= sizes,
                 axis=1,
             )
             indices = np.where(in_slice_matches)[0]
@@ -1709,10 +1717,10 @@ class Points(Layer):
         # so we need to calculate the ratio to correctly map to screen coordinates
         scale_ratio = self.scale[self._slice_input.displayed] / self.scale[-1]
         # find the points the click intersects
+        sizes = np.expand_dims(self._view_size, axis=1) / scale_ratio / 2
         distances = abs(rotated_points - rotated_click_point)
         in_slice_matches = np.all(
-            distances
-            <= np.expand_dims(self._view_size, axis=1) / scale_ratio / 2,
+            distances <= sizes,
             axis=1,
         )
         indices = np.where(in_slice_matches)[0]
-- 
2.34.1
