From 42c726cf37968c0249adcfc395254cf32db4a1b1 Mon Sep 17 00:00:00 2001
From: Grzegorz Bokota <bokota+github@gmail.com>
Date: Tue, 31 Jan 2023 15:09:13 +0100
Subject: [PATCH] Replace flake8, isort and pyupgrade by ruff, enable
 additional usefull rules (#5513)

Co-authored-by: Lorenzo Gaifas <brisvag@gmail.com>
Co-authored-by: Matthias Bussonnier <bussonniermatthias@gmail.com>
---
 .pre-commit-config.yaml                       | 21 +--------
 examples/3D_paths.py                          |  2 +-
 examples/3Dimage_plane_rendering.py           |  5 ++-
 examples/3d_kymograph_.py                     |  9 ++--
 examples/add_3D_image.py                      |  2 +-
 examples/add_grayscale_image.py               |  4 +-
 examples/add_image.py                         |  1 +
 examples/add_image_transformed.py             |  1 +
 examples/add_labels.py                        |  6 +--
 examples/add_labels_with_features.py          |  8 ++--
 examples/add_multiscale_image.py              |  4 +-
 examples/add_points.py                        |  2 +-
 examples/add_points_on_nD_shapes.py           |  3 +-
 examples/add_points_with_features.py          |  2 +-
 examples/add_points_with_multicolor_text.py   |  1 +
 examples/add_points_with_text.py              |  2 +-
 examples/add_shapes.py                        |  2 +-
 examples/add_shapes_with_features.py          |  2 +-
 examples/add_shapes_with_text.py              |  2 +-
 examples/add_surface_2D.py                    |  2 +-
 examples/add_vectors.py                       |  4 +-
 examples/add_vectors_color_by_angle.py        |  4 +-
 examples/add_vectors_image.py                 |  2 +-
 examples/affine_transforms.py                 |  3 +-
 examples/annotate-2d.py                       |  2 +-
 examples/annotate_segmentation_with_text.py   |  5 ++-
 examples/bbox_annotator.py                    |  4 +-
 examples/clipboard_.py                        |  5 ++-
 examples/clipping_planes_interactive_.py      |  5 ++-
 examples/cursor_position.py                   |  2 +-
 examples/cursor_ray.py                        |  1 +
 examples/custom_key_bindings.py               |  2 +-
 examples/custom_mouse_functions.py            |  6 +--
 examples/dask_nD_image.py                     |  4 +-
 examples/dev/gui_notifications.py             |  3 +-
 examples/dev/leaking_check.py                 |  9 ++--
 examples/dev/plot_2d_edge_meshes.py           |  7 +--
 examples/dev/q_list_view.py                   |  5 +--
 examples/dev/q_node_tree.py                   |  4 +-
 examples/dynamic-projections-dask.py          |  6 ++-
 examples/embed_ipython_.py                    |  3 +-
 examples/image_depth.py                       |  3 +-
 examples/inherit_viewer_style.py              | 20 +++++----
 examples/interaction_box_image.py             |  1 +
 examples/interaction_box_points.py            |  3 +-
 examples/interactive_move_rectangle_3d.py     |  3 +-
 examples/interactive_scripting.py             |  7 +--
 examples/labels-2d.py                         |  2 +-
 examples/layers.py                            |  4 +-
 examples/linked_layers.py                     |  4 +-
 examples/live_tiffs_.py                       |  7 +--
 examples/live_tiffs_generator_.py             |  5 +--
 examples/magic_image_arithmetic.py            |  2 +
 examples/magic_parameter_sweep.py             |  4 +-
 examples/magic_viewer.py                      |  1 +
 examples/minimum_blending.py                  |  1 +
 examples/mixed-dimensions-labels.py           |  5 ++-
 examples/mouse_drag_callback.py               |  4 +-
 examples/multiple_viewer_widget.py            | 18 ++++----
 examples/multiple_viewers.py                  |  2 +-
 examples/multithreading_simple_.py            |  4 +-
 examples/multithreading_two_way_.py           |  4 +-
 examples/nD_image.py                          |  2 +-
 examples/nD_labels.py                         |  4 +-
 examples/nD_multiscale_image.py               |  4 +-
 examples/nD_multiscale_image_non_uniform.py   |  4 +-
 examples/nD_points.py                         |  2 +-
 examples/nD_points_with_features.py           |  2 +-
 examples/nD_shapes.py                         |  2 +-
 examples/nD_shapes_with_text.py               |  2 +-
 examples/nD_surface.py                        |  2 +-
 examples/nD_vectors.py                        |  2 +-
 examples/nD_vectors_image.py                  |  2 +-
 examples/new_theme.py                         |  2 +-
 examples/paint-nd.py                          |  2 +-
 examples/pass_colormaps.py                    |  2 +-
 examples/point_cloud.py                       |  1 +
 examples/points-over-time.py                  |  4 +-
 examples/progress_bar_minimal_.py             | 11 +++--
 examples/progress_bar_segmentation_.py        |  9 ++--
 examples/progress_bar_threading_.py           |  2 +
 examples/reader_plugin.py                     |  3 +-
 examples/scale_bar.py                         |  3 +-
 examples/set_colormaps.py                     |  2 +-
 examples/set_theme.py                         |  2 +-
 examples/shapes_to_labels.py                  |  2 +-
 examples/show_points_based_on_feature.py      |  2 +-
 examples/spheres_.py                          |  3 +-
 examples/spherical_points.py                  |  2 +-
 examples/surface_normals_wireframe.py         |  4 +-
 examples/surface_timeseries_.py               |  6 +--
 examples/swap_dims.py                         |  2 +-
 examples/tiled-rendering-2d_.py               |  4 +-
 examples/to_screenshot.py                     |  2 +-
 examples/tracks_2d.py                         |  3 +-
 examples/tracks_3d.py                         |  3 +-
 examples/tracks_3d_with_graph.py              |  3 +-
 examples/update_console.py                    |  2 +-
 examples/viewer_fps_label.py                  |  1 +
 examples/without_gui_qt.py                    |  4 +-
 examples/xarray_nD_image_.py                  |  3 +-
 examples/zarr_nD_image_.py                    |  3 +-
 napari/__main__.py                            |  5 +--
 napari/_app_model/actions/_toggle_action.py   |  2 +-
 napari/_app_model/context/_context.py         |  5 +--
 napari/_qt/_tests/test_plugin_widgets.py      | 24 +++--------
 napari/_qt/code_syntax_highlight.py           |  4 +-
 napari/_qt/containers/_base_item_model.py     |  2 +-
 napari/_qt/containers/_tests/test_factory.py  |  2 +-
 napari/_qt/containers/_tests/test_qt_list.py  |  4 +-
 napari/_qt/containers/qt_layer_list.py        |  2 +-
 napari/_qt/containers/qt_list_model.py        |  4 +-
 napari/_qt/containers/qt_list_view.py         |  2 +-
 napari/_qt/containers/qt_tree_model.py        |  7 +--
 napari/_qt/containers/qt_tree_view.py         |  2 +-
 napari/_qt/dialogs/confirm_close_dialog.py    |  2 +-
 napari/_qt/dialogs/preferences_dialog.py      |  4 +-
 napari/_qt/dialogs/qt_about.py                |  4 +-
 napari/_qt/dialogs/qt_activity_dialog.py      |  2 +-
 napari/_qt/dialogs/qt_modal.py                |  2 +-
 napari/_qt/dialogs/qt_notification.py         | 10 ++---
 napari/_qt/dialogs/qt_plugin_dialog.py        | 18 +++++---
 napari/_qt/dialogs/qt_reader_dialog.py        |  6 ++-
 napari/_qt/dialogs/screenshot_dialog.py       |  6 ++-
 napari/_qt/experimental/qt_chunk_receiver.py  |  4 +-
 napari/_qt/experimental/qt_poll.py            |  4 +-
 .../layer_controls/qt_colormap_combobox.py    |  4 +-
 .../_qt/layer_controls/qt_image_controls.py   |  2 +-
 .../layer_controls/qt_image_controls_base.py  |  4 +-
 .../_qt/layer_controls/qt_labels_controls.py  |  4 +-
 .../layer_controls/qt_layer_controls_base.py  |  4 +-
 .../qt_layer_controls_container.py            |  2 +-
 .../_qt/layer_controls/qt_points_controls.py  |  2 +-
 .../_qt/layer_controls/qt_shapes_controls.py  |  2 +-
 .../_qt/layer_controls/qt_surface_controls.py |  2 +-
 .../_qt/layer_controls/qt_tracks_controls.py  |  2 +-
 .../_qt/layer_controls/qt_vectors_controls.py |  2 +-
 napari/_qt/menus/_util.py                     |  2 +-
 napari/_qt/menus/debug_menu.py                |  2 +-
 napari/_qt/menus/file_menu.py                 |  6 +--
 napari/_qt/menus/plugins_menu.py              |  2 +-
 napari/_qt/menus/window_menu.py               |  2 +-
 napari/_qt/perf/qt_event_tracing.py           |  2 +-
 napari/_qt/perf/qt_performance.py             |  2 +-
 napari/_qt/qt_event_loop.py                   |  2 +-
 napari/_qt/qt_main_window.py                  | 12 +++---
 napari/_qt/qt_resources/_svg.py               |  3 --
 napari/_qt/qt_resources/_tests/test_svg.py    |  8 ----
 napari/_qt/qt_viewer.py                       |  4 +-
 napari/_qt/utils.py                           |  8 ++--
 napari/_qt/widgets/qt_color_swatch.py         |  8 ++--
 napari/_qt/widgets/qt_dict_table.py           |  2 +-
 napari/_qt/widgets/qt_dims.py                 |  4 +-
 napari/_qt/widgets/qt_dims_slider.py          |  8 ++--
 napari/_qt/widgets/qt_dims_sorter.py          |  4 +-
 napari/_qt/widgets/qt_extension2reader.py     |  6 ++-
 napari/_qt/widgets/qt_highlight_preview.py    |  6 +--
 napari/_qt/widgets/qt_keyboard_settings.py    |  6 +--
 napari/_qt/widgets/qt_message_popup.py        |  2 +-
 napari/_qt/widgets/qt_mode_buttons.py         |  4 +-
 napari/_qt/widgets/qt_plugin_sorter.py        |  6 +--
 napari/_qt/widgets/qt_range_slider_popup.py   |  2 +-
 napari/_qt/widgets/qt_size_preview.py         |  4 +-
 napari/_qt/widgets/qt_splash_screen.py        |  2 +-
 napari/_qt/widgets/qt_theme_sample.py         |  4 +-
 napari/_qt/widgets/qt_viewer_buttons.py       |  8 ++--
 napari/_qt/widgets/qt_viewer_dock_widget.py   |  4 +-
 napari/_qt/widgets/qt_viewer_status_bar.py    |  2 +-
 napari/_qt/widgets/qt_welcome.py              |  4 +-
 napari/_tests/test_conftest_fixtures.py       |  2 +-
 napari/_tests/test_examples.py                |  6 +--
 napari/_tests/test_interactive_transforms.py  |  2 +-
 napari/_vispy/camera.py                       |  2 +-
 napari/_vispy/canvas.py                       |  2 +-
 napari/_vispy/experimental/texture_atlas.py   |  2 +-
 napari/_vispy/experimental/tile_grid.py       |  2 +-
 napari/_vispy/experimental/tile_set.py        |  2 +-
 .../_vispy/experimental/tiled_image_visual.py |  2 +-
 .../experimental/vispy_tiled_image_layer.py   |  2 +-
 napari/_vispy/filters/tracks.py               |  2 +-
 napari/_vispy/layers/base.py                  |  4 +-
 napari/_vispy/layers/image.py                 |  4 +-
 napari/_vispy/layers/labels.py                |  2 +-
 napari/_vispy/layers/points.py                |  2 +-
 napari/_vispy/layers/shapes.py                |  2 +-
 napari/_vispy/layers/surface.py               |  2 +-
 napari/_vispy/layers/tracks.py                |  2 +-
 napari/_vispy/layers/vectors.py               |  2 +-
 napari/_vispy/overlays/axes.py                |  2 +-
 napari/_vispy/overlays/base.py                |  6 +--
 napari/_vispy/overlays/interaction_box.py     |  2 +-
 napari/_vispy/overlays/scale_bar.py           |  2 +-
 napari/_vispy/overlays/text.py                |  2 +-
 napari/_vispy/utils/gl.py                     |  4 +-
 napari/_vispy/visuals/axes.py                 |  2 +-
 .../_vispy/visuals/clipping_planes_mixin.py   |  2 +-
 napari/_vispy/visuals/markers.py              |  2 +-
 napari/_vispy/visuals/points.py               |  2 +-
 napari/_vispy/visuals/scale_bar.py            |  2 +-
 napari/_vispy/visuals/shapes.py               |  2 +-
 napari/_vispy/visuals/surface.py              |  2 +-
 napari/_vispy/visuals/tracks.py               |  2 +-
 napari/components/_tests/test_layers_list.py  |  2 +-
 .../_tests/test_viewer_keybindings.py         |  4 +-
 napari/components/_tests/test_viewer_model.py |  6 +--
 .../_tests/test_viewer_mouse_bindings.py      |  2 +-
 napari/components/dims.py                     |  8 +++-
 .../components/experimental/chunk/_cache.py   |  2 +-
 .../experimental/chunk/_commands/_loader.py   |  8 ++--
 .../experimental/chunk/_commands/_tables.py   |  4 +-
 .../experimental/chunk/_delay_queue.py        |  2 +-
 napari/components/experimental/chunk/_info.py |  8 ++--
 .../components/experimental/chunk/_loader.py  |  2 +-
 napari/components/experimental/chunk/_pool.py |  4 +-
 .../experimental/chunk/_pool_group.py         | 10 +++--
 .../components/experimental/chunk/_request.py |  6 +--
 .../experimental/chunk/_tests/test_loader.py  |  4 +-
 .../components/experimental/chunk/_utils.py   |  2 +-
 napari/components/experimental/commands.py    |  4 +-
 .../components/experimental/monitor/_api.py   |  2 +-
 .../experimental/monitor/_monitor.py          |  2 +-
 .../experimental/monitor/_service.py          |  2 +-
 .../experimental/remote/_commands.py          |  2 +-
 .../experimental/remote/_manager.py           |  2 +-
 .../experimental/remote/_messages.py          |  2 +-
 napari/components/layerlist.py                |  2 +-
 .../_interaction_box_mouse_bindings.py        |  2 +-
 napari/components/viewer_model.py             | 10 ++---
 napari/errors/reader_errors.py                |  2 +-
 napari/layers/_tests/test_serialize.py        |  2 +-
 napari/layers/base/base.py                    |  4 +-
 napari/layers/image/_image_slice.py           |  2 +-
 napari/layers/image/_image_slice_data.py      |  2 +-
 napari/layers/image/_image_view.py            |  2 +-
 .../layers/image/experimental/_chunk_set.py   |  2 +-
 .../experimental/_chunked_image_loader.py     |  2 +-
 .../image/experimental/_chunked_slice_data.py |  2 +-
 .../image/experimental/_image_location.py     |  2 +-
 .../image/experimental/_octree_loader.py      |  2 +-
 .../image/experimental/_octree_slice.py       |  2 +-
 napari/layers/image/experimental/octree.py    |  2 +-
 .../layers/image/experimental/octree_chunk.py |  2 +-
 .../layers/image/experimental/octree_image.py |  2 +-
 .../image/experimental/octree_intersection.py |  2 +-
 .../layers/image/experimental/octree_level.py |  4 +-
 .../layers/image/experimental/octree_util.py  |  4 +-
 napari/layers/image/image.py                  |  4 +-
 napari/layers/intensity_mixin.py              |  2 +-
 napari/layers/labels/labels.py                |  2 +-
 napari/layers/points/_tests/test_points.py    |  2 +-
 .../_tests/test_points_mouse_bindings.py      |  4 +-
 napari/layers/points/points.py                |  8 ++--
 napari/layers/shapes/_mesh.py                 |  2 +-
 napari/layers/shapes/_shape_list.py           |  8 ++--
 .../shapes/_shapes_models/_polgyon_base.py    |  2 +-
 .../layers/shapes/_shapes_models/ellipse.py   |  2 +-
 napari/layers/shapes/_shapes_models/line.py   |  2 +-
 napari/layers/shapes/_shapes_models/path.py   |  2 +-
 .../layers/shapes/_shapes_models/polygon.py   |  2 +-
 .../layers/shapes/_shapes_models/rectangle.py |  2 +-
 napari/layers/shapes/_shapes_models/shape.py  |  4 +-
 napari/layers/shapes/_tests/test_shapes.py    |  2 +-
 .../_tests/test_shapes_mouse_bindings.py      |  4 +-
 napari/layers/shapes/shapes.py                |  8 ++--
 napari/layers/surface/surface.py              |  2 +-
 napari/layers/tracks/_track_utils.py          |  2 +-
 napari/layers/tracks/tracks.py                |  2 +-
 napari/layers/utils/_link_layers.py           |  8 ++--
 .../layers/utils/_tests/test_layer_utils.py   |  4 +-
 .../layers/utils/_tests/test_stack_utils.py   |  2 +-
 napari/layers/utils/color_encoding.py         |  4 +-
 napari/layers/utils/color_manager.py          | 17 +++++---
 napari/layers/utils/layer_utils.py            |  6 +--
 napari/layers/utils/stack_utils.py            |  4 +-
 napari/layers/utils/style_encoding.py         |  2 +-
 napari/layers/utils/text_manager.py           |  2 +-
 napari/layers/vectors/vectors.py              |  2 +-
 napari/plugins/__init__.py                    |  3 +-
 napari/plugins/_npe2.py                       | 11 ++++-
 napari/plugins/_plugin_manager.py             |  8 ++--
 napari/plugins/_tests/test_exceptions.py      |  2 +-
 napari/plugins/_tests/test_hub.py             |  2 +-
 napari/plugins/hub.py                         |  4 +-
 napari/plugins/io.py                          |  6 +--
 napari/settings/_base.py                      | 25 ++++++-----
 napari/settings/_migrations.py                |  4 +-
 napari/settings/_tests/test_migrations.py     |  4 +-
 napari/utils/_tests/test_key_bindings.py      |  2 +-
 napari/utils/_tests/test_migrations.py        |  2 +-
 napari/utils/_tests/test_misc.py              |  4 +-
 napari/utils/_tests/test_proxies.py           |  2 +-
 napari/utils/_testsupport.py                  |  4 +-
 napari/utils/action_manager.py                |  2 +-
 napari/utils/colormaps/colormap.py            |  4 +-
 napari/utils/colormaps/colormap_utils.py      |  4 +-
 napari/utils/colormaps/standardize_color.py   |  4 +-
 .../utils/events/_tests/test_event_emitter.py |  4 +-
 .../utils/events/_tests/test_evented_dict.py  |  2 +-
 .../utils/events/_tests/test_evented_list.py  |  5 ++-
 napari/utils/events/_tests/test_typed_list.py |  4 +-
 napari/utils/events/containers/_dict.py       |  2 +-
 .../utils/events/containers/_evented_dict.py  |  4 +-
 .../utils/events/containers/_evented_list.py  |  8 ++--
 napari/utils/events/containers/_selection.py  |  8 +++-
 napari/utils/events/containers/_set.py        |  8 +++-
 napari/utils/events/containers/_typed.py      |  6 ++-
 napari/utils/events/debugging.py              |  2 +-
 napari/utils/events/event.py                  | 16 +++----
 napari/utils/events/evented_model.py          |  2 +-
 napari/utils/info.py                          | 15 +++----
 napari/utils/interactions.py                  |  2 +-
 napari/utils/io.py                            | 10 +++--
 napari/utils/key_bindings.py                  |  6 +--
 napari/utils/misc.py                          | 12 ++----
 napari/utils/mouse_bindings.py                |  2 +-
 napari/utils/naming.py                        |  4 +-
 napari/utils/notebook_display.py              |  2 +-
 napari/utils/notifications.py                 | 14 +++---
 napari/utils/perf/_config.py                  |  8 ++--
 napari/utils/perf/_event.py                   |  2 +-
 napari/utils/perf/_patcher.py                 | 14 +++---
 napari/utils/perf/_stat.py                    |  2 +-
 napari/utils/perf/_timers.py                  |  2 +-
 napari/utils/perf/_trace_file.py              | 13 +++---
 napari/utils/stubgen.py                       | 12 ++++--
 napari/utils/theme.py                         | 13 +++---
 napari/utils/transforms/transforms.py         | 10 ++---
 napari/utils/translations.py                  |  6 +--
 napari/utils/tree/group.py                    | 10 +++--
 napari/utils/tree/node.py                     |  2 +-
 napari/view_layers.py                         |  2 +-
 napari/viewer.py                              |  2 +-
 napari/window.py                              |  2 +-
 napari_builtins/io/_read.py                   | 20 +++++----
 napari_builtins/io/_write.py                  |  8 ++--
 pyproject.toml                                | 43 +++++++++++++++----
 setup.cfg                                     | 15 +------
 tools/test_strings.py                         | 31 ++++++-------
 tox.ini                                       | 11 +----
 339 files changed, 781 insertions(+), 716 deletions(-)

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 925d47d3..1d682278 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -4,11 +4,6 @@ repos:
     hooks:
     -   id: absolufy-imports
         exclude: _vendor|vendored|examples
--   repo: https://github.com/pycqa/isort
-    rev: 5.11.4
-    hooks:
-    - id: isort
-      exclude: _vendor|vendored|examples
 -   repo: https://github.com/psf/black
     rev: 22.12.0
     hooks:
@@ -16,24 +11,10 @@ repos:
       pass_filenames: true
       exclude: _vendor|vendored|examples
 -   repo: https://github.com/charliermarsh/ruff-pre-commit
-    rev: v0.0.206
+    rev: v0.0.235
     hooks:
       - id: ruff
         exclude: _vendor|vendored
--   repo: https://github.com/PyCQA/flake8
-    rev: 6.0.0
-    hooks:
-    - id: flake8
-      additional_dependencies: [flake8-typing-imports]
-      pass_filenames: true
-      # this seems to need to be here in addition to setup.cfg
-      exclude: _vendor|vendored|__init__.py|examples
--   repo: https://github.com/asottile/pyupgrade
-    rev: v3.3.1
-    hooks:
-    - id: pyupgrade
-      args: ["--py38-plus", "--keep-runtime-typing"]
-      exclude: _vendor|vendored|examples
 -   repo: https://github.com/seddonym/import-linter
     rev: v1.6.0
     hooks:
diff --git a/examples/3D_paths.py b/examples/3D_paths.py
index 885e9b78..1417b125 100644
--- a/examples/3D_paths.py
+++ b/examples/3D_paths.py
@@ -12,8 +12,8 @@ appearing on each slice.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(
             length=128, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.05
diff --git a/examples/3Dimage_plane_rendering.py b/examples/3Dimage_plane_rendering.py
index 661866c6..ffd76425 100644
--- a/examples/3Dimage_plane_rendering.py
+++ b/examples/3Dimage_plane_rendering.py
@@ -7,11 +7,12 @@ with a simple widget for modifying plane parameters.
 
 .. tags:: visualization-advanced, gui, layers
 """
-import napari
 import numpy as np
-from napari.utils.translations import trans
 from skimage import data
 
+import napari
+from napari.utils.translations import trans
+
 viewer = napari.Viewer(ndisplay=3)
 
 # add a 3D image
diff --git a/examples/3d_kymograph_.py b/examples/3d_kymograph_.py
index d5109e7e..7c0ec075 100644
--- a/examples/3d_kymograph_.py
+++ b/examples/3d_kymograph_.py
@@ -7,11 +7,12 @@ can also be used to render 2d timelapse acquisitions as kymographs.
 
 .. tags:: experimental
 """
-from typing import Dict, List, Tuple
+from itertools import product
+
 import numpy as np
-import napari
 from tqdm import tqdm
-from itertools import product
+
+import napari
 
 try:
     from omero.gateway import BlitzGateway
@@ -158,4 +159,4 @@ v.camera.center = (440, 880, 1490)
 v.camera.angles = (-20, 23, -50)
 v.camera.zoom = 0.17
 
-napari.run()
\ No newline at end of file
+napari.run()
diff --git a/examples/add_3D_image.py b/examples/add_3D_image.py
index e85e1fb7..5bcd02b6 100644
--- a/examples/add_3D_image.py
+++ b/examples/add_3D_image.py
@@ -8,8 +8,8 @@ Display a 3D image layer using the :meth:`add_image` API.
 """
 
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(length=64, volume_fraction=0.1, n_dim=3).astype(
     float
diff --git a/examples/add_grayscale_image.py b/examples/add_grayscale_image.py
index ad890a6d..6dbfa848 100644
--- a/examples/add_grayscale_image.py
+++ b/examples/add_grayscale_image.py
@@ -7,10 +7,10 @@ Display one grayscale image using the add_image API.
 .. tags:: visualization-basic
 """
 
-from skimage import data
-import napari
 import numpy as np
+from skimage import data
 
+import napari
 
 # simulating a grayscale image here for testing contrast limits adjustments
 image = data.astronaut().mean(-1) * 100 + 100
diff --git a/examples/add_image.py b/examples/add_image.py
index b5e99dce..dcb6ae73 100644
--- a/examples/add_image.py
+++ b/examples/add_image.py
@@ -8,6 +8,7 @@ Display one image using the :func:`view_image` API.
 """
 
 from skimage import data
+
 import napari
 
 # create the viewer with an image
diff --git a/examples/add_image_transformed.py b/examples/add_image_transformed.py
index a619c289..aebc8adb 100644
--- a/examples/add_image_transformed.py
+++ b/examples/add_image_transformed.py
@@ -8,6 +8,7 @@ Display one image and transform it using the :func:`view_image` API.
 """
 
 from skimage import data
+
 import napari
 
 # create the viewer with an image and transform (rotate) it
diff --git a/examples/add_labels.py b/examples/add_labels.py
index 1c7a6ad6..a58180e2 100644
--- a/examples/add_labels.py
+++ b/examples/add_labels.py
@@ -10,11 +10,11 @@ Display a labels layer above of an image layer using the ``add_labels`` and
 
 from skimage import data
 from skimage.filters import threshold_otsu
-from skimage.segmentation import clear_border
 from skimage.measure import label
-from skimage.morphology import closing, square, remove_small_objects
-import napari
+from skimage.morphology import closing, remove_small_objects, square
+from skimage.segmentation import clear_border
 
+import napari
 
 image = data.coins()[50:-50, 50:-50]
 
diff --git a/examples/add_labels_with_features.py b/examples/add_labels_with_features.py
index e68b15bb..c12a9580 100644
--- a/examples/add_labels_with_features.py
+++ b/examples/add_labels_with_features.py
@@ -8,14 +8,14 @@ Display a labels layer with various features
 """
 
 
+import numpy as np
 from skimage import data
 from skimage.filters import threshold_otsu
-from skimage.segmentation import clear_border
 from skimage.measure import label
-from skimage.morphology import closing, square, remove_small_objects
-import numpy as np
-import napari
+from skimage.morphology import closing, remove_small_objects, square
+from skimage.segmentation import clear_border
 
+import napari
 
 image = data.coins()[50:-50, 50:-50]
 
diff --git a/examples/add_multiscale_image.py b/examples/add_multiscale_image.py
index ce2188f1..9461fb30 100644
--- a/examples/add_multiscale_image.py
+++ b/examples/add_multiscale_image.py
@@ -7,11 +7,11 @@ Displays a multiscale image
 .. tags:: visualization-advanced
 """
 
+import numpy as np
 from skimage import data
 from skimage.transform import pyramid_gaussian
-import napari
-import numpy as np
 
+import napari
 
 # create multiscale from astronaut image
 base = np.tile(data.astronaut(), (8, 8, 1))
diff --git a/examples/add_points.py b/examples/add_points.py
index ab1a1b0d..263710b3 100644
--- a/examples/add_points.py
+++ b/examples/add_points.py
@@ -11,8 +11,8 @@ Display a points layer on top of an image layer using the ``add_points`` and
 import numpy as np
 from skimage import data
 from skimage.color import rgb2gray
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(rgb2gray(data.astronaut()))
diff --git a/examples/add_points_on_nD_shapes.py b/examples/add_points_on_nD_shapes.py
index 1cb95d63..de77941c 100644
--- a/examples/add_points_on_nD_shapes.py
+++ b/examples/add_points_on_nD_shapes.py
@@ -7,9 +7,10 @@ Add points on nD shapes in 3D using a mouse callback
 .. tags:: visualization-nD
 """
 
-import napari
 import numpy as np
 
+import napari
+
 # Create rectangles in 4D
 data = [
         [
diff --git a/examples/add_points_with_features.py b/examples/add_points_with_features.py
index df65f3ba..cc9e86a8 100644
--- a/examples/add_points_with_features.py
+++ b/examples/add_points_with_features.py
@@ -11,8 +11,8 @@ Display a points layer on top of an image layer using the ``add_points`` and
 import numpy as np
 from skimage import data
 from skimage.color import rgb2gray
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(rgb2gray(data.astronaut()))
diff --git a/examples/add_points_with_multicolor_text.py b/examples/add_points_with_multicolor_text.py
index 1c70ae30..4f488616 100644
--- a/examples/add_points_with_multicolor_text.py
+++ b/examples/add_points_with_multicolor_text.py
@@ -9,6 +9,7 @@ multiple face colors mapped from features for the points and text.
 """
 
 import numpy as np
+
 import napari
 
 # add the image with three points
diff --git a/examples/add_points_with_text.py b/examples/add_points_with_text.py
index 09aafcc4..5403d2bd 100644
--- a/examples/add_points_with_text.py
+++ b/examples/add_points_with_text.py
@@ -9,8 +9,8 @@ Display a points layer on top of an image layer using the ``add_points`` and
 """
 
 import numpy as np
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(np.zeros((400, 400)))
diff --git a/examples/add_shapes.py b/examples/add_shapes.py
index 1ae8d637..c9c57ecb 100644
--- a/examples/add_shapes.py
+++ b/examples/add_shapes.py
@@ -11,8 +11,8 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(data.camera(), name='photographer')
diff --git a/examples/add_shapes_with_features.py b/examples/add_shapes_with_features.py
index 65d08ffa..affc0f19 100644
--- a/examples/add_shapes_with_features.py
+++ b/examples/add_shapes_with_features.py
@@ -11,8 +11,8 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(data.camera(), name='photographer')
diff --git a/examples/add_shapes_with_text.py b/examples/add_shapes_with_text.py
index 89171284..770a3dc7 100644
--- a/examples/add_shapes_with_text.py
+++ b/examples/add_shapes_with_text.py
@@ -11,8 +11,8 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 # add the image
 viewer = napari.view_image(data.camera(), name='photographer')
diff --git a/examples/add_surface_2D.py b/examples/add_surface_2D.py
index ab875843..bbb61815 100644
--- a/examples/add_surface_2D.py
+++ b/examples/add_surface_2D.py
@@ -8,8 +8,8 @@ Display a 2D surface
 """
 
 import numpy as np
-import napari
 
+import napari
 
 data = np.array([[0, 0], [0, 20], [10, 0], [10, 10]])
 faces = np.array([[0, 1, 2], [1, 2, 3]])
diff --git a/examples/add_vectors.py b/examples/add_vectors.py
index f9995c66..01723b63 100644
--- a/examples/add_vectors.py
+++ b/examples/add_vectors.py
@@ -11,10 +11,10 @@ Each vector position is defined by an (x, y, x-proj, y-proj) element where
 .. tags:: visualization-basic
 """
 
-import napari
-from skimage import data
 import numpy as np
+from skimage import data
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/add_vectors_color_by_angle.py b/examples/add_vectors_color_by_angle.py
index 569578f1..6d9ade92 100644
--- a/examples/add_vectors_color_by_angle.py
+++ b/examples/add_vectors_color_by_angle.py
@@ -8,10 +8,10 @@ The color of the vectors is mapped to their 'angle' feature.
 .. tags:: visualization-advanced
 """
 
-import napari
-from skimage import data
 import numpy as np
+from skimage import data
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/add_vectors_image.py b/examples/add_vectors_image.py
index 6bfc3459..17e57d21 100644
--- a/examples/add_vectors_image.py
+++ b/examples/add_vectors_image.py
@@ -11,9 +11,9 @@ Each vector position is defined by an (x-proj, y-proj) element where
 .. tags:: visualization-basic
 """
 
-import napari
 import numpy as np
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/affine_transforms.py b/examples/affine_transforms.py
index 28fa54ab..2f5572c1 100644
--- a/examples/affine_transforms.py
+++ b/examples/affine_transforms.py
@@ -7,9 +7,10 @@ Display an image and its corners before and after an affine transform
 .. tags:: visualization-advanced
 """
 import numpy as np
-import napari
 import scipy.ndimage as ndi
 
+import napari
+
 # Create a random image
 image = np.random.random((5, 5))
 
diff --git a/examples/annotate-2d.py b/examples/annotate-2d.py
index 279b97b6..770c4cf9 100644
--- a/examples/annotate-2d.py
+++ b/examples/annotate-2d.py
@@ -10,8 +10,8 @@ Display one points layer ontop of one image layer using the ``add_points`` and
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 print("click to add points; close the window when finished.")
 
diff --git a/examples/annotate_segmentation_with_text.py b/examples/annotate_segmentation_with_text.py
index 45ac3a38..d7fefdbb 100644
--- a/examples/annotate_segmentation_with_text.py
+++ b/examples/annotate_segmentation_with_text.py
@@ -10,9 +10,10 @@ bounding boxes and text
 import numpy as np
 from skimage import data
 from skimage.filters import threshold_otsu
-from skimage.segmentation import clear_border
 from skimage.measure import label, regionprops_table
-from skimage.morphology import closing, square, remove_small_objects
+from skimage.morphology import closing, remove_small_objects, square
+from skimage.segmentation import clear_border
+
 import napari
 
 
diff --git a/examples/bbox_annotator.py b/examples/bbox_annotator.py
index 48a24d96..be21b1c3 100644
--- a/examples/bbox_annotator.py
+++ b/examples/bbox_annotator.py
@@ -5,12 +5,12 @@ bbox annotator
 .. tags:: gui
 """
 
-from magicgui.widgets import ComboBox, Container
-import napari
 import numpy as np
 import pandas as pd
+from magicgui.widgets import ComboBox, Container
 from skimage import data
 
+import napari
 
 # set up the categorical annotation values and text display properties
 box_annotations = ['person', 'sky', 'camera']
diff --git a/examples/clipboard_.py b/examples/clipboard_.py
index 4312f42c..9ca21ad6 100644
--- a/examples/clipboard_.py
+++ b/examples/clipboard_.py
@@ -7,15 +7,16 @@ Copy screenshot of the canvas or the whole viewer to clipboard.
 .. tags:: gui
 """
 
+from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget
 from skimage import data
-from qtpy.QtWidgets import QVBoxLayout, QPushButton, QWidget
+
 import napari
 
 # create the viewer with an image
 viewer = napari.view_image(data.moon())
 
 class Grabber(QWidget):
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
 
         self.copy_canvas_btn = QPushButton("Copy Canvas to Clipboard", self)
diff --git a/examples/clipping_planes_interactive_.py b/examples/clipping_planes_interactive_.py
index d95c237a..7f730e24 100644
--- a/examples/clipping_planes_interactive_.py
+++ b/examples/clipping_planes_interactive_.py
@@ -7,12 +7,13 @@ for moving the plane
 
 .. tags:: experimental
 """
-import napari
 import numpy as np
-from skimage import data
 from scipy import ndimage
+from skimage import data
 from vispy.geometry import create_sphere
 
+import napari
+
 viewer = napari.Viewer(ndisplay=3)
 
 # VOLUME and LABELS
diff --git a/examples/cursor_position.py b/examples/cursor_position.py
index d20e9b9d..5df637b4 100644
--- a/examples/cursor_position.py
+++ b/examples/cursor_position.py
@@ -8,8 +8,8 @@ Add small data to examine cursor positions
 """
 
 import numpy as np
-import napari
 
+import napari
 
 viewer = napari.Viewer()
 image = np.array([[1, 0, 0, 1],
diff --git a/examples/cursor_ray.py b/examples/cursor_ray.py
index 5da0f31d..d937e9fe 100644
--- a/examples/cursor_ray.py
+++ b/examples/cursor_ray.py
@@ -7,6 +7,7 @@ Depict a ray through a layer in 3D to demonstrate interactive 3D functionality
 .. tags:: interactivity
 """
 import numpy as np
+
 import napari
 
 sidelength_data = 64
diff --git a/examples/custom_key_bindings.py b/examples/custom_key_bindings.py
index 4186b11d..032852bf 100644
--- a/examples/custom_key_bindings.py
+++ b/examples/custom_key_bindings.py
@@ -8,8 +8,8 @@ Display one 4-D image layer using the ``add_image`` API
 """
 
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(
     length=128, blob_size_fraction=0.05, n_dim=2, volume_fraction=0.25
diff --git a/examples/custom_mouse_functions.py b/examples/custom_mouse_functions.py
index a6941fce..acd28137 100644
--- a/examples/custom_mouse_functions.py
+++ b/examples/custom_mouse_functions.py
@@ -7,12 +7,12 @@ Display one 4-D image layer using the ``add_image`` API
 .. tags:: gui
 """
 
+import numpy as np
+from scipy import ndimage as ndi
 from skimage import data
 from skimage.morphology import binary_dilation, binary_erosion
-from scipy import ndimage as ndi
-import numpy as np
-import napari
 
+import napari
 
 np.random.seed(1)
 viewer = napari.Viewer()
diff --git a/examples/dask_nD_image.py b/examples/dask_nD_image.py
index b11bbcee..15bf5cec 100644
--- a/examples/dask_nD_image.py
+++ b/examples/dask_nD_image.py
@@ -13,12 +13,12 @@ except ModuleNotFoundError:
     raise ModuleNotFoundError(
         """This example uses a dask array but dask is not
     installed. To install try 'pip install dask'."""
-    )
+    ) from None
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = da.stack(
     [
diff --git a/examples/dev/gui_notifications.py b/examples/dev/gui_notifications.py
index 59e6e6bb..e6f3f6c2 100644
--- a/examples/dev/gui_notifications.py
+++ b/examples/dev/gui_notifications.py
@@ -1,6 +1,7 @@
 import warnings
-from napari._qt.widgets.qt_viewer_buttons import QtViewerPushButton
+
 import napari
+from napari._qt.widgets.qt_viewer_buttons import QtViewerPushButton
 
 
 def raise_():
diff --git a/examples/dev/leaking_check.py b/examples/dev/leaking_check.py
index fb67da87..36f86f0a 100644
--- a/examples/dev/leaking_check.py
+++ b/examples/dev/leaking_check.py
@@ -1,13 +1,14 @@
+import gc
 import os
-import psutil
 import weakref
-import gc
-import objgraph
 
-import napari
 import numpy as np
+import objgraph
+import psutil
 import qtpy
 
+import napari
+
 process = psutil.Process(os.getpid())
 viewer = napari.Viewer()
 
diff --git a/examples/dev/plot_2d_edge_meshes.py b/examples/dev/plot_2d_edge_meshes.py
index f7ad2b7a..b822057e 100644
--- a/examples/dev/plot_2d_edge_meshes.py
+++ b/examples/dev/plot_2d_edge_meshes.py
@@ -1,9 +1,10 @@
-from napari.layers.shapes._shapes_utils import (
-    generate_2D_edge_meshes,
-)  # , old_generate_2D_edge_meshes
 import matplotlib.pyplot as plt
 from matplotlib.patches import Polygon
 
+from napari.layers.shapes._shapes_utils import (
+    generate_2D_edge_meshes,
+)
+
 fig, axes = plt.subplots(2, 3)
 # fig.set_figwidth(15)
 # fig.set_figheight(10)
diff --git a/examples/dev/q_list_view.py b/examples/dev/q_list_view.py
index a9bc6700..fb27cce2 100644
--- a/examples/dev/q_list_view.py
+++ b/examples/dev/q_list_view.py
@@ -11,18 +11,17 @@ up to date, and can modify the python object... while maintining the python
 object as the single "source of truth".
 """
 import napari
-from napari.qt import get_app
 from napari._qt.containers import QtListView
+from napari.qt import get_app
 from napari.utils.events import SelectableEventedList
 
-
 get_app()
 
 
 class MyObject:
     """generic object."""
 
-    def __init__(self, name):
+    def __init__(self, name) -> None:
         self.name = name
 
     def __str__(self):
diff --git a/examples/dev/q_node_tree.py b/examples/dev/q_node_tree.py
index 0a4291e6..ee9e2d65 100644
--- a/examples/dev/q_node_tree.py
+++ b/examples/dev/q_node_tree.py
@@ -15,9 +15,9 @@ is capable of providing a basic GUI for any tree structure based on
 `napari.utils.tree.Group`.
 """
 import napari
-from napari.qt import get_app
 from napari._qt.containers import QtNodeTreeView
-from napari.utils.tree import Node, Group
+from napari.qt import get_app
+from napari.utils.tree import Group, Node
 
 get_app()
 
diff --git a/examples/dynamic-projections-dask.py b/examples/dynamic-projections-dask.py
index e9bd3e66..fff55fe8 100644
--- a/examples/dynamic-projections-dask.py
+++ b/examples/dynamic-projections-dask.py
@@ -10,12 +10,13 @@ them using magicgui.
 .. tags:: visualization-advanced
 """
 
-import numpy as np
-import napari
 import dask.array as da
+import numpy as np
 from dask.array.lib.stride_tricks import sliding_window_view
 from skimage import data
 
+import napari
+
 ##############################################################################
 # Part 1: using code to view a specific value.
 
@@ -39,6 +40,7 @@ if __name__ == '__main__':
 
 from magicgui import magicgui  # noqa: E402
 
+
 def sliding_window_mean(
     arr: napari.types.ImageData, size: int = 1
 ) -> napari.types.LayerDataTuple:
diff --git a/examples/embed_ipython_.py b/examples/embed_ipython_.py
index 232f2a7e..aca2abb0 100644
--- a/examples/embed_ipython_.py
+++ b/examples/embed_ipython_.py
@@ -13,9 +13,10 @@ ipython console which can outlive the viewer.
 .. tags:: gui
 """
 
-import napari
 from IPython.terminal.embed import InteractiveShellEmbed
 
+import napari
+
 # any code
 text = 'some text'
 
diff --git a/examples/image_depth.py b/examples/image_depth.py
index 7c4492f0..cc23d2ce 100644
--- a/examples/image_depth.py
+++ b/examples/image_depth.py
@@ -5,9 +5,10 @@ Image depth
 .. tags:: visualization-basic
 """
 
-import napari
 import numpy as np
 
+import napari
+
 im_data = np.zeros((50, 50, 50))
 im_data[30:40, 25:35, 25:35] = 1
 viewer = napari.view_image(im_data, colormap='magenta', rendering='iso')
diff --git a/examples/inherit_viewer_style.py b/examples/inherit_viewer_style.py
index b58a6058..27f02ee5 100644
--- a/examples/inherit_viewer_style.py
+++ b/examples/inherit_viewer_style.py
@@ -8,19 +8,23 @@ from main napari window.
 .. tags::  gui, interactivity
 """
 
-<<<<<<< HEAD
-from typing import Callable
-
-=======
->>>>>>> 5ca30ea2 (Add ruff linter to pre-commit (#5275))
-from qtpy.QtWidgets import QDialog, QWidget, QVBoxLayout, QPushButton, QGridLayout, QLabel, QSpinBox
 
 from magicgui import magicgui
+from qtpy.QtWidgets import (
+    QDialog,
+    QGridLayout,
+    QLabel,
+    QPushButton,
+    QSpinBox,
+    QVBoxLayout,
+    QWidget,
+)
 
 import napari
 from napari.qt import get_stylesheet
 from napari.settings import get_settings
 
+
 # The magicgui widget shown by selecting the 'Show widget' button of MyWidget
 @magicgui
 def sample_add(a: int, b: int) -> int:
@@ -35,7 +39,7 @@ change_style()
 
 
 class MyDialog(QDialog):
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
         self.first_input = QSpinBox()
         self.second_input = QSpinBox()
@@ -54,7 +58,7 @@ class MyDialog(QDialog):
         self.close()
 
 class MyWidget(QWidget):
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         self.btn1 = QPushButton('Show dialog')
         self.btn1.clicked.connect(self.show_dialog)
diff --git a/examples/interaction_box_image.py b/examples/interaction_box_image.py
index b5cd0ee6..0b074558 100644
--- a/examples/interaction_box_image.py
+++ b/examples/interaction_box_image.py
@@ -10,6 +10,7 @@ This allows the user to manipulate the image via the interaction box
 """
 
 from skimage import data
+
 import napari
 
 viewer = napari.view_image(data.astronaut(), rgb=True)
diff --git a/examples/interaction_box_points.py b/examples/interaction_box_points.py
index c9a5c607..342ddbd7 100644
--- a/examples/interaction_box_points.py
+++ b/examples/interaction_box_points.py
@@ -7,8 +7,9 @@ Demonstrate interaction box on points layer
 .. tags:: experimental
 """
 
-import napari
 import numpy as np
+
+import napari
 from napari.layers.points._points_utils import points_in_box
 
 
diff --git a/examples/interactive_move_rectangle_3d.py b/examples/interactive_move_rectangle_3d.py
index 7678fe80..daa787b6 100644
--- a/examples/interactive_move_rectangle_3d.py
+++ b/examples/interactive_move_rectangle_3d.py
@@ -7,9 +7,10 @@ Shift a rectangle along its normal vector in 3D
 .. tags:: experimental
 """
 
-import napari
 import numpy as np
 
+import napari
+
 rectangle = np.array(
     [
         [50, 75, 75],
diff --git a/examples/interactive_scripting.py b/examples/interactive_scripting.py
index e4f47bbc..1db5fada 100644
--- a/examples/interactive_scripting.py
+++ b/examples/interactive_scripting.py
@@ -5,11 +5,12 @@ Interactive scripting
 .. tags:: interactivity
 """
 
+import time
+
 import numpy as np
+
 import napari
 from napari.qt import thread_worker
-import time
-
 
 # create the viewer with an image
 data = np.random.random((512, 512))
@@ -22,7 +23,7 @@ def update_layer(data):
 @thread_worker(connect={'yielded': update_layer})
 def create_data(*, update_period, num_updates):
     # number of times to update
-    for k in range(num_updates):
+    for _k in range(num_updates):
         yield np.random.random((512, 512))
         time.sleep(update_period)
 
diff --git a/examples/labels-2d.py b/examples/labels-2d.py
index ab33527e..c5aaee40 100644
--- a/examples/labels-2d.py
+++ b/examples/labels-2d.py
@@ -11,8 +11,8 @@ Display a labels layer above of an image layer using the ``add_labels`` and
 from skimage import data
 from skimage.color import rgb2gray
 from skimage.segmentation import slic
-import napari
 
+import napari
 
 astro = data.astronaut()
 
diff --git a/examples/layers.py b/examples/layers.py
index 02de6f53..67f42cf0 100644
--- a/examples/layers.py
+++ b/examples/layers.py
@@ -8,11 +8,11 @@ using the layers swap method and remove one
 .. tags:: visualization-basic
 """
 
+import numpy as np
 from skimage import data
 from skimage.color import rgb2gray
-import numpy as np
-import napari
 
+import napari
 
 # create the viewer with several image layers
 viewer = napari.view_image(rgb2gray(data.astronaut()), name='astronaut')
diff --git a/examples/linked_layers.py b/examples/linked_layers.py
index b0314813..9df0e811 100644
--- a/examples/linked_layers.py
+++ b/examples/linked_layers.py
@@ -10,10 +10,10 @@ linked layers, all of the other layers follow.
 
 .. tags:: experimental
 """
-import napari
-from napari.experimental import link_layers
 import numpy as np
 
+import napari
+from napari.experimental import link_layers
 
 viewer = napari.view_image(np.random.rand(3, 64, 64), channel_axis=0)
 
diff --git a/examples/live_tiffs_.py b/examples/live_tiffs_.py
index c6081e6d..92275e18 100644
--- a/examples/live_tiffs_.py
+++ b/examples/live_tiffs_.py
@@ -12,14 +12,15 @@ This script should be run together with live_tiffs_generator.py
 import os
 import sys
 import time
-from skimage.io.collection import alphanumeric_key
-from dask import delayed
+
 import dask.array as da
+from dask import delayed
+from skimage.io.collection import alphanumeric_key
 from tifffile import imread
+
 import napari
 from napari.qt import thread_worker
 
-
 viewer = napari.Viewer(ndisplay=3)
 # pass a directory to monitor or it will monitor current directory.
 path = sys.argv[1] if len(sys.argv) > 1 else '.'
diff --git a/examples/live_tiffs_generator_.py b/examples/live_tiffs_generator_.py
index 185eec92..6c906d3a 100644
--- a/examples/live_tiffs_generator_.py
+++ b/examples/live_tiffs_generator_.py
@@ -9,15 +9,14 @@ an output directory (must be supplied by the user).
 """
 
 
+import argparse
 import os
 import sys
 import time
-import argparse
 
 import numpy as np
-from skimage import data
 import tifffile
-
+from skimage import data
 
 parser = argparse.ArgumentParser()
 parser.add_argument('outdir', help='output directory for tiffs')
diff --git a/examples/magic_image_arithmetic.py b/examples/magic_image_arithmetic.py
index 480fa404..5e30be5c 100644
--- a/examples/magic_image_arithmetic.py
+++ b/examples/magic_image_arithmetic.py
@@ -8,7 +8,9 @@ Basic example of using magicgui to create an Image Arithmetic GUI in napari.
 """
 
 import enum
+
 import numpy as np
+
 import napari
 
 
diff --git a/examples/magic_parameter_sweep.py b/examples/magic_parameter_sweep.py
index 9f6510c9..92dc6553 100644
--- a/examples/magic_parameter_sweep.py
+++ b/examples/magic_parameter_sweep.py
@@ -12,9 +12,11 @@ It demonstrates:
 """
 import skimage.data
 import skimage.filters
-import napari
 from typing_extensions import Annotated
 
+import napari
+
+
 # Define our gaussian_blur function.
 # Note that we can use forward references for the napari type annotations.
 # You can read more about them here:
diff --git a/examples/magic_viewer.py b/examples/magic_viewer.py
index 95f9fbeb..f9d18457 100644
--- a/examples/magic_viewer.py
+++ b/examples/magic_viewer.py
@@ -9,6 +9,7 @@ Example showing how to access the current viewer from a function widget.
 
 import napari
 
+
 # annotating a paramater as `napari.Viewer` will automatically provide
 # the viewer that the function is embedded in, when the function is added to
 # the viewer with add_function_widget.
diff --git a/examples/minimum_blending.py b/examples/minimum_blending.py
index 8501061b..c8b7ff99 100644
--- a/examples/minimum_blending.py
+++ b/examples/minimum_blending.py
@@ -15,6 +15,7 @@ ChrisLUTs: https://github.com/cleterrier/ChrisLUTs .
 """
 
 from skimage import data
+
 import napari
 
 # create a viewer
diff --git a/examples/mixed-dimensions-labels.py b/examples/mixed-dimensions-labels.py
index 1af5635f..3a9a75b6 100644
--- a/examples/mixed-dimensions-labels.py
+++ b/examples/mixed-dimensions-labels.py
@@ -15,9 +15,10 @@ on every slice.
 .. tags:: visualization-nD
 """
 
-from skimage.data import binary_blobs
-from scipy import ndimage as ndi
 import numpy as np
+from scipy import ndimage as ndi
+from skimage.data import binary_blobs
+
 import napari
 
 blobs3d = binary_blobs(length=64, volume_fraction=0.1, n_dim=3).astype(float)
diff --git a/examples/mouse_drag_callback.py b/examples/mouse_drag_callback.py
index 0ca56b88..ea4bbee5 100644
--- a/examples/mouse_drag_callback.py
+++ b/examples/mouse_drag_callback.py
@@ -8,9 +8,9 @@ lines around in a shapes layer.
 .. tags:: gui
 """
 
-from skimage import data
-from skimage import measure
 import numpy as np
+from skimage import data, measure
+
 import napari
 
 
diff --git a/examples/multiple_viewer_widget.py b/examples/multiple_viewer_widget.py
index 532daf61..f29b9d36 100644
--- a/examples/multiple_viewer_widget.py
+++ b/examples/multiple_viewer_widget.py
@@ -15,6 +15,7 @@ current dims point (`viewer.dims.point`).
 from copy import deepcopy
 
 import numpy as np
+from packaging.version import parse as parse_version
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import (
     QCheckBox,
@@ -26,7 +27,6 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 from superqt.utils import qthrottled
-from packaging.version import parse as parse_version
 
 import napari
 from napari.components.layerlist import Extent
@@ -121,7 +121,7 @@ class own_partial:
     (Qt widgets are not serializable)
     """
 
-    def __init__(self, func, *args, **kwargs):
+    def __init__(self, func, *args, **kwargs) -> None:
         self.func = func
         self.args = args
         self.kwargs = kwargs
@@ -129,7 +129,9 @@ class own_partial:
     def __call__(self, *args, **kwargs):
         return self.func(*(self.args + args), **{**self.kwargs, **kwargs})
 
-    def __deepcopy__(self, memodict={}):
+    def __deepcopy__(self, memodict=None):
+        if memodict is None:
+            memodict = {}
         return own_partial(
             self.func,
             *deepcopy(self.args, memodict),
@@ -138,7 +140,7 @@ class own_partial:
 
 
 class QtViewerWrap(QtViewer):
-    def __init__(self, main_viewer, *args, **kwargs):
+    def __init__(self, main_viewer, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
         self.main_viewer = main_viewer
 
@@ -162,7 +164,7 @@ class CrossWidget(QCheckBox):
     the cross update is throttled
     """
 
-    def __init__(self, viewer: napari.Viewer):
+    def __init__(self, viewer: napari.Viewer) -> None:
         super().__init__("Add cross layer")
         self.viewer = viewer
         self.setChecked(False)
@@ -244,7 +246,7 @@ class ExampleWidget(QWidget):
     of the additional viewers.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         self.btn = QPushButton("Perform action")
         self.spin = QDoubleSpinBox()
@@ -258,7 +260,7 @@ class ExampleWidget(QWidget):
 class MultipleViewerWidget(QSplitter):
     """The main widget of the example."""
 
-    def __init__(self, viewer: napari.Viewer):
+    def __init__(self, viewer: napari.Viewer) -> None:
         super().__init__()
         self.viewer = viewer
         self.viewer_model1 = ViewerModel(title="model1")
@@ -444,7 +446,7 @@ class MultipleViewerWidget(QSplitter):
 
 
 if __name__ == "__main__":
-    from qtpy import QtWidgets, QtCore
+    from qtpy import QtCore, QtWidgets
     QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_ShareOpenGLContexts)
     # above two lines are needed to allow to undock the widget with
     # additional viewers
diff --git a/examples/multiple_viewers.py b/examples/multiple_viewers.py
index d999500d..9b29ec09 100644
--- a/examples/multiple_viewers.py
+++ b/examples/multiple_viewers.py
@@ -8,8 +8,8 @@ Create multiple viewers from the same script
 """
 
 from skimage import data
-import napari
 
+import napari
 
 # add the image
 photographer = data.camera()
diff --git a/examples/multithreading_simple_.py b/examples/multithreading_simple_.py
index 37c0338b..727f7cfa 100644
--- a/examples/multithreading_simple_.py
+++ b/examples/multithreading_simple_.py
@@ -5,8 +5,10 @@ Multithreading simple
 .. tags:: interactivity
 """
 
-from qtpy.QtWidgets import QApplication, QWidget, QHBoxLayout, QLabel
 import time
+
+from qtpy.QtWidgets import QApplication, QHBoxLayout, QLabel, QWidget
+
 from napari.qt import thread_worker
 
 
diff --git a/examples/multithreading_two_way_.py b/examples/multithreading_two_way_.py
index bb2863f4..d422dc77 100644
--- a/examples/multithreading_two_way_.py
+++ b/examples/multithreading_two_way_.py
@@ -6,6 +6,7 @@ Multithreading two-way
 """
 import time
 
+import numpy as np
 from qtpy.QtWidgets import (
     QGridLayout,
     QLabel,
@@ -15,7 +16,6 @@ from qtpy.QtWidgets import (
 )
 
 import napari
-import numpy as np
 from napari.qt.threading import thread_worker
 
 
@@ -43,7 +43,7 @@ def two_way_communication_with_args(start, end):
 
 
 class Controller(QWidget):
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
 
         layout = QGridLayout()
diff --git a/examples/nD_image.py b/examples/nD_image.py
index e0db1f45..e69fee39 100644
--- a/examples/nD_image.py
+++ b/examples/nD_image.py
@@ -9,8 +9,8 @@ Display one 4-D image layer using the :func:`view_image` API.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = np.stack(
     [
diff --git a/examples/nD_labels.py b/examples/nD_labels.py
index ce6c596d..99730d48 100644
--- a/examples/nD_labels.py
+++ b/examples/nD_labels.py
@@ -8,10 +8,10 @@ Display a labels layer above of an image layer using the ``add_labels`` and
 .. tags:: visualization-nD
 """
 
-from skimage import data
 from scipy import ndimage as ndi
-import napari
+from skimage import data
 
+import napari
 
 blobs = data.binary_blobs(length=128, volume_fraction=0.1, n_dim=3)
 viewer = napari.view_image(blobs[::2].astype(float), name='blobs', scale=(2, 1, 1))
diff --git a/examples/nD_multiscale_image.py b/examples/nD_multiscale_image.py
index 0cddd7f8..89493cfd 100644
--- a/examples/nD_multiscale_image.py
+++ b/examples/nD_multiscale_image.py
@@ -7,10 +7,10 @@ Displays an nD multiscale image
 .. tags:: visualization-advanced
 """
 
-from skimage.transform import pyramid_gaussian
-import napari
 import numpy as np
+from skimage.transform import pyramid_gaussian
 
+import napari
 
 # create multiscale from random data
 base = np.random.random((1536, 1536))
diff --git a/examples/nD_multiscale_image_non_uniform.py b/examples/nD_multiscale_image_non_uniform.py
index 2b1bc434..94be6d5e 100644
--- a/examples/nD_multiscale_image_non_uniform.py
+++ b/examples/nD_multiscale_image_non_uniform.py
@@ -7,11 +7,11 @@ Displays an nD multiscale image
 .. tags:: visualization-advanced
 """
 
+import numpy as np
 from skimage import data
 from skimage.transform import pyramid_gaussian
-import napari
-import numpy as np
 
+import napari
 
 # create multiscale from astronaut image
 astronaut = data.astronaut()
diff --git a/examples/nD_points.py b/examples/nD_points.py
index b42f8f02..3a5fbf80 100644
--- a/examples/nD_points.py
+++ b/examples/nD_points.py
@@ -11,8 +11,8 @@ across the dimensions, specified by their size
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = np.stack(
     [
diff --git a/examples/nD_points_with_features.py b/examples/nD_points_with_features.py
index c90bd0d1..edc833d0 100644
--- a/examples/nD_points_with_features.py
+++ b/examples/nD_points_with_features.py
@@ -11,8 +11,8 @@ across the dimensions, specified by their size
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(
     length=100, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.05
diff --git a/examples/nD_shapes.py b/examples/nD_shapes.py
index 5fcaad54..7e5ba6d5 100644
--- a/examples/nD_shapes.py
+++ b/examples/nD_shapes.py
@@ -9,8 +9,8 @@ Display one 4-D image layer using the ``add_image`` API
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(
     length=128, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.1
diff --git a/examples/nD_shapes_with_text.py b/examples/nD_shapes_with_text.py
index 7352c82d..7f4ef6cc 100644
--- a/examples/nD_shapes_with_text.py
+++ b/examples/nD_shapes_with_text.py
@@ -5,8 +5,8 @@ nD shapes with text
 .. tags:: visualization-nD
 """
 from skimage import data
-import napari
 
+import napari
 
 blobs = data.binary_blobs(
     length=100, blob_size_fraction=0.05, n_dim=3, volume_fraction=0.03
diff --git a/examples/nD_surface.py b/examples/nD_surface.py
index 348d7ab9..2d3ae806 100644
--- a/examples/nD_surface.py
+++ b/examples/nD_surface.py
@@ -8,8 +8,8 @@ Display a 3D surface
 """
 
 import numpy as np
-import napari
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer(ndisplay=3)
diff --git a/examples/nD_vectors.py b/examples/nD_vectors.py
index b4d94703..3c512958 100644
--- a/examples/nD_vectors.py
+++ b/examples/nD_vectors.py
@@ -12,8 +12,8 @@ apprearing on each slice.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = np.stack(
     [
diff --git a/examples/nD_vectors_image.py b/examples/nD_vectors_image.py
index 137feadb..747dfa02 100644
--- a/examples/nD_vectors_image.py
+++ b/examples/nD_vectors_image.py
@@ -10,9 +10,9 @@ which are vector projections centered on a pixel of the MxNxP grid
 .. tags:: visualization-nD
 """
 
-import napari
 import numpy as np
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/new_theme.py b/examples/new_theme.py
index 66efcb7a..468c2f6b 100644
--- a/examples/new_theme.py
+++ b/examples/new_theme.py
@@ -8,10 +8,10 @@ Displays an image and sets the theme to new custom theme.
 """
 
 from skimage import data
+
 import napari
 from napari.utils.theme import available_themes, get_theme, register_theme
 
-
 # create the viewer with an image
 viewer = napari.view_image(data.astronaut(), rgb=True, name='astronaut')
 
diff --git a/examples/paint-nd.py b/examples/paint-nd.py
index 597907ef..8de35392 100644
--- a/examples/paint-nd.py
+++ b/examples/paint-nd.py
@@ -11,8 +11,8 @@ This is useful e.g. when proofreading segmentations within a time series.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = np.stack(
     [
diff --git a/examples/pass_colormaps.py b/examples/pass_colormaps.py
index f389ccf1..a6fc826d 100644
--- a/examples/pass_colormaps.py
+++ b/examples/pass_colormaps.py
@@ -9,8 +9,8 @@ Add named or unnamed vispy colormaps to existing layers.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 histo = data.astronaut() / 255
 rch, gch, bch = np.transpose(histo, (2, 0, 1))
diff --git a/examples/point_cloud.py b/examples/point_cloud.py
index ea7ff231..5dc3525d 100644
--- a/examples/point_cloud.py
+++ b/examples/point_cloud.py
@@ -8,6 +8,7 @@ Display 3D points with combinations of different renderings.
 """
 
 import numpy as np
+
 import napari
 
 n_points = 100
diff --git a/examples/points-over-time.py b/examples/points-over-time.py
index cd016037..8d0bb119 100644
--- a/examples/points-over-time.py
+++ b/examples/points-over-time.py
@@ -4,10 +4,10 @@ Points over time
 
 .. tags:: visualization-advanced
 """
-import napari
-import numpy as np
 import dask.array as da
+import numpy as np
 
+import napari
 
 image4d = da.random.random(
         (4000, 32, 256, 256),
diff --git a/examples/progress_bar_minimal_.py b/examples/progress_bar_minimal_.py
index 86c9346a..1c7c6911 100644
--- a/examples/progress_bar_minimal_.py
+++ b/examples/progress_bar_minimal_.py
@@ -8,12 +8,15 @@ the napari viewer.
 .. tags:: gui
 """
 
-import napari
+from random import choice
 from time import sleep
-from napari.utils import progress
-from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget
+
 import numpy as np
-from random import choice
+from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget
+
+import napari
+from napari.utils import progress
+
 
 def process(im_slice):
     # do something with your image slice
diff --git a/examples/progress_bar_segmentation_.py b/examples/progress_bar_segmentation_.py
index 34d930b6..dbe65250 100644
--- a/examples/progress_bar_segmentation_.py
+++ b/examples/progress_bar_segmentation_.py
@@ -8,12 +8,7 @@ in the viewer.
 .. tags:: gui
 """
 import numpy as np
-import napari
-
-from time import sleep
-from napari.utils import progress
 from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget
-
 from skimage.filters import (
     threshold_isodata,
     threshold_li,
@@ -23,6 +18,9 @@ from skimage.filters import (
 )
 from skimage.measure import label
 
+import napari
+from napari.utils import progress
+
 # we will try each of these thresholds on our image
 all_thresholds = [
     threshold_isodata,
@@ -141,6 +139,7 @@ def process_ims():
         pbar.update(1)
 
         # uncomment this line to see the 100% progress bar
+        # from time import sleep
         # sleep(0.5)
 
 button_layout = QVBoxLayout()
diff --git a/examples/progress_bar_threading_.py b/examples/progress_bar_threading_.py
index 477b0018..1105c04b 100644
--- a/examples/progress_bar_threading_.py
+++ b/examples/progress_bar_threading_.py
@@ -8,7 +8,9 @@ This file provides a minimal working example using a progress bar alongside
 .. tags:: interactivity
 """
 from time import sleep
+
 from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget
+
 import napari
 from napari.qt import thread_worker
 
diff --git a/examples/reader_plugin.py b/examples/reader_plugin.py
index 9505aca0..a74e285f 100644
--- a/examples/reader_plugin.py
+++ b/examples/reader_plugin.py
@@ -6,9 +6,8 @@ Barebones reader plugin example, using ``imageio.imread```
 
 .. tags:: historical
 """
-from napari_plugin_engine import napari_hook_implementation
 from imageio import formats, imread
-
+from napari_plugin_engine import napari_hook_implementation
 
 readable_extensions = tuple({x for f in formats for x in f.extensions})
 
diff --git a/examples/scale_bar.py b/examples/scale_bar.py
index b63a5b76..8449b45d 100644
--- a/examples/scale_bar.py
+++ b/examples/scale_bar.py
@@ -6,9 +6,10 @@ Display a 3D volume and the scale bar
 
 .. tags:: experimental
 """
-import napari
 from skimage import data
 
+import napari
+
 cells = data.cells3d()
 
 viewer = napari.Viewer(ndisplay=3)
diff --git a/examples/set_colormaps.py b/examples/set_colormaps.py
index 44ba7003..bb233b82 100644
--- a/examples/set_colormaps.py
+++ b/examples/set_colormaps.py
@@ -10,8 +10,8 @@ Add named or unnamed vispy colormaps to existing layers.
 import numpy as np
 import vispy.color
 from skimage import data
-import napari
 
+import napari
 
 histo = data.astronaut() / 255
 rch, gch, bch = np.transpose(histo, (2, 0, 1))
diff --git a/examples/set_theme.py b/examples/set_theme.py
index f790608a..211bdfd3 100644
--- a/examples/set_theme.py
+++ b/examples/set_theme.py
@@ -8,8 +8,8 @@ Displays an image and sets the theme to 'light'.
 """
 
 from skimage import data
-import napari
 
+import napari
 
 # create the viewer with an image
 viewer = napari.view_image(data.astronaut(), rgb=True, name='astronaut')
diff --git a/examples/shapes_to_labels.py b/examples/shapes_to_labels.py
index f1181d7a..02e9f333 100644
--- a/examples/shapes_to_labels.py
+++ b/examples/shapes_to_labels.py
@@ -11,9 +11,9 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 from vispy.color import Colormap
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/show_points_based_on_feature.py b/examples/show_points_based_on_feature.py
index 81b7fba1..74c6db5d 100644
--- a/examples/show_points_based_on_feature.py
+++ b/examples/show_points_based_on_feature.py
@@ -6,10 +6,10 @@ Show points based on feature
 """
 #!/usr/bin/env python3
 
-import napari
 import numpy as np
 from magicgui import magicgui
 
+import napari
 
 # create points with a randomized "confidence" feature
 points = np.random.rand(100, 3) * 100
diff --git a/examples/spheres_.py b/examples/spheres_.py
index ab249fda..4bb8a6d0 100644
--- a/examples/spheres_.py
+++ b/examples/spheres_.py
@@ -7,9 +7,10 @@ Display two spheres with Surface layers
 .. tags:: visualization-advanced
 """
 
-import napari
 from vispy.geometry import create_sphere
 
+import napari
+
 mesh = create_sphere(method='ico')
 
 faces = mesh.get_faces()
diff --git a/examples/spherical_points.py b/examples/spherical_points.py
index 29ab6d0c..b17364c9 100644
--- a/examples/spherical_points.py
+++ b/examples/spherical_points.py
@@ -4,9 +4,9 @@ Spherical points
 
 .. tags:: experimental
 """
-import napari
 import numpy as np
 
+import napari
 
 np.random.seed()
 
diff --git a/examples/surface_normals_wireframe.py b/examples/surface_normals_wireframe.py
index 03ecca8c..e33474a6 100644
--- a/examples/surface_normals_wireframe.py
+++ b/examples/surface_normals_wireframe.py
@@ -7,9 +7,9 @@ Display a 3D mesh with normals and wireframe
 .. tags:: experimental
 """
 
-from vispy.io import read_mesh, load_data_file
-import napari
+from vispy.io import load_data_file, read_mesh
 
+import napari
 
 vert, faces, _, _ = read_mesh(load_data_file('orig/triceratops.obj.gz'))
 
diff --git a/examples/surface_timeseries_.py b/examples/surface_timeseries_.py
index 9baa9107..4ada122f 100644
--- a/examples/surface_timeseries_.py
+++ b/examples/surface_timeseries_.py
@@ -8,16 +8,14 @@ Display a surface timeseries using data from nilearn
 """
 
 try:
-    from nilearn import datasets
-    from nilearn import surface
+    from nilearn import datasets, surface
 except ModuleNotFoundError:
     raise ModuleNotFoundError(
         "You must have nilearn installed to run this example."
-    )
+    ) from None
 
 import napari
 
-
 # Fetch datasets - this will download dataset if datasets are not found
 nki_dataset = datasets.fetch_surf_nki_enhanced(n_subjects=1)
 fsaverage = datasets.fetch_surf_fsaverage()
diff --git a/examples/swap_dims.py b/examples/swap_dims.py
index cd4fd928..e46054f2 100644
--- a/examples/swap_dims.py
+++ b/examples/swap_dims.py
@@ -9,8 +9,8 @@ Display a 4-D image and points layer and swap the displayed dimensions
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 blobs = np.stack(
     [
diff --git a/examples/tiled-rendering-2d_.py b/examples/tiled-rendering-2d_.py
index 7627f8f9..905dc8ff 100644
--- a/examples/tiled-rendering-2d_.py
+++ b/examples/tiled-rendering-2d_.py
@@ -24,9 +24,9 @@ import os
 # important: if this is not set, the entire ~4GB array will be created!
 os.environ.setdefault('NAPARI_OCTREE', '1')
 
-import dask.array as da # noqa: E402
-import napari   # noqa: E402
+import dask.array as da  # noqa: E402
 
+import napari  # noqa: E402
 
 ndim = 2
 data = da.random.randint(
diff --git a/examples/to_screenshot.py b/examples/to_screenshot.py
index 91fad87c..a15dc2eb 100644
--- a/examples/to_screenshot.py
+++ b/examples/to_screenshot.py
@@ -11,9 +11,9 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 from vispy.color import Colormap
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/tracks_2d.py b/examples/tracks_2d.py
index 6189567b..7b2d1ec9 100644
--- a/examples/tracks_2d.py
+++ b/examples/tracks_2d.py
@@ -5,9 +5,10 @@ Tracks 2D
 .. tags:: visualization-basic
 """
 
-import napari
 import numpy as np
 
+import napari
+
 
 def _circle(r, theta):
     x = r * np.cos(theta)
diff --git a/examples/tracks_3d.py b/examples/tracks_3d.py
index d9de8f73..745601a0 100644
--- a/examples/tracks_3d.py
+++ b/examples/tracks_3d.py
@@ -5,9 +5,10 @@ Tracks 3D
 .. tags:: visualization-advanced
 """
 
-import napari
 import numpy as np
 
+import napari
+
 
 def lissajous(t):
     a = np.random.random(size=(3,)) * 80.0 - 40.0
diff --git a/examples/tracks_3d_with_graph.py b/examples/tracks_3d_with_graph.py
index e807717b..594b0315 100644
--- a/examples/tracks_3d_with_graph.py
+++ b/examples/tracks_3d_with_graph.py
@@ -5,9 +5,10 @@ Tracks 3D with graph
 .. tags:: visualization-advanced
 """
 
-import napari
 import numpy as np
 
+import napari
+
 
 def _circle(r, theta):
     x = r * np.cos(theta)
diff --git a/examples/update_console.py b/examples/update_console.py
index 9c3b9130..f6343b4c 100644
--- a/examples/update_console.py
+++ b/examples/update_console.py
@@ -11,8 +11,8 @@ your shapes.
 
 import numpy as np
 from skimage import data
-import napari
 
+import napari
 
 # create the viewer and window
 viewer = napari.Viewer()
diff --git a/examples/viewer_fps_label.py b/examples/viewer_fps_label.py
index 00222a70..1e03367d 100644
--- a/examples/viewer_fps_label.py
+++ b/examples/viewer_fps_label.py
@@ -7,6 +7,7 @@ Display a 3D volume and the fps label.
 .. tags:: experimental
 """
 import numpy as np
+
 import napari
 
 
diff --git a/examples/without_gui_qt.py b/examples/without_gui_qt.py
index bf2ba5a6..c91c3e34 100644
--- a/examples/without_gui_qt.py
+++ b/examples/without_gui_qt.py
@@ -10,9 +10,11 @@ the "gui_qt()" context manager.
 .. tags:: historical
 """
 
+from collections import Counter
+
 from skimage import data
+
 import napari
-from collections import Counter
 
 viewer = napari.view_image(data.astronaut(), rgb=True)
 
diff --git a/examples/xarray_nD_image_.py b/examples/xarray_nD_image_.py
index 8f575111..3842b08e 100644
--- a/examples/xarray_nD_image_.py
+++ b/examples/xarray_nD_image_.py
@@ -13,9 +13,10 @@ except ModuleNotFoundError:
     raise ModuleNotFoundError(
         """This example uses a xarray but xarray is not
     installed. To install try 'pip install xarray'."""
-    )
+    ) from None
 
 import numpy as np
+
 import napari
 
 data = np.random.random((20, 40, 50))
diff --git a/examples/zarr_nD_image_.py b/examples/zarr_nD_image_.py
index 71ab1cba..d286462b 100644
--- a/examples/zarr_nD_image_.py
+++ b/examples/zarr_nD_image_.py
@@ -13,11 +13,10 @@ except ModuleNotFoundError:
     raise ModuleNotFoundError(
         """This example uses a zarr array but zarr is not
     installed. To install try 'pip install zarr'."""
-    )
+    ) from None
 
 import napari
 
-
 data = zarr.zeros((102_0, 200, 210), chunks=(100, 200, 210))
 data[53_0:53_1, 100:110, 110:120] = 1
 
diff --git a/napari/__main__.py b/napari/__main__.py
index d0d03ee4..09c92c81 100644
--- a/napari/__main__.py
+++ b/napari/__main__.py
@@ -2,6 +2,7 @@
 napari command line viewer.
 """
 import argparse
+import contextlib
 import logging
 import os
 import runpy
@@ -96,10 +97,8 @@ def validate_unknown_args(unknown: List[str]) -> Dict[str, Any]:
                     raise IndexError()
             except IndexError:
                 sys.exit(f"error: argument {arg} expected one argument")
-        try:
+        with contextlib.suppress(Exception):
             value = literal_eval(value)
-        except Exception:
-            value = value
 
         out[key] = value
     return out
diff --git a/napari/_app_model/actions/_toggle_action.py b/napari/_app_model/actions/_toggle_action.py
index 4f5a14b2..779e308d 100644
--- a/napari/_app_model/actions/_toggle_action.py
+++ b/napari/_app_model/actions/_toggle_action.py
@@ -42,7 +42,7 @@ class ViewerToggleAction(Action):
         viewer_attribute: str,
         sub_attribute: str,
         **kwargs,
-    ):
+    ) -> None:
         def get_current(viewer: Viewer):
             """return the current value of the viewer attribute"""
             attr = getattr(viewer, viewer_attribute)
diff --git a/napari/_app_model/context/_context.py b/napari/_app_model/context/_context.py
index 7c47a050..3cbd4674 100644
--- a/napari/_app_model/context/_context.py
+++ b/napari/_app_model/context/_context.py
@@ -2,9 +2,8 @@ from __future__ import annotations
 
 from typing import TYPE_CHECKING, Any, Final, Optional
 
-from app_model.expressions import Context
+from app_model.expressions import Context, get_context
 from app_model.expressions import create_context as _create_context
-from app_model.expressions import get_context
 
 from napari.utils.translations import trans
 
@@ -22,7 +21,7 @@ class SettingsAwareContext(Context):
 
     _PREFIX: Final[str] = 'settings.'
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         from napari.settings import get_settings
 
diff --git a/napari/_qt/_tests/test_plugin_widgets.py b/napari/_qt/_tests/test_plugin_widgets.py
index 76deff9c..56c21562 100644
--- a/napari/_qt/_tests/test_plugin_widgets.py
+++ b/napari/_qt/_tests/test_plugin_widgets.py
@@ -1,3 +1,4 @@
+from itertools import dropwhile
 from unittest.mock import Mock, patch
 
 import pytest
@@ -16,13 +17,13 @@ class Widg1(QWidget):
 
 
 class Widg2(QWidget):
-    def __init__(self, napari_viewer):
+    def __init__(self, napari_viewer) -> None:
         self.viewer = napari_viewer
         super().__init__()
 
 
 class Widg3(QWidget):
-    def __init__(self, v: Viewer):
+    def __init__(self, v: Viewer) -> None:
         self.viewer = v
         super().__init__()
 
@@ -96,11 +97,8 @@ def test_plugin_widgets_menus(test_plugin_widgets, qtbot):
     qtbot.addWidget(qtwin)
     with patch.object(window, '_qt_window', qtwin):
         actions = PluginsMenu(window=window).actions()
-    for cnt, action in enumerate(actions):
-        if action.text() == "":
-            break
-    actions = actions[cnt + 1 :]
-    texts = [a.text() for a in actions]
+    actions = list(dropwhile(lambda a: a.text() != '', actions))
+    texts = [a.text() for a in actions][1:]
     for t in ['TestP1', 'Widg3 (TestP2)', 'magic (TestP3)']:
         assert t in texts
 
@@ -115,11 +113,7 @@ def test_making_plugin_dock_widgets(test_plugin_widgets, make_napari_viewer):
     viewer = make_napari_viewer()
     # only take the plugin actions
     actions = viewer.window.plugins_menu.actions()
-    for cnt, action in enumerate(actions):
-        if action.text() == "":
-            # this is the separator
-            break
-    actions = actions[cnt + 1 :]
+    actions = list(dropwhile(lambda a: a.text() != '', actions))
 
     # trigger the 'TestP2: Widg3' action
     tp2 = next(m for m in actions if m.text().endswith('(TestP2)'))
@@ -163,11 +157,7 @@ def test_making_function_dock_widgets(test_plugin_widgets, make_napari_viewer):
     viewer = make_napari_viewer()
     # only take the plugin actions
     actions = viewer.window.plugins_menu.actions()
-    for cnt, action in enumerate(actions):
-        if action.text() == "":
-            # this is the separator
-            break
-    actions = actions[cnt + 1 :]
+    actions = dropwhile(lambda a: a.text() != '', actions)
 
     # trigger the 'TestP3: magic' action
     tp3 = next(m for m in actions if m.text().endswith('(TestP3)'))
diff --git a/napari/_qt/code_syntax_highlight.py b/napari/_qt/code_syntax_highlight.py
index 81106532..c0c4580f 100644
--- a/napari/_qt/code_syntax_highlight.py
+++ b/napari/_qt/code_syntax_highlight.py
@@ -40,7 +40,7 @@ def get_text_char_format(style):
 
 
 class QFormatter(Formatter):
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         super().__init__(**kwargs)
         self.data = []
         self._style = {
@@ -65,7 +65,7 @@ class QFormatter(Formatter):
 
 
 class Pylighter(QtGui.QSyntaxHighlighter):
-    def __init__(self, parent, lang, theme):
+    def __init__(self, parent, lang, theme) -> None:
         super().__init__(parent)
         self.formatter = QFormatter(style=theme)
         self.lexer = get_lexer_by_name(lang)
diff --git a/napari/_qt/containers/_base_item_model.py b/napari/_qt/containers/_base_item_model.py
index 915bc674..ed8486cf 100644
--- a/napari/_qt/containers/_base_item_model.py
+++ b/napari/_qt/containers/_base_item_model.py
@@ -76,7 +76,7 @@ class _BaseEventedItemModel(QAbstractItemModel, Generic[ItemType]):
 
     def __init__(
         self, root: SelectableEventedList[ItemType], parent: QWidget = None
-    ):
+    ) -> None:
         super().__init__(parent=parent)
         self.setRoot(root)
 
diff --git a/napari/_qt/containers/_tests/test_factory.py b/napari/_qt/containers/_tests/test_factory.py
index 6b578902..f0bb4f2e 100644
--- a/napari/_qt/containers/_tests/test_factory.py
+++ b/napari/_qt/containers/_tests/test_factory.py
@@ -12,7 +12,7 @@ from napari.utils.tree import Group, Node
 
 
 class T(Node):
-    def __init__(self, x):
+    def __init__(self, x) -> None:
         self.x = x
 
 
diff --git a/napari/_qt/containers/_tests/test_qt_list.py b/napari/_qt/containers/_tests/test_qt_list.py
index 2d5f201c..7b32f7df 100644
--- a/napari/_qt/containers/_tests/test_qt_list.py
+++ b/napari/_qt/containers/_tests/test_qt_list.py
@@ -10,7 +10,7 @@ from napari.utils.events.containers import SelectableEventedList
 
 
 class T:
-    def __init__(self, name):
+    def __init__(self, name) -> None:
         self.name = name
 
     def __str__(self):
@@ -114,7 +114,7 @@ def test_move_multiple(sources, dest, expectation):
         dest_mi.column(),
         dest_mi.parent(),
     )
-    root == qt_tree._root == expectation
+    assert root == qt_tree._root == expectation
 
     root.events.moving.assert_called()
     root.events.moved.assert_called()
diff --git a/napari/_qt/containers/qt_layer_list.py b/napari/_qt/containers/qt_layer_list.py
index b7d5aab4..216b6e43 100644
--- a/napari/_qt/containers/qt_layer_list.py
+++ b/napari/_qt/containers/qt_layer_list.py
@@ -42,7 +42,7 @@ class QtLayerList(QtListView[Layer]):
     reversing the view with ReverseProxyModel.
     """
 
-    def __init__(self, root: LayerList, parent: QWidget = None):
+    def __init__(self, root: LayerList, parent: QWidget = None) -> None:
         super().__init__(root, parent)
         self.setItemDelegate(LayerDelegate())
         self.setToolTip(trans._('Layer list'))
diff --git a/napari/_qt/containers/qt_list_model.py b/napari/_qt/containers/qt_list_model.py
index 2503ab77..b80a6eeb 100644
--- a/napari/_qt/containers/qt_list_model.py
+++ b/napari/_qt/containers/qt_list_model.py
@@ -83,7 +83,9 @@ class QtListModel(_BaseEventedItemModel[ItemType]):
 class ItemMimeData(QMimeData):
     """An object to store list indices data during a drag operation."""
 
-    def __init__(self, items: Sequence[ItemType], indices: Sequence[int]):
+    def __init__(
+        self, items: Sequence[ItemType], indices: Sequence[int]
+    ) -> None:
         super().__init__()
         self.items = items
         self.indices = tuple(sorted(indices))
diff --git a/napari/_qt/containers/qt_list_view.py b/napari/_qt/containers/qt_list_view.py
index 24d94b53..f0b509bd 100644
--- a/napari/_qt/containers/qt_list_view.py
+++ b/napari/_qt/containers/qt_list_view.py
@@ -35,7 +35,7 @@ class QtListView(_BaseEventedItemView[ItemType], QListView):
 
     def __init__(
         self, root: SelectableEventedList[ItemType], parent: QWidget = None
-    ):
+    ) -> None:
         super().__init__(parent)
         self.setDragDropMode(QListView.InternalMove)
         self.setDragDropOverwriteMode(False)
diff --git a/napari/_qt/containers/qt_tree_model.py b/napari/_qt/containers/qt_tree_model.py
index 2a3587fb..9a476402 100644
--- a/napari/_qt/containers/qt_tree_model.py
+++ b/napari/_qt/containers/qt_tree_model.py
@@ -41,7 +41,7 @@ class QtNodeTreeModel(_BaseEventedItemModel[NodeType]):
         return None
 
     def index(
-        self, row: int, column: int = 0, parent: QModelIndex = QModelIndex()
+        self, row: int, column: int = 0, parent: QModelIndex = None
     ) -> QModelIndex:
         """Return a QModelIndex for item at `row`, `column` and `parent`."""
 
@@ -60,7 +60,8 @@ class QtNodeTreeModel(_BaseEventedItemModel[NodeType]):
         #   2. never store the object (and incur the penalty of
         #      self.getItem(idx) each time you want to get the value of an idx)
         #   3. Have special treatment when we encounter integers in the model
-
+        if parent is None:
+            parent = QModelIndex()
         return (
             self.createIndex(row, column, self.getItem(parent)[row])
             if self.hasIndex(row, column, parent)
@@ -209,7 +210,7 @@ class QtNodeTreeModel(_BaseEventedItemModel[NodeType]):
 class NodeMimeData(QMimeData):
     """An object to store Node data during a drag operation."""
 
-    def __init__(self, nodes: Optional[List[NodeType]] = None):
+    def __init__(self, nodes: Optional[List[NodeType]] = None) -> None:
         super().__init__()
         self.nodes: List[NodeType] = nodes or []
         if nodes:
diff --git a/napari/_qt/containers/qt_tree_view.py b/napari/_qt/containers/qt_tree_view.py
index 7c69294d..fc015a14 100644
--- a/napari/_qt/containers/qt_tree_view.py
+++ b/napari/_qt/containers/qt_tree_view.py
@@ -34,7 +34,7 @@ class QtNodeTreeView(_BaseEventedItemView[NodeType], QTreeView):
 
     _root: Group[Node]
 
-    def __init__(self, root: Group[Node], parent: QWidget = None):
+    def __init__(self, root: Group[Node], parent: QWidget = None) -> None:
         super().__init__(parent)
         self.setHeaderHidden(True)
         self.setDragDropMode(QTreeView.InternalMove)
diff --git a/napari/_qt/dialogs/confirm_close_dialog.py b/napari/_qt/dialogs/confirm_close_dialog.py
index a183c16b..3074ab16 100644
--- a/napari/_qt/dialogs/confirm_close_dialog.py
+++ b/napari/_qt/dialogs/confirm_close_dialog.py
@@ -14,7 +14,7 @@ from napari.utils.translations import trans
 
 
 class ConfirmCloseDialog(QDialog):
-    def __init__(self, parent, close_app=False):
+    def __init__(self, parent, close_app=False) -> None:
         super().__init__(parent)
         cancel_btn = QPushButton(trans._("Cancel"))
         close_btn = QPushButton(trans._("Close"))
diff --git a/napari/_qt/dialogs/preferences_dialog.py b/napari/_qt/dialogs/preferences_dialog.py
index 737a767d..25a08edd 100644
--- a/napari/_qt/dialogs/preferences_dialog.py
+++ b/napari/_qt/dialogs/preferences_dialog.py
@@ -33,7 +33,7 @@ class PreferencesDialog(QDialog):
 
     resized = Signal(QSize)
 
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         from napari.settings import get_settings
 
         super().__init__(parent)
@@ -140,7 +140,7 @@ class PreferencesDialog(QDialog):
             form_layout = form.widget.layout()
             for i in range(form_layout.count()):
                 wdg = form_layout.itemAt(i, form_layout.FieldRole).widget()
-                if getattr(wdg, '_name') == 'async_':
+                if wdg._name == 'async_':
                     wdg.opacity.setOpacity(0.3)
                     wdg.setDisabled(True)
                     break
diff --git a/napari/_qt/dialogs/qt_about.py b/napari/_qt/dialogs/qt_about.py
index c93905f3..ea1b78a1 100644
--- a/napari/_qt/dialogs/qt_about.py
+++ b/napari/_qt/dialogs/qt_about.py
@@ -40,7 +40,7 @@ class QtAbout(QDialog):
         Layout widget for the entire 'About napari' dialog.
     """
 
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
 
         self.layout = QVBoxLayout()
@@ -122,7 +122,7 @@ class QtCopyToClipboardButton(QPushButton):
         The text box contents linked to copy to clipboard button.
     """
 
-    def __init__(self, text_edit):
+    def __init__(self, text_edit) -> None:
         super().__init__()
         self.setObjectName("QtCopyToClipboardButton")
         self.text_edit = text_edit
diff --git a/napari/_qt/dialogs/qt_activity_dialog.py b/napari/_qt/dialogs/qt_activity_dialog.py
index aeee8e3d..5bb2a2b3 100644
--- a/napari/_qt/dialogs/qt_activity_dialog.py
+++ b/napari/_qt/dialogs/qt_activity_dialog.py
@@ -67,7 +67,7 @@ class QtActivityDialog(QDialog):
     MIN_WIDTH = 250
     MIN_HEIGHT = 185
 
-    def __init__(self, parent=None, toggle_button=None):
+    def __init__(self, parent=None, toggle_button=None) -> None:
         super().__init__(parent)
         self._toggleButton = toggle_button
 
diff --git a/napari/_qt/dialogs/qt_modal.py b/napari/_qt/dialogs/qt_modal.py
index 5adfae39..61276bd2 100644
--- a/napari/_qt/dialogs/qt_modal.py
+++ b/napari/_qt/dialogs/qt_modal.py
@@ -32,7 +32,7 @@ class QtPopup(QDialog):
         Frame of the popup dialog box.
     """
 
-    def __init__(self, parent):
+    def __init__(self, parent) -> None:
         super().__init__(parent)
         self.setObjectName("QtModalPopup")
         self.setModal(False)  # if False, then clicking anywhere else closes it
diff --git a/napari/_qt/dialogs/qt_notification.py b/napari/_qt/dialogs/qt_notification.py
index e89b91cc..ce93dd7d 100644
--- a/napari/_qt/dialogs/qt_notification.py
+++ b/napari/_qt/dialogs/qt_notification.py
@@ -80,7 +80,7 @@ class NapariQtNotification(QDialog):
         source: Optional[str] = None,
         actions: ActionSequence = (),
         parent=None,
-    ):
+    ) -> None:
         super().__init__(parent=parent)
 
         if parent and hasattr(parent, 'resized'):
@@ -115,7 +115,7 @@ class NapariQtNotification(QDialog):
 
         settings = get_settings()
         theme = settings.appearance.theme
-        default_color = getattr(get_theme(theme, False), 'icon')
+        default_color = get_theme(theme, False).icon
 
         # FIXME: Should these be defined at the theme level?
         # Currently there is a warning one
@@ -322,13 +322,13 @@ class NapariQtNotification(QDialog):
         for text, callback in actions:
             btn = QPushButton(text)
 
-            def call_back_with_self(callback, self):
+            def call_back_with_self(callback_, self):
                 """
                 We need a higher order function this to capture the reference to self.
                 """
 
                 def _inner():
-                    return callback(self)
+                    return callback_(self)
 
                 return _inner
 
@@ -410,7 +410,7 @@ def _debug_tb(tb):
 
 
 class TracebackDialog(QDialog):
-    def __init__(self, exception, parent=None):
+    def __init__(self, exception, parent=None) -> None:
         super().__init__(parent=parent)
         self.exception = exception
         self.setModal(True)
diff --git a/napari/_qt/dialogs/qt_plugin_dialog.py b/napari/_qt/dialogs/qt_plugin_dialog.py
index b8361f30..82967a52 100644
--- a/napari/_qt/dialogs/qt_plugin_dialog.py
+++ b/napari/_qt/dialogs/qt_plugin_dialog.py
@@ -355,7 +355,7 @@ class PluginListItem(QFrame):
         enabled: bool = True,
         installed: bool = False,
         npe_version=1,
-    ):
+    ) -> None:
         super().__init__(parent)
         self.setup_ui(enabled)
         self.plugin_name.setText(package_name)
@@ -378,7 +378,7 @@ class PluginListItem(QFrame):
             self.action_button.setObjectName("install_button")
 
     def _handle_npe2_plugin(self, npe_version):
-        if npe_version == 1:
+        if npe_version in (None, 1):
             return
         opacity = 0.4 if npe_version == 'shim' else 1
         lbl = trans._('npe1 (adapted)') if npe_version == 'shim' else 'npe2'
@@ -538,7 +538,7 @@ class PluginListItem(QFrame):
 
 
 class QPluginList(QListWidget):
-    def __init__(self, parent: QWidget, installer: Installer):
+    def __init__(self, parent: QWidget, installer: Installer) -> None:
         super().__init__(parent)
         self.installer = installer
         self.setSortingEnabled(True)
@@ -737,7 +737,7 @@ class RefreshState(Enum):
 
 
 class QtPluginDialog(QDialog):
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
         self.refresh_state = RefreshState.DONE
         self.already_installed = set()
@@ -872,11 +872,15 @@ class QtPluginDialog(QDialog):
         self.worker.start()
         if discovered:
             message = trans._(
-                'When installing/uninstalling npe2 plugins, you must restart napari for UI changes to take effect.'
+                'When installing/uninstalling npe2 plugins, '
+                'you must restart napari for UI changes to take effect.'
             )
-            self._warn_dialog = WarnPopup(
-                text=message,
+            self._warn_dialog = WarnPopup(text=message)
+            global_point = self.process_error_indicator.mapToGlobal(
+                self.process_error_indicator.rect().topLeft()
             )
+            global_point = QPoint(global_point.x(), global_point.y() - 75)
+            self._warn_dialog.move(global_point)
             self._warn_dialog.exec_()
 
     def setup_ui(self):
diff --git a/napari/_qt/dialogs/qt_reader_dialog.py b/napari/_qt/dialogs/qt_reader_dialog.py
index eb305200..f9dc0713 100644
--- a/napari/_qt/dialogs/qt_reader_dialog.py
+++ b/napari/_qt/dialogs/qt_reader_dialog.py
@@ -25,10 +25,12 @@ class QtReaderDialog(QDialog):
         self,
         pth: str = '',
         parent: QWidget = None,
-        readers: Dict[str, str] = {},
+        readers: Dict[str, str] = None,
         error_message: str = '',
         persist_checked: bool = True,
-    ):
+    ) -> None:
+        if readers is None:
+            readers = {}
         super().__init__(parent)
         self.setObjectName('Choose reader')
         self.setWindowTitle(trans._('Choose reader'))
diff --git a/napari/_qt/dialogs/screenshot_dialog.py b/napari/_qt/dialogs/screenshot_dialog.py
index be231d3f..b02edfb4 100644
--- a/napari/_qt/dialogs/screenshot_dialog.py
+++ b/napari/_qt/dialogs/screenshot_dialog.py
@@ -7,6 +7,8 @@ from qtpy.QtWidgets import QFileDialog, QMessageBox
 from napari.utils.misc import in_ipython
 from napari.utils.translations import trans
 
+HOME_DIRECTORY = str(Path.home())
+
 
 class ScreenshotDialog(QFileDialog):
     """
@@ -27,9 +29,9 @@ class ScreenshotDialog(QFileDialog):
         self,
         save_function: Callable[[str], Any],
         parent=None,
-        directory=str(Path.home()),
+        directory=HOME_DIRECTORY,
         history=None,
-    ):
+    ) -> None:
         super().__init__(parent, trans._("Save screenshot"))
         self.setAcceptMode(QFileDialog.AcceptSave)
         self.setFileMode(QFileDialog.AnyFile)
diff --git a/napari/_qt/experimental/qt_chunk_receiver.py b/napari/_qt/experimental/qt_chunk_receiver.py
index aedfc882..47568bde 100644
--- a/napari/_qt/experimental/qt_chunk_receiver.py
+++ b/napari/_qt/experimental/qt_chunk_receiver.py
@@ -42,7 +42,7 @@ class QtGuiEvent(QObject):
 
     signal = Signal(Event)
 
-    def __init__(self, parent: QObject, emitter: EventEmitter):
+    def __init__(self, parent: QObject, emitter: EventEmitter) -> None:
         super().__init__(parent)
 
         emitter.connect(self._on_event)
@@ -103,7 +103,7 @@ class QtChunkReceiver:
     100% in the GUI thread.
     """
 
-    def __init__(self, parent: QObject):
+    def __init__(self, parent: QObject) -> None:
         listen_event = chunk_loader.events.chunk_loaded
         self.gui_event = QtGuiEvent(parent, listen_event)
         self.gui_event.events.gui_event.connect(self._on_chunk_loaded_gui)
diff --git a/napari/_qt/experimental/qt_poll.py b/napari/_qt/experimental/qt_poll.py
index 02e803dc..b20de42e 100644
--- a/napari/_qt/experimental/qt_poll.py
+++ b/napari/_qt/experimental/qt_poll.py
@@ -46,7 +46,7 @@ class QtPoll(QObject):
         The viewer's main camera.
     """
 
-    def __init__(self, parent: QObject):
+    def __init__(self, parent: QObject) -> None:
         super().__init__(parent)
 
         self.events = EmitterGroup(source=self, poll=None)
@@ -118,7 +118,7 @@ class QtPoll(QObject):
 class IntervalTimer:
     """Time the interval between subsequent calls to our elapsed property."""
 
-    def __init__(self):
+    def __init__(self) -> None:
         self._last: Optional[float] = None
 
     @property
diff --git a/napari/_qt/layer_controls/qt_colormap_combobox.py b/napari/_qt/layer_controls/qt_colormap_combobox.py
index 22c65b4b..0f5f9b58 100644
--- a/napari/_qt/layer_controls/qt_colormap_combobox.py
+++ b/napari/_qt/layer_controls/qt_colormap_combobox.py
@@ -30,7 +30,7 @@ class ColorStyledDelegate(QStyledItemDelegate):
         Dict mapping name to colors.
     """
 
-    def __init__(self, base_height: int, **kwargs):
+    def __init__(self, base_height: int, **kwargs) -> None:
         super().__init__(**kwargs)
         self.base_height = base_height
 
@@ -82,7 +82,7 @@ class QtColormapComboBox(QComboBox):
         Parent widget of comboxbox.
     """
 
-    def __init__(self, parent):
+    def __init__(self, parent) -> None:
         super().__init__(parent)
         view = QListView()
         view.setMinimumWidth(COLORMAP_WIDTH + TEXT_WIDTH)
diff --git a/napari/_qt/layer_controls/qt_image_controls.py b/napari/_qt/layer_controls/qt_image_controls.py
index cc994526..3733372c 100644
--- a/napari/_qt/layer_controls/qt_image_controls.py
+++ b/napari/_qt/layer_controls/qt_image_controls.py
@@ -60,7 +60,7 @@ class QtImageControls(QtBaseImageControls):
 
     layer: 'napari.layers.Image'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         self.layer.events.interpolation2d.connect(
diff --git a/napari/_qt/layer_controls/qt_image_controls_base.py b/napari/_qt/layer_controls/qt_image_controls_base.py
index ba1ce929..748aad6a 100644
--- a/napari/_qt/layer_controls/qt_image_controls_base.py
+++ b/napari/_qt/layer_controls/qt_image_controls_base.py
@@ -68,7 +68,7 @@ class QtBaseImageControls(QtLayerControls):
 
     """
 
-    def __init__(self, layer: Image):
+    def __init__(self, layer: Image) -> None:
         super().__init__(layer)
 
         self.layer.events.colormap.connect(self._on_colormap_change)
@@ -236,7 +236,7 @@ class AutoScaleButtons(QWidget):
 
 
 class QContrastLimitsPopup(QRangeSliderPopup):
-    def __init__(self, layer: Image, parent=None):
+    def __init__(self, layer: Image, parent=None) -> None:
         super().__init__(parent)
 
         decimals = range_to_decimals(layer.contrast_limits_range, layer.dtype)
diff --git a/napari/_qt/layer_controls/qt_labels_controls.py b/napari/_qt/layer_controls/qt_labels_controls.py
index 845b81b6..65411005 100644
--- a/napari/_qt/layer_controls/qt_labels_controls.py
+++ b/napari/_qt/layer_controls/qt_labels_controls.py
@@ -83,7 +83,7 @@ class QtLabelsControls(QtLayerControls):
 
     layer: 'napari.layers.Labels'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         self.layer.events.mode.connect(self._on_mode_change)
@@ -498,7 +498,7 @@ class QtColorBox(QWidget):
         An instance of a napari layer.
     """
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__()
 
         self.layer = layer
diff --git a/napari/_qt/layer_controls/qt_layer_controls_base.py b/napari/_qt/layer_controls/qt_layer_controls_base.py
index 47850387..5164e497 100644
--- a/napari/_qt/layer_controls/qt_layer_controls_base.py
+++ b/napari/_qt/layer_controls/qt_layer_controls_base.py
@@ -14,7 +14,7 @@ NO_OPACITY_BLENDING_MODES = {str(Blending.MINIMUM), str(Blending.OPAQUE)}
 class LayerFormLayout(QFormLayout):
     """Reusable form layout for subwidgets in each QtLayerControls class"""
 
-    def __init__(self, QWidget=None):
+    def __init__(self, QWidget=None) -> None:
         super().__init__(QWidget)
         self.setContentsMargins(0, 0, 0, 0)
         self.setSpacing(4)
@@ -43,7 +43,7 @@ class QtLayerControls(QFrame):
         Label for the opacity slider widget.
     """
 
-    def __init__(self, layer: Layer):
+    def __init__(self, layer: Layer) -> None:
         super().__init__()
 
         self._ndisplay: int = 2
diff --git a/napari/_qt/layer_controls/qt_layer_controls_container.py b/napari/_qt/layer_controls/qt_layer_controls_container.py
index 3e75994f..57b49ac4 100644
--- a/napari/_qt/layer_controls/qt_layer_controls_container.py
+++ b/napari/_qt/layer_controls/qt_layer_controls_container.py
@@ -94,7 +94,7 @@ class QtLayerControlsContainer(QStackedWidget):
         widgets[layer] = controls
     """
 
-    def __init__(self, viewer):
+    def __init__(self, viewer) -> None:
         super().__init__()
         self.setProperty("emphasized", True)
         self.viewer = viewer
diff --git a/napari/_qt/layer_controls/qt_points_controls.py b/napari/_qt/layer_controls/qt_points_controls.py
index 92e1a295..b41b224a 100644
--- a/napari/_qt/layer_controls/qt_points_controls.py
+++ b/napari/_qt/layer_controls/qt_points_controls.py
@@ -67,7 +67,7 @@ class QtPointsControls(QtLayerControls):
 
     layer: 'napari.layers.Points'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         self.layer.events.mode.connect(self._on_mode_change)
diff --git a/napari/_qt/layer_controls/qt_shapes_controls.py b/napari/_qt/layer_controls/qt_shapes_controls.py
index 52cb7ff9..9698bb16 100644
--- a/napari/_qt/layer_controls/qt_shapes_controls.py
+++ b/napari/_qt/layer_controls/qt_shapes_controls.py
@@ -80,7 +80,7 @@ class QtShapesControls(QtLayerControls):
 
     layer: 'napari.layers.Shapes'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         self.layer.events.mode.connect(self._on_mode_change)
diff --git a/napari/_qt/layer_controls/qt_surface_controls.py b/napari/_qt/layer_controls/qt_surface_controls.py
index 13792c99..1549405b 100644
--- a/napari/_qt/layer_controls/qt_surface_controls.py
+++ b/napari/_qt/layer_controls/qt_surface_controls.py
@@ -29,7 +29,7 @@ class QtSurfaceControls(QtBaseImageControls):
 
     layer: 'napari.layers.Surface'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         colormap_layout = QHBoxLayout()
diff --git a/napari/_qt/layer_controls/qt_tracks_controls.py b/napari/_qt/layer_controls/qt_tracks_controls.py
index fc9f8df6..f34de367 100644
--- a/napari/_qt/layer_controls/qt_tracks_controls.py
+++ b/napari/_qt/layer_controls/qt_tracks_controls.py
@@ -29,7 +29,7 @@ class QtTracksControls(QtLayerControls):
 
     layer: 'napari.layers.Tracks'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         # NOTE(arl): there are no events fired for changing checkboxes
diff --git a/napari/_qt/layer_controls/qt_vectors_controls.py b/napari/_qt/layer_controls/qt_vectors_controls.py
index 92d1463c..2807eb3f 100644
--- a/napari/_qt/layer_controls/qt_vectors_controls.py
+++ b/napari/_qt/layer_controls/qt_vectors_controls.py
@@ -47,7 +47,7 @@ class QtVectorsControls(QtLayerControls):
 
     layer: 'napari.layers.Vectors'
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         super().__init__(layer)
 
         # dropdown to select the property for mapping edge_color
diff --git a/napari/_qt/menus/_util.py b/napari/_qt/menus/_util.py
index 0c9b2645..88b7b4b8 100644
--- a/napari/_qt/menus/_util.py
+++ b/napari/_qt/menus/_util.py
@@ -117,7 +117,7 @@ class NapariMenu(QMenu):
 
     _INSTANCES: List['NapariMenu'] = []
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
         self._INSTANCES.append(self)
 
diff --git a/napari/_qt/menus/debug_menu.py b/napari/_qt/menus/debug_menu.py
index 94f0054d..b51e22db 100644
--- a/napari/_qt/menus/debug_menu.py
+++ b/napari/_qt/menus/debug_menu.py
@@ -19,7 +19,7 @@ if TYPE_CHECKING:
 
 
 class DebugMenu(NapariMenu):
-    def __init__(self, window: 'Window'):
+    def __init__(self, window: 'Window') -> None:
         self._win = window
         super().__init__(trans._('&Debug'), window._qt_window)
         self._perf_menu = NapariMenu(trans._("Performance Trace"), self)
diff --git a/napari/_qt/menus/file_menu.py b/napari/_qt/menus/file_menu.py
index e2d55d1a..138f2ea7 100644
--- a/napari/_qt/menus/file_menu.py
+++ b/napari/_qt/menus/file_menu.py
@@ -21,7 +21,7 @@ if TYPE_CHECKING:
 
 
 class FileMenu(NapariMenu):
-    def __init__(self, window: 'Window'):
+    def __init__(self, window: 'Window') -> None:
         self._win = window
         super().__init__(trans._('&File'), window._qt_window)
         self.open_sample_menu = NapariMenu(trans._('Open Sample'), self)
@@ -224,14 +224,14 @@ class FileMenu(NapariMenu):
                     )
                     action = QAction(full_name, parent=self)
 
-                def _add_sample(*args, plg=plugin_name, smp=samp_name):
+                def _add_sample(*_, plg=plugin_name, smp=samp_name):
                     try:
                         self._win._qt_viewer.viewer.open_sample(plg, smp)
                     except MultipleReaderError as e:
                         handle_gui_reading(
                             e.paths,
                             self._win._qt_viewer,
-                            plugin_name=plugin_name,
+                            plugin_name=plg,
                             stack=False,
                         )
 
diff --git a/napari/_qt/menus/plugins_menu.py b/napari/_qt/menus/plugins_menu.py
index 9d3c27f1..8fceb52f 100644
--- a/napari/_qt/menus/plugins_menu.py
+++ b/napari/_qt/menus/plugins_menu.py
@@ -14,7 +14,7 @@ if TYPE_CHECKING:
 
 
 class PluginsMenu(NapariMenu):
-    def __init__(self, window: 'Window'):
+    def __init__(self, window: 'Window') -> None:
         self._win = window
         super().__init__(trans._('&Plugins'), window._qt_window)
 
diff --git a/napari/_qt/menus/window_menu.py b/napari/_qt/menus/window_menu.py
index c43ff0aa..2fcf60a2 100644
--- a/napari/_qt/menus/window_menu.py
+++ b/napari/_qt/menus/window_menu.py
@@ -8,7 +8,7 @@ if TYPE_CHECKING:
 
 
 class WindowMenu(NapariMenu):
-    def __init__(self, window: 'Window'):
+    def __init__(self, window: 'Window') -> None:
         super().__init__(trans._('&Window'), window._qt_window)
         ACTIONS = []
         populate_menu(self, ACTIONS)
diff --git a/napari/_qt/perf/qt_event_tracing.py b/napari/_qt/perf/qt_event_tracing.py
index 8e5fbfc0..eeaec57f 100644
--- a/napari/_qt/perf/qt_event_tracing.py
+++ b/napari/_qt/perf/qt_event_tracing.py
@@ -53,7 +53,7 @@ class EventTypes:
     We use this class for PyQt5 and PySide2 to be consistent.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         """Create mapping for all known event types."""
         self.string_name = {}
         for name in vars(QEvent):
diff --git a/napari/_qt/perf/qt_performance.py b/napari/_qt/perf/qt_performance.py
index 8fdf0a16..431aa378 100644
--- a/napari/_qt/perf/qt_performance.py
+++ b/napari/_qt/perf/qt_performance.py
@@ -91,7 +91,7 @@ class QtPerformance(QWidget):
     # display will look, but the more we will slow things down.
     UPDATE_MS = 250
 
-    def __init__(self):
+    def __init__(self) -> None:
         """Create our windgets."""
         super().__init__()
         layout = QVBoxLayout()
diff --git a/napari/_qt/qt_event_loop.py b/napari/_qt/qt_event_loop.py
index 4590d10b..f1664b60 100644
--- a/napari/_qt/qt_event_loop.py
+++ b/napari/_qt/qt_event_loop.py
@@ -300,7 +300,7 @@ def gui_qt(*, startup_logo=False, gui_exceptions=False, force=False):
         splash.close()
     try:
         yield app
-    except Exception:
+    except Exception:  # noqa: BLE001
         notification_manager.receive_error(*sys.exc_info())
     run(force=force, gui_exceptions=gui_exceptions, _func_name='gui_qt')
 
diff --git a/napari/_qt/qt_main_window.py b/napari/_qt/qt_main_window.py
index e92a1801..d52a4a77 100644
--- a/napari/_qt/qt_main_window.py
+++ b/napari/_qt/qt_main_window.py
@@ -485,7 +485,7 @@ class Window:
         Window menu.
     """
 
-    def __init__(self, viewer: 'Viewer', *, show: bool = True):
+    def __init__(self, viewer: 'Viewer', *, show: bool = True) -> None:
         # create QApplication if it doesn't already exist
         get_app()
 
@@ -1134,32 +1134,32 @@ class Window:
         settings = get_settings()
         try:
             self._qt_window.show(block=block)
-        except (AttributeError, RuntimeError):
+        except (AttributeError, RuntimeError) as e:
             raise RuntimeError(
                 trans._(
                     "This viewer has already been closed and deleted. Please create a new one.",
                     deferred=True,
                 )
-            )
+            ) from e
 
         if settings.application.first_time:
             settings.application.first_time = False
             try:
                 self._qt_window.resize(self._qt_window.layout().sizeHint())
-            except (AttributeError, RuntimeError):
+            except (AttributeError, RuntimeError) as e:
                 raise RuntimeError(
                     trans._(
                         "This viewer has already been closed and deleted. Please create a new one.",
                         deferred=True,
                     )
-                )
+                ) from e
         else:
             try:
                 if settings.application.save_window_geometry:
                     self._qt_window._set_window_settings(
                         *self._qt_window._load_window_settings()
                     )
-            except Exception as err:
+            except Exception as err:  # noqa: BLE001
                 import warnings
 
                 warnings.warn(
diff --git a/napari/_qt/qt_resources/_svg.py b/napari/_qt/qt_resources/_svg.py
index f0aed695..19296e77 100644
--- a/napari/_qt/qt_resources/_svg.py
+++ b/napari/_qt/qt_resources/_svg.py
@@ -1,7 +1,6 @@
 """
 A Class for generating QIcons from SVGs with arbitrary colors at runtime.
 """
-from functools import lru_cache
 from typing import Optional, Union
 
 from qtpy.QtCore import QByteArray, QPoint, QRect, QRectF, Qt
@@ -52,7 +51,6 @@ class QColoredSVGIcon(QIcon):
         colorized = get_colorized_svg(path_or_xml, color, opacity)
         super().__init__(SVGBufferIconEngine(colorized))
 
-    @lru_cache
     def colored(
         self,
         color: Optional[str] = None,
@@ -88,7 +86,6 @@ class QColoredSVGIcon(QIcon):
         return QColoredSVGIcon(self._svg, color, opacity)
 
     @staticmethod
-    @lru_cache
     def from_resources(
         icon_name: str,
     ) -> 'QColoredSVGIcon':
diff --git a/napari/_qt/qt_resources/_tests/test_svg.py b/napari/_qt/qt_resources/_tests/test_svg.py
index f8aaa929..2a99ad65 100644
--- a/napari/_qt/qt_resources/_tests/test_svg.py
+++ b/napari/_qt/qt_resources/_tests/test_svg.py
@@ -17,11 +17,3 @@ def test_colored_svg_from_theme(qtbot):
     assert isinstance(icon, QIcon)
     assert isinstance(icon.colored(theme='light'), QColoredSVGIcon)
     assert icon.pixmap(250, 250)
-
-
-def test_colored_svg_cache(qtbot):
-    """Make sure we're not recreating icons."""
-    icon1 = QColoredSVGIcon.from_resources('new_points')
-    icon2 = QColoredSVGIcon.from_resources('new_points')
-    assert icon1 is icon2
-    assert icon1.colored('red') is icon2.colored('red')
diff --git a/napari/_qt/qt_viewer.py b/napari/_qt/qt_viewer.py
index 134366ed..06413175 100644
--- a/napari/_qt/qt_viewer.py
+++ b/napari/_qt/qt_viewer.py
@@ -191,7 +191,9 @@ class QtViewer(QSplitter):
 
     _instances = WeakSet()
 
-    def __init__(self, viewer: ViewerModel, show_welcome_screen: bool = False):
+    def __init__(
+        self, viewer: ViewerModel, show_welcome_screen: bool = False
+    ) -> None:
 
         super().__init__()
         self._instances.add(self)
diff --git a/napari/_qt/utils.py b/napari/_qt/utils.py
index 9a5ab59e..22080364 100644
--- a/napari/_qt/utils.py
+++ b/napari/_qt/utils.py
@@ -461,11 +461,11 @@ def qt_might_be_rich_text(text) -> bool:
     Check if a text might be rich text in a cross-binding compatible way.
     """
     if qtpy.PYSIDE2:
-        from qtpy.QtGui import Qt as _Qt
+        from qtpy.QtGui import Qt as Qt_
     else:
-        from qtpy.QtCore import Qt as _Qt
+        from qtpy.QtCore import Qt as Qt_
 
     try:
-        return _Qt.mightBeRichText(text)
-    except Exception:
+        return Qt_.mightBeRichText(text)
+    except AttributeError:
         return bool(RICH_TEXT_PATTERN.search(text))
diff --git a/napari/_qt/widgets/qt_color_swatch.py b/napari/_qt/widgets/qt_color_swatch.py
index cff53bf8..a3ea41de 100644
--- a/napari/_qt/widgets/qt_color_swatch.py
+++ b/napari/_qt/widgets/qt_color_swatch.py
@@ -78,7 +78,7 @@ class QColorSwatchEdit(QWidget):
         *,
         initial_color: Optional[AnyColorType] = None,
         tooltip: Optional[str] = None,
-    ):
+    ) -> None:
         super().__init__(parent=parent)
         self.setObjectName('QColorSwatchEdit')
 
@@ -150,7 +150,7 @@ class QColorSwatch(QFrame):
         parent: Optional[QWidget] = None,
         tooltip: Optional[str] = None,
         initial_color: Optional[ColorType] = None,
-    ):
+    ) -> None:
         super().__init__(parent)
         self.setObjectName('colorSwatch')
         self.setToolTip(tooltip or trans._('click to set color'))
@@ -211,7 +211,7 @@ class QColorLineEdit(QLineEdit):
         The parent widget, by default None
     """
 
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
         self._compl = QCompleter(list(get_color_dict()) + ['transparent'])
         self._compl.setCompletionMode(QCompleter.InlineCompletion)
@@ -236,7 +236,7 @@ class QColorLineEdit(QLineEdit):
 
 
 class CustomColorDialog(QColorDialog):
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent=parent)
         self.setObjectName('CustomColorDialog')
 
diff --git a/napari/_qt/widgets/qt_dict_table.py b/napari/_qt/widgets/qt_dict_table.py
index dcffcc8d..1970268b 100644
--- a/napari/_qt/widgets/qt_dict_table.py
+++ b/napari/_qt/widgets/qt_dict_table.py
@@ -52,7 +52,7 @@ class QtDictTable(QTableWidget):
         headers: List[str] = None,
         min_section_width: Optional[int] = None,
         max_section_width: int = 480,
-    ):
+    ) -> None:
         super().__init__(parent=parent)
         if min_section_width:
             self.horizontalHeader().setMinimumSectionSize(min_section_width)
diff --git a/napari/_qt/widgets/qt_dims.py b/napari/_qt/widgets/qt_dims.py
index fda1cb48..ca31d1ad 100644
--- a/napari/_qt/widgets/qt_dims.py
+++ b/napari/_qt/widgets/qt_dims.py
@@ -30,7 +30,7 @@ class QtDims(QWidget):
         List of slider widgets.
     """
 
-    def __init__(self, dims: Dims, parent=None):
+    def __init__(self, dims: Dims, parent=None) -> None:
 
         super().__init__(parent=parent)
 
@@ -196,7 +196,7 @@ class QtDims(QWidget):
         """
         # remove extra sliders so that only number_of_sliders are left
         # remove from the beginning of the list
-        for slider_num in range(number_of_sliders, self.nsliders):
+        for _slider_num in range(number_of_sliders, self.nsliders):
             self._remove_slider_widget(0)
 
     def _remove_slider_widget(self, index):
diff --git a/napari/_qt/widgets/qt_dims_slider.py b/napari/_qt/widgets/qt_dims_slider.py
index 16f1104a..69aa23be 100644
--- a/napari/_qt/widgets/qt_dims_slider.py
+++ b/napari/_qt/widgets/qt_dims_slider.py
@@ -42,7 +42,7 @@ class QtDimSliderWidget(QWidget):
     play_started = Signal()
     play_stopped = Signal()
 
-    def __init__(self, parent: QWidget, axis: int):
+    def __init__(self, parent: QWidget, axis: int) -> None:
         super().__init__(parent=parent)
         self.axis = axis
         self.qt_dims = parent
@@ -433,7 +433,7 @@ class QtCustomDoubleSpinBox(QDoubleSpinBox):
     editingFinished and when the user clicks on the spin buttons.
     """
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, *kwargs)
         self.valueChanged.connect(self.custom_change_event)
 
@@ -490,7 +490,7 @@ class QtPlayButton(QPushButton):
 
     def __init__(
         self, qt_dims, axis, reverse=False, fps=10, mode=LoopMode.LOOP
-    ):
+    ) -> None:
         super().__init__()
         self.qt_dims_ref = ref(qt_dims)
         self.axis = axis
@@ -586,7 +586,7 @@ class AnimationWorker(QObject):
     finished = Signal()
     started = Signal()
 
-    def __init__(self, slider):
+    def __init__(self, slider) -> None:
         # FIXME there are attributes defined outsid of __init__.
         super().__init__()
         self._interval = 1
diff --git a/napari/_qt/widgets/qt_dims_sorter.py b/napari/_qt/widgets/qt_dims_sorter.py
index 923ebc71..d7fad34c 100644
--- a/napari/_qt/widgets/qt_dims_sorter.py
+++ b/napari/_qt/widgets/qt_dims_sorter.py
@@ -16,7 +16,7 @@ if TYPE_CHECKING:
 class AxisModel:
     """View of an axis within a dims model keeping track of axis names."""
 
-    def __init__(self, dims: Dims, axis: int):
+    def __init__(self, dims: Dims, axis: int) -> None:
         self.dims = dims
         self.axis = axis
 
@@ -69,7 +69,7 @@ class QtDimsSorter(QWidget):
     https://github.com/jni/zarpaint/blob/main/zarpaint/_dims_chooser.py
     """
 
-    def __init__(self, viewer: 'Viewer', parent=None):
+    def __init__(self, viewer: 'Viewer', parent=None) -> None:
         super().__init__(parent=parent)
         dims = viewer.dims
         root = SelectableEventedList(
diff --git a/napari/_qt/widgets/qt_extension2reader.py b/napari/_qt/widgets/qt_extension2reader.py
index 458adc37..2fb94277 100644
--- a/napari/_qt/widgets/qt_extension2reader.py
+++ b/napari/_qt/widgets/qt_extension2reader.py
@@ -31,7 +31,9 @@ class Extension2ReaderTable(QWidget):
 
     valueChanged = Signal(int)
 
-    def __init__(self, parent=None, npe2_readers=None, npe1_readers=None):
+    def __init__(
+        self, parent=None, npe2_readers=None, npe1_readers=None
+    ) -> None:
         super().__init__(parent=parent)
 
         npe2, npe1 = get_all_readers()
@@ -171,7 +173,7 @@ class Extension2ReaderTable(QWidget):
         readers = self._npe2_readers.copy()
         to_delete = []
         compatible_readers = get_potential_readers(new_pattern)
-        for plugin_name, display_name in readers.items():
+        for plugin_name in readers:
             if plugin_name not in compatible_readers:
                 to_delete.append(plugin_name)
 
diff --git a/napari/_qt/widgets/qt_highlight_preview.py b/napari/_qt/widgets/qt_highlight_preview.py
index aaa5ef19..01226a1f 100644
--- a/napari/_qt/widgets/qt_highlight_preview.py
+++ b/napari/_qt/widgets/qt_highlight_preview.py
@@ -29,7 +29,7 @@ class QtStar(QFrame):
         self,
         parent: QWidget = None,
         value: int = None,
-    ):
+    ) -> None:
         super().__init__(parent)
         self._value = value
 
@@ -143,7 +143,7 @@ class QtTriangle(QFrame):
         value: int = 1,
         min_value: int = 1,
         max_value: int = 10,
-    ):
+    ) -> None:
         super().__init__(parent)
         self._max_value = max_value
         self._min_value = min_value
@@ -312,7 +312,7 @@ class QtHighlightSizePreviewWidget(QWidget):
         min_value: int = 1,
         max_value: int = 10,
         unit: str = "px",
-    ):
+    ) -> None:
         super().__init__(parent)
 
         self.setGeometry(300, 300, 125, 110)
diff --git a/napari/_qt/widgets/qt_keyboard_settings.py b/napari/_qt/widgets/qt_keyboard_settings.py
index 9f3f4087..112ec3c6 100644
--- a/napari/_qt/widgets/qt_keyboard_settings.py
+++ b/napari/_qt/widgets/qt_keyboard_settings.py
@@ -46,7 +46,7 @@ class ShortcutEditor(QWidget):
         parent: QWidget = None,
         description: str = "",
         value: dict = None,
-    ):
+    ) -> None:
 
         super().__init__(parent=parent)
 
@@ -544,7 +544,7 @@ class ShortcutDelegate(QItemDelegate):
 class EditorWidget(QLineEdit):
     """Editor widget set in the delegate column in shortcut table."""
 
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
 
     def event(self, event):
@@ -617,7 +617,7 @@ class ShortcutTranslator(QKeySequenceEdit):
     Convert QKeyEvent into QKeySequence.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         self.hide()
 
diff --git a/napari/_qt/widgets/qt_message_popup.py b/napari/_qt/widgets/qt_message_popup.py
index ccd810c4..91c453f3 100644
--- a/napari/_qt/widgets/qt_message_popup.py
+++ b/napari/_qt/widgets/qt_message_popup.py
@@ -12,7 +12,7 @@ class WarnPopup(QDialog):
         self,
         parent=None,
         text: str = "",
-    ):
+    ) -> None:
         super().__init__(parent)
 
         self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
diff --git a/napari/_qt/widgets/qt_mode_buttons.py b/napari/_qt/widgets/qt_mode_buttons.py
index 8ecdc762..22368e8f 100644
--- a/napari/_qt/widgets/qt_mode_buttons.py
+++ b/napari/_qt/widgets/qt_mode_buttons.py
@@ -30,7 +30,7 @@ class QtModeRadioButton(QRadioButton):
 
     def __init__(
         self, layer, button_name, mode, *, tooltip=None, checked=False
-    ):
+    ) -> None:
         super().__init__()
 
         self.layer_ref = weakref.ref(layer)
@@ -80,7 +80,7 @@ class QtModePushButton(QPushButton):
         The layer instance that this button controls.
     """
 
-    def __init__(self, layer, button_name, *, slot=None, tooltip=None):
+    def __init__(self, layer, button_name, *, slot=None, tooltip=None) -> None:
         super().__init__()
 
         self.layer = layer
diff --git a/napari/_qt/widgets/qt_plugin_sorter.py b/napari/_qt/widgets/qt_plugin_sorter.py
index d9d9c2ea..c05de14e 100644
--- a/napari/_qt/widgets/qt_plugin_sorter.py
+++ b/napari/_qt/widgets/qt_plugin_sorter.py
@@ -78,7 +78,7 @@ class ImplementationListItem(QFrame):
 
     on_changed = Signal()  # when user changes whether plugin is enabled.
 
-    def __init__(self, item: QListWidgetItem, parent: QWidget = None):
+    def __init__(self, item: QListWidgetItem, parent: QWidget = None) -> None:
         super().__init__(parent)
         self.item = item
         self.opacity = QGraphicsOpacityEffect(self)
@@ -165,7 +165,7 @@ class QtHookImplementationListWidget(QListWidget):
         self,
         parent: Optional[QWidget] = None,
         hook_caller: Optional[HookCaller] = None,
-    ):
+    ) -> None:
         super().__init__(parent)
         self.setDefaultDropAction(Qt.DropAction.MoveAction)
         self.setDragEnabled(True)
@@ -293,7 +293,7 @@ class QtPluginSorter(QWidget):
         parent: Optional[QWidget] = None,
         initial_hook: Optional[str] = None,
         firstresult_only: bool = True,
-    ):
+    ) -> None:
         super().__init__(parent)
 
         self.plugin_manager = plugin_manager
diff --git a/napari/_qt/widgets/qt_range_slider_popup.py b/napari/_qt/widgets/qt_range_slider_popup.py
index 2df85046..398578ca 100644
--- a/napari/_qt/widgets/qt_range_slider_popup.py
+++ b/napari/_qt/widgets/qt_range_slider_popup.py
@@ -20,7 +20,7 @@ class QRangeSliderPopup(QtPopup):
         Slider widget.
     """
 
-    def __init__(self, parent=None):
+    def __init__(self, parent=None) -> None:
         super().__init__(parent)
 
         # create slider
diff --git a/napari/_qt/widgets/qt_size_preview.py b/napari/_qt/widgets/qt_size_preview.py
index c75b48fd..40617c00 100644
--- a/napari/_qt/widgets/qt_size_preview.py
+++ b/napari/_qt/widgets/qt_size_preview.py
@@ -28,7 +28,7 @@ class QtFontSizePreview(QFrame):
         Preview text to display. Default is None.
     """
 
-    def __init__(self, parent: QWidget = None, text: str = None):
+    def __init__(self, parent: QWidget = None, text: str = None) -> None:
         super().__init__(parent)
 
         self._text = text or ""
@@ -106,7 +106,7 @@ class QtSizeSliderPreviewWidget(QWidget):
         min_value: int = 1,
         max_value: int = 50,
         unit: str = "px",
-    ):
+    ) -> None:
         super().__init__(parent)
 
         description = description or ""
diff --git a/napari/_qt/widgets/qt_splash_screen.py b/napari/_qt/widgets/qt_splash_screen.py
index d4c7a80d..401e9b5b 100644
--- a/napari/_qt/widgets/qt_splash_screen.py
+++ b/napari/_qt/widgets/qt_splash_screen.py
@@ -6,7 +6,7 @@ from napari._qt.qt_event_loop import NAPARI_ICON_PATH, get_app
 
 
 class NapariSplashScreen(QSplashScreen):
-    def __init__(self, width=360):
+    def __init__(self, width=360) -> None:
         get_app()
         pm = QPixmap(NAPARI_ICON_PATH).scaled(
             width,
diff --git a/napari/_qt/widgets/qt_theme_sample.py b/napari/_qt/widgets/qt_theme_sample.py
index e1e004c0..607733dd 100644
--- a/napari/_qt/widgets/qt_theme_sample.py
+++ b/napari/_qt/widgets/qt_theme_sample.py
@@ -59,7 +59,7 @@ officia deserunt mollit anim id est laborum.</p>
 
 
 class TabDemo(QTabWidget):
-    def __init__(self, parent=None, emphasized=False):
+    def __init__(self, parent=None, emphasized=False) -> None:
         super().__init__(parent)
         self.setProperty('emphasized', emphasized)
         self.tab1 = QWidget()
@@ -88,7 +88,7 @@ class TabDemo(QTabWidget):
 
 
 class SampleWidget(QWidget):
-    def __init__(self, theme='dark', emphasized=False):
+    def __init__(self, theme='dark', emphasized=False) -> None:
         super().__init__(None)
         self.setProperty('emphasized', emphasized)
         self.setStyleSheet(get_stylesheet(theme))
diff --git a/napari/_qt/widgets/qt_viewer_buttons.py b/napari/_qt/widgets/qt_viewer_buttons.py
index 30cd521e..9aae491f 100644
--- a/napari/_qt/widgets/qt_viewer_buttons.py
+++ b/napari/_qt/widgets/qt_viewer_buttons.py
@@ -48,7 +48,7 @@ class QtLayerButtons(QFrame):
         Napari viewer containing the rendered scene, layers, and controls.
     """
 
-    def __init__(self, viewer: 'ViewerModel'):
+    def __init__(self, viewer: 'ViewerModel') -> None:
         super().__init__()
 
         self.viewer = viewer
@@ -112,7 +112,7 @@ class QtViewerButtons(QFrame):
         Napari viewer containing the rendered scene, layers, and controls.
     """
 
-    def __init__(self, viewer: 'ViewerModel'):
+    def __init__(self, viewer: 'ViewerModel') -> None:
         super().__init__()
 
         self.viewer = viewer
@@ -353,7 +353,7 @@ class QtDeleteButton(QPushButton):
         Napari viewer containing the rendered scene, layers, and controls.
     """
 
-    def __init__(self, viewer):
+    def __init__(self, viewer) -> None:
         super().__init__()
 
         self.viewer = viewer
@@ -455,7 +455,7 @@ class QtViewerPushButton(QPushButton):
     @_omit_viewer_args
     def __init__(
         self, button_name: str, tooltip: str = '', slot=None, action: str = ''
-    ):
+    ) -> None:
         super().__init__()
 
         self.setToolTip(tooltip or button_name)
diff --git a/napari/_qt/widgets/qt_viewer_dock_widget.py b/napari/_qt/widgets/qt_viewer_dock_widget.py
index 868e6abf..7ae0d743 100644
--- a/napari/_qt/widgets/qt_viewer_dock_widget.py
+++ b/napari/_qt/widgets/qt_viewer_dock_widget.py
@@ -78,7 +78,7 @@ class QtViewerDockWidget(QDockWidget):
         object_name: str = '',
         add_vertical_stretch=True,
         close_btn=True,
-    ):
+    ) -> None:
         self._ref_qt_viewer: 'ReferenceType[QtViewer]' = ref(qt_viewer)
         super().__init__(name)
         self._parent = qt_viewer
@@ -313,7 +313,7 @@ class QtCustomTitleBar(QLabel):
 
     def __init__(
         self, parent, title: str = '', vertical=False, close_btn=True
-    ):
+    ) -> None:
         super().__init__(parent)
         self.setObjectName("QtCustomTitleBar")
         self.setProperty('vertical', str(vertical))
diff --git a/napari/_qt/widgets/qt_viewer_status_bar.py b/napari/_qt/widgets/qt_viewer_status_bar.py
index 95aee824..44a5b1e5 100644
--- a/napari/_qt/widgets/qt_viewer_status_bar.py
+++ b/napari/_qt/widgets/qt_viewer_status_bar.py
@@ -119,7 +119,7 @@ class StatusBarWidget(QWidget):
         coordinates_label: QLabel,
         help_label: QLabel,
         parent: QWidget = None,
-    ):
+    ) -> None:
         super().__init__(parent=parent)
         self._status_label = status_label
         self._layer_label = layer_label
diff --git a/napari/_qt/widgets/qt_welcome.py b/napari/_qt/widgets/qt_welcome.py
index 95734d1b..a63fc637 100644
--- a/napari/_qt/widgets/qt_welcome.py
+++ b/napari/_qt/widgets/qt_welcome.py
@@ -30,7 +30,7 @@ class QtWelcomeWidget(QWidget):
 
     sig_dropped = Signal("QEvent")
 
-    def __init__(self, parent):
+    def __init__(self, parent) -> None:
         super().__init__(parent)
 
         # Create colored icon using theme
@@ -178,7 +178,7 @@ class QtWidgetOverlay(QStackedWidget):
     leave = Signal()
     enter = Signal()
 
-    def __init__(self, parent, widget):
+    def __init__(self, parent, widget) -> None:
         super().__init__(parent)
 
         self._overlay = QtWelcomeWidget(self)
diff --git a/napari/_tests/test_conftest_fixtures.py b/napari/_tests/test_conftest_fixtures.py
index c06b8919..13a2a319 100644
--- a/napari/_tests/test_conftest_fixtures.py
+++ b/napari/_tests/test_conftest_fixtures.py
@@ -3,7 +3,7 @@ from qtpy.QtCore import QMutex, QThread, QTimer
 
 
 class _TestThread(QThread):
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         self.mutex = QMutex()
 
diff --git a/napari/_tests/test_examples.py b/napari/_tests/test_examples.py
index 67fc0ab8..498b74a3 100644
--- a/napari/_tests/test_examples.py
+++ b/napari/_tests/test_examples.py
@@ -1,12 +1,10 @@
-import sys
 import os
-
-import pytest
-
 import runpy
+import sys
 from pathlib import Path
 
 import numpy as np
+import pytest
 import skimage.data
 from qtpy import API_NAME
 
diff --git a/napari/_tests/test_interactive_transforms.py b/napari/_tests/test_interactive_transforms.py
index 23f5ab2b..569d2e01 100644
--- a/napari/_tests/test_interactive_transforms.py
+++ b/napari/_tests/test_interactive_transforms.py
@@ -7,7 +7,7 @@ from napari.utils.transforms import Affine
 
 
 def check_corners_of_axis_aligned_interaction_box(
-    box, *, top_left_corner=[0, 0], bottom_right_corner=None
+    box, *, top_left_corner=(0, 0), bottom_right_corner=None
 ):
     if not np.allclose(box[Box.TOP_LEFT], np.array(top_left_corner) - 0.5):
         pytest.fail(
diff --git a/napari/_vispy/camera.py b/napari/_vispy/camera.py
index e90aa68a..5b50b124 100644
--- a/napari/_vispy/camera.py
+++ b/napari/_vispy/camera.py
@@ -17,7 +17,7 @@ class VispyCamera:
         napari dims model.
     """
 
-    def __init__(self, view, camera, dims):
+    def __init__(self, view, camera, dims) -> None:
         self._view = view
         self._camera = camera
         self._dims = dims
diff --git a/napari/_vispy/canvas.py b/napari/_vispy/canvas.py
index 45cb303e..74d96869 100644
--- a/napari/_vispy/canvas.py
+++ b/napari/_vispy/canvas.py
@@ -23,7 +23,7 @@ class VispyCanvas(SceneCanvas):
 
     _instances = WeakSet()
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
 
         # Since the base class is frozen we must create this attribute
         # before calling super().__init__().
diff --git a/napari/_vispy/experimental/texture_atlas.py b/napari/_vispy/experimental/texture_atlas.py
index 3095cc19..52fd15f2 100644
--- a/napari/_vispy/experimental/texture_atlas.py
+++ b/napari/_vispy/experimental/texture_atlas.py
@@ -155,7 +155,7 @@ class TextureAtlas2D(Texture2D):
         shape_in_tiles: Tuple[int, int],
         image_converter: Callable[[ArrayLike], ArrayLike],
         **kwargs,
-    ):
+    ) -> None:
         # Each tile's shape in texels, for example (256, 256, 3).
         self.spec = TileSpec.from_shape(tile_shape)
 
diff --git a/napari/_vispy/experimental/tile_grid.py b/napari/_vispy/experimental/tile_grid.py
index 255b9f57..c805e1a1 100644
--- a/napari/_vispy/experimental/tile_grid.py
+++ b/napari/_vispy/experimental/tile_grid.py
@@ -66,7 +66,7 @@ class TileGrid:
         The parent of the grid.
     """
 
-    def __init__(self, parent: Node):
+    def __init__(self, parent: Node) -> None:
         self.parent = parent
         self.line = self._create_line()
 
diff --git a/napari/_vispy/experimental/tile_set.py b/napari/_vispy/experimental/tile_set.py
index ef1329f7..d52a8b6a 100644
--- a/napari/_vispy/experimental/tile_set.py
+++ b/napari/_vispy/experimental/tile_set.py
@@ -37,7 +37,7 @@ class TileSet:
         The chunks we have in the set, for fast membership tests.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         self._tiles: Dict[int, TileData] = {}
         self._chunks: Set[OctreeChunk] = set()
 
diff --git a/napari/_vispy/experimental/tiled_image_visual.py b/napari/_vispy/experimental/tiled_image_visual.py
index 4dcde6b4..e811035b 100644
--- a/napari/_vispy/experimental/tiled_image_visual.py
+++ b/napari/_vispy/experimental/tiled_image_visual.py
@@ -88,7 +88,7 @@ class TiledImageVisual(Image):
         image_converter: Callable[[ArrayLike], ArrayLike],
         *args,
         **kwargs,
-    ):
+    ) -> None:
         self.tile_shape = tile_shape
         self.image_converter = image_converter
 
diff --git a/napari/_vispy/experimental/vispy_tiled_image_layer.py b/napari/_vispy/experimental/vispy_tiled_image_layer.py
index ef2d2d1b..dcbe04d0 100644
--- a/napari/_vispy/experimental/vispy_tiled_image_layer.py
+++ b/napari/_vispy/experimental/vispy_tiled_image_layer.py
@@ -70,7 +70,7 @@ class VispyTiledImageLayer(VispyImageLayer):
         Optional grid outlining the tiles.
     """
 
-    def __init__(self, layer: Image):
+    def __init__(self, layer: Image) -> None:
 
         # All tiles are stored in a single TileImageVisual.
         visual = TiledImageVisual(
diff --git a/napari/_vispy/filters/tracks.py b/napari/_vispy/filters/tracks.py
index 8887b7ac..e3065c5a 100644
--- a/napari/_vispy/filters/tracks.py
+++ b/napari/_vispy/filters/tracks.py
@@ -92,7 +92,7 @@ class TracksFilter(Filter):
         head_length: Union[int, float] = 0,
         use_fade: bool = True,
         vertex_time: Union[List, np.ndarray] = None,
-    ):
+    ) -> None:
 
         super().__init__(
             vcode=self.VERT_SHADER, vpos=3, fcode=self.FRAG_SHADER, fpos=9
diff --git a/napari/_vispy/layers/base.py b/napari/_vispy/layers/base.py
index 8289d0c5..810fd1b4 100644
--- a/napari/_vispy/layers/base.py
+++ b/napari/_vispy/layers/base.py
@@ -41,7 +41,7 @@ class VispyBaseLayer(ABC):
         Transform positioning the layer visual inside the scenecanvas.
     """
 
-    def __init__(self, layer, node):
+    def __init__(self, layer, node) -> None:
         super().__init__()
         self.events = None  # Some derived classes have events.
 
@@ -169,7 +169,7 @@ class VispyBaseLayer(ABC):
         self._on_matrix_change()
         self._on_experimental_clipping_planes_change()
 
-    def _on_poll(self, event=None):
+    def _on_poll(self, event=None):  # noqa: B027
         """Called when camera moves, before we are drawn.
 
         Optionally called for some period once the camera stops, so the
diff --git a/napari/_vispy/layers/image.py b/napari/_vispy/layers/image.py
index 25d5cf7b..632587bc 100644
--- a/napari/_vispy/layers/image.py
+++ b/napari/_vispy/layers/image.py
@@ -13,7 +13,7 @@ from napari.utils.translations import trans
 
 
 class ImageLayerNode:
-    def __init__(self, custom_node: Node = None, texture_format=None):
+    def __init__(self, custom_node: Node = None, texture_format=None) -> None:
         if (
             texture_format == 'auto'
             and 'texture_float' not in get_gl_extensions()
@@ -48,7 +48,7 @@ class ImageLayerNode:
 
 
 class VispyImageLayer(VispyBaseLayer):
-    def __init__(self, layer, node=None, texture_format='auto'):
+    def __init__(self, layer, node=None, texture_format='auto') -> None:
 
         # Use custom node from caller, or our standard image/volume nodes.
         self._layer_node = ImageLayerNode(node, texture_format=texture_format)
diff --git a/napari/_vispy/layers/labels.py b/napari/_vispy/layers/labels.py
index b32ec699..aa9ef3c5 100644
--- a/napari/_vispy/layers/labels.py
+++ b/napari/_vispy/layers/labels.py
@@ -2,5 +2,5 @@ from napari._vispy.layers.image import VispyImageLayer
 
 
 class VispyLabelsLayer(VispyImageLayer):
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, texture_format=None, **kwargs)
diff --git a/napari/_vispy/layers/points.py b/napari/_vispy/layers/points.py
index acfc18aa..1f2a7033 100644
--- a/napari/_vispy/layers/points.py
+++ b/napari/_vispy/layers/points.py
@@ -13,7 +13,7 @@ class VispyPointsLayer(VispyBaseLayer):
     _highlight_color = (0, 0.6, 1)
     _highlight_width = None
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         self._highlight_width = get_settings().appearance.highlight_thickness
 
         node = PointsVisual()
diff --git a/napari/_vispy/layers/shapes.py b/napari/_vispy/layers/shapes.py
index 9f2e35ec..e063da38 100644
--- a/napari/_vispy/layers/shapes.py
+++ b/napari/_vispy/layers/shapes.py
@@ -9,7 +9,7 @@ from napari.utils.events import disconnect_events
 
 
 class VispyShapesLayer(VispyBaseLayer):
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         node = ShapesVisual()
         super().__init__(layer, node)
 
diff --git a/napari/_vispy/layers/surface.py b/napari/_vispy/layers/surface.py
index ceb584f1..945cafe5 100644
--- a/napari/_vispy/layers/surface.py
+++ b/napari/_vispy/layers/surface.py
@@ -14,7 +14,7 @@ class VispySurfaceLayer(VispyBaseLayer):
     here https://github.com/vispy/vispy/blob/main/vispy/visuals/mesh.py
     """
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         node = SurfaceVisual()
         self._meshdata = None
         super().__init__(layer, node)
diff --git a/napari/_vispy/layers/tracks.py b/napari/_vispy/layers/tracks.py
index a8ba88cb..4e1a48bc 100644
--- a/napari/_vispy/layers/tracks.py
+++ b/napari/_vispy/layers/tracks.py
@@ -9,7 +9,7 @@ class VispyTracksLayer(VispyBaseLayer):
 
     """
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         node = TracksVisual()
         super().__init__(layer, node)
 
diff --git a/napari/_vispy/layers/vectors.py b/napari/_vispy/layers/vectors.py
index 7002a584..ddc859d6 100644
--- a/napari/_vispy/layers/vectors.py
+++ b/napari/_vispy/layers/vectors.py
@@ -8,7 +8,7 @@ from napari.layers.utils.layer_utils import segment_normal
 
 
 class VispyVectorsLayer(VispyBaseLayer):
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         node = VectorsVisual()
         super().__init__(layer, node)
 
diff --git a/napari/_vispy/overlays/axes.py b/napari/_vispy/overlays/axes.py
index d7b93006..1b322546 100644
--- a/napari/_vispy/overlays/axes.py
+++ b/napari/_vispy/overlays/axes.py
@@ -8,7 +8,7 @@ from napari.utils.theme import get_theme
 class VispyAxesOverlay(VispySceneOverlay):
     """Axes indicating world coordinate origin and orientation."""
 
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         self._scale = 1
 
         # Target axes length in canvas pixels
diff --git a/napari/_vispy/overlays/base.py b/napari/_vispy/overlays/base.py
index 728dacdb..a1ff4725 100644
--- a/napari/_vispy/overlays/base.py
+++ b/napari/_vispy/overlays/base.py
@@ -6,7 +6,7 @@ from napari.utils.translations import trans
 
 
 class VispyBaseOverlay:
-    def __init__(self, *, overlay, node, parent):
+    def __init__(self, *, overlay, node, parent) -> None:
         super().__init__()
         self.overlay = overlay
 
@@ -34,7 +34,7 @@ class VispyBaseOverlay:
 
 
 class VispyCanvasOverlay(VispyBaseOverlay):
-    def __init__(self, *, viewer, **kwargs):
+    def __init__(self, *, viewer, **kwargs) -> None:
         super().__init__(**kwargs)
         self.viewer = viewer
 
@@ -102,7 +102,7 @@ class VispyCanvasOverlay(VispyBaseOverlay):
 
 
 class VispySceneOverlay(VispyBaseOverlay):
-    def __init__(self, *, viewer, **kwargs):
+    def __init__(self, *, viewer, **kwargs) -> None:
         super().__init__(**kwargs)
         self.viewer = viewer
         self.node.transform = MatrixTransform()
diff --git a/napari/_vispy/overlays/interaction_box.py b/napari/_vispy/overlays/interaction_box.py
index 53a458b9..4f219b0e 100644
--- a/napari/_vispy/overlays/interaction_box.py
+++ b/napari/_vispy/overlays/interaction_box.py
@@ -6,7 +6,7 @@ from napari.components.overlays._interaction_box_constants import Box
 
 
 class VispyInteractionBox:
-    def __init__(self, viewer, parent=None, order=0):
+    def __init__(self, viewer, parent=None, order=0) -> None:
 
         self._viewer = viewer
         self._interaction_box = viewer.overlays.interaction_box
diff --git a/napari/_vispy/overlays/scale_bar.py b/napari/_vispy/overlays/scale_bar.py
index fffb8ad8..5d5bb2f1 100644
--- a/napari/_vispy/overlays/scale_bar.py
+++ b/napari/_vispy/overlays/scale_bar.py
@@ -12,7 +12,7 @@ from napari.utils.theme import get_theme
 class VispyScaleBarOverlay(VispyCanvasOverlay):
     """Scale bar in world coordinates."""
 
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         self._target_length = 150
         self._scale = 1
         self._unit = None
diff --git a/napari/_vispy/overlays/text.py b/napari/_vispy/overlays/text.py
index 40fe769a..5723de66 100644
--- a/napari/_vispy/overlays/text.py
+++ b/napari/_vispy/overlays/text.py
@@ -7,7 +7,7 @@ from napari.components._viewer_constants import CanvasPosition
 class VispyTextOverlay(VispyCanvasOverlay):
     """Text overlay."""
 
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         super().__init__(node=Text(pos=(0, 0)), **kwargs)
 
         self.node.font_size = self.overlay.font_size
diff --git a/napari/_vispy/utils/gl.py b/napari/_vispy/utils/gl.py
index 4219aa59..4b20c110 100644
--- a/napari/_vispy/utils/gl.py
+++ b/napari/_vispy/utils/gl.py
@@ -99,7 +99,7 @@ def fix_data_dtype(data):
             dtype = dict(i=np.float32, f=np.float32, u=np.uint16, b=np.uint8)[
                 dtype.kind
             ]
-        except KeyError:  # not an int or float
+        except KeyError as e:  # not an int or float
             raise TypeError(
                 trans._(
                     'type {dtype} not allowed for texture; must be one of {textures}',  # noqa: E501
@@ -107,7 +107,7 @@ def fix_data_dtype(data):
                     dtype=dtype,
                     textures=set(texture_dtypes),
                 )
-            )
+            ) from e
         return data.astype(dtype)
 
 
diff --git a/napari/_vispy/visuals/axes.py b/napari/_vispy/visuals/axes.py
index b2587411..70781019 100644
--- a/napari/_vispy/visuals/axes.py
+++ b/napari/_vispy/visuals/axes.py
@@ -126,7 +126,7 @@ def color_arrowheads(colors, num_segments):
 
 
 class Axes(Compound):
-    def __init__(self):
+    def __init__(self) -> None:
         self._num_segments_arrowhead = 100
         # CMYRGB for 6 axes data in x, y, z, ... ordering
         self._default_color = [
diff --git a/napari/_vispy/visuals/clipping_planes_mixin.py b/napari/_vispy/visuals/clipping_planes_mixin.py
index 2511c7aa..ef448217 100644
--- a/napari/_vispy/visuals/clipping_planes_mixin.py
+++ b/napari/_vispy/visuals/clipping_planes_mixin.py
@@ -21,7 +21,7 @@ class ClippingPlanesMixin:
     and provides property getter and setter
     """
 
-    def __init__(self: _PVisual, *args, **kwargs):
+    def __init__(self: _PVisual, *args, **kwargs) -> None:
         self._clip_filter = PlanesClipper()
         super().__init__(*args, **kwargs)
 
diff --git a/napari/_vispy/visuals/markers.py b/napari/_vispy/visuals/markers.py
index c159ea03..03c7ec35 100644
--- a/napari/_vispy/visuals/markers.py
+++ b/napari/_vispy/visuals/markers.py
@@ -18,7 +18,7 @@ class Markers(BaseMarkers):
         'fragment': BaseMarkers._shaders['fragment'],
     }
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         self._canvas_size_limits = 0, 10000
         super().__init__(*args, **kwargs)
         self.canvas_size_limits = 0, 10000
diff --git a/napari/_vispy/visuals/points.py b/napari/_vispy/visuals/points.py
index fee29983..5b3eff2b 100644
--- a/napari/_vispy/visuals/points.py
+++ b/napari/_vispy/visuals/points.py
@@ -16,7 +16,7 @@ class PointsVisual(ClippingPlanesMixin, Compound):
         - Text labels (vispy.TextVisual)
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__([Markers(), Markers(), Line(), Text()])
         self.scaling = True
 
diff --git a/napari/_vispy/visuals/scale_bar.py b/napari/_vispy/visuals/scale_bar.py
index 5a83e60e..93d0c1f3 100644
--- a/napari/_vispy/visuals/scale_bar.py
+++ b/napari/_vispy/visuals/scale_bar.py
@@ -3,7 +3,7 @@ from vispy.scene.visuals import Compound, Line, Rectangle, Text
 
 
 class ScaleBar(Compound):
-    def __init__(self):
+    def __init__(self) -> None:
         self._data = np.array(
             [
                 [0, 0],
diff --git a/napari/_vispy/visuals/shapes.py b/napari/_vispy/visuals/shapes.py
index 5edd6218..23bd913b 100644
--- a/napari/_vispy/visuals/shapes.py
+++ b/napari/_vispy/visuals/shapes.py
@@ -16,5 +16,5 @@ class ShapesVisual(ClippingPlanesMixin, Compound):
         - Text labels (vispy.TextVisual)
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__([Mesh(), Mesh(), Line(), Markers(), Text()])
diff --git a/napari/_vispy/visuals/surface.py b/napari/_vispy/visuals/surface.py
index 3375a07e..cc918bb5 100644
--- a/napari/_vispy/visuals/surface.py
+++ b/napari/_vispy/visuals/surface.py
@@ -12,7 +12,7 @@ class SurfaceVisual(ClippingPlanesMixin, Mesh):
         - normals visualisation
     """
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         self.wireframe_filter = WireframeFilter()
         self.face_normals = None
         self.vertex_normals = None
diff --git a/napari/_vispy/visuals/tracks.py b/napari/_vispy/visuals/tracks.py
index d3273e3e..42ac2cb5 100644
--- a/napari/_vispy/visuals/tracks.py
+++ b/napari/_vispy/visuals/tracks.py
@@ -15,7 +15,7 @@ class TracksVisual(ClippingPlanesMixin, Compound):
         - Graph edges (vispy.LineVisual)
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         self.tracks_filter = TracksFilter()
         self.graph_filter = TracksFilter()
 
diff --git a/napari/components/_tests/test_layers_list.py b/napari/components/_tests/test_layers_list.py
index ae737ed3..9fde888c 100644
--- a/napari/components/_tests/test_layers_list.py
+++ b/napari/components/_tests/test_layers_list.py
@@ -531,7 +531,7 @@ def test_name_uniqueness():
 def test_readd_layers():
     layers = LayerList()
     imgs = []
-    for i in range(5):
+    for _i in range(5):
         img = Image(np.random.rand(10, 10, 10))
         layers.append(img)
         imgs.append(img)
diff --git a/napari/components/_tests/test_viewer_keybindings.py b/napari/components/_tests/test_viewer_keybindings.py
index d061c5e2..490fc0f6 100644
--- a/napari/components/_tests/test_viewer_keybindings.py
+++ b/napari/components/_tests/test_viewer_keybindings.py
@@ -18,7 +18,7 @@ def test_theme_toggle_keybinding():
     number_of_actual_themes = len(available_themes())
     if 'system' in available_themes():
         number_of_actual_themes = len(available_themes()) - 1
-    for i in range(number_of_actual_themes):
+    for _i in range(number_of_actual_themes):
         current_theme = viewer.theme
         toggle_theme(viewer)
         # theme should have changed
@@ -41,7 +41,7 @@ def test_theme_toggle_from_system_theme():
     number_of_actual_themes = len(available_themes())
     if 'system' in available_themes():
         number_of_actual_themes = len(available_themes()) - 1
-    for i in range(number_of_actual_themes - 1):  # we've already toggled once
+    for _i in range(number_of_actual_themes - 1):  # we've already toggled once
         current_theme = viewer.theme
         toggle_theme(viewer)
         # theme should have changed
diff --git a/napari/components/_tests/test_viewer_model.py b/napari/components/_tests/test_viewer_model.py
index fa2af176..55ef0148 100644
--- a/napari/components/_tests/test_viewer_model.py
+++ b/napari/components/_tests/test_viewer_model.py
@@ -392,7 +392,7 @@ def test_grid():
 
     np.random.seed(0)
     # Add image
-    for i in range(6):
+    for _i in range(6):
         data = np.random.random((15, 15))
         viewer.add_image(data)
     assert not viewer.grid.enabled
@@ -712,7 +712,7 @@ def test_add_remove_layer_no_callbacks(Layer, data, ndim):
     assert layer.ndim == ndim
 
     # Check that no internal callbacks have been registered
-    len(layer.events.callbacks) == 0
+    assert len(layer.events.callbacks) == 0
     for em in layer.events.emitters.values():
         assert len(em.callbacks) == 0
 
@@ -749,7 +749,7 @@ def test_add_remove_layer_external_callbacks(Layer, data, ndim):
     layer.events.connect(my_custom_callback)
 
     # Check that no internal callbacks have been registered
-    len(layer.events.callbacks) == 1
+    assert len(layer.events.callbacks) == 1
     for em in layer.events.emitters.values():
         if not isinstance(em, WarningEmitter):
             assert len(em.callbacks) == 1
diff --git a/napari/components/_tests/test_viewer_mouse_bindings.py b/napari/components/_tests/test_viewer_mouse_bindings.py
index 8eae76dd..86db8bc1 100644
--- a/napari/components/_tests/test_viewer_mouse_bindings.py
+++ b/napari/components/_tests/test_viewer_mouse_bindings.py
@@ -24,7 +24,7 @@ def mouse_event():
 
 
 class WheelEvent:
-    def __init__(self, inverted):
+    def __init__(self, inverted) -> None:
         self._inverted = inverted
 
     def inverted(self):
diff --git a/napari/components/dims.py b/napari/components/dims.py
index 1277c620..5a368a04 100644
--- a/napari/components/dims.py
+++ b/napari/components/dims.py
@@ -1,6 +1,10 @@
 from numbers import Integral
-from typing import Literal  # Added to typing in 3.8
-from typing import Sequence, Tuple, Union
+from typing import (
+    Literal,
+    Sequence,
+    Tuple,
+    Union,
+)
 
 import numpy as np
 from pydantic import root_validator, validator
diff --git a/napari/components/experimental/chunk/_cache.py b/napari/components/experimental/chunk/_cache.py
index dbc3093e..c9b17fc0 100644
--- a/napari/components/experimental/chunk/_cache.py
+++ b/napari/components/experimental/chunk/_cache.py
@@ -88,7 +88,7 @@ class ChunkCache:
         True if the cache is enabled.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         nbytes = _get_cache_size_bytes(CACHE_MEM_FRACTION)
         self.chunks = LRUCache(maxsize=nbytes, getsizeof=_getsizeof_chunks)
         self.enabled = True
diff --git a/napari/components/experimental/chunk/_commands/_loader.py b/napari/components/experimental/chunk/_commands/_loader.py
index 16962fe1..9977a410 100644
--- a/napari/components/experimental/chunk/_commands/_loader.py
+++ b/napari/components/experimental/chunk/_commands/_loader.py
@@ -56,7 +56,7 @@ class InfoDisplayer:
         The LayerInfo to display.
     """
 
-    def __init__(self, info: LayerInfo):
+    def __init__(self, info: LayerInfo) -> None:
         self.info = info
         stats = info.stats
         counts = stats.counts
@@ -111,7 +111,7 @@ class ChunkLoaderLayers:
         Formats our table for printing.
     """
 
-    def __init__(self, layers: List[Layer]):
+    def __init__(self, layers: List[Layer]) -> None:
         self.layers = layers
         self.table = RowTable(
             [
@@ -203,7 +203,7 @@ class LevelsTable:
         Show the levels of this layer.
     """
 
-    def __init__(self, layer):
+    def __init__(self, layer) -> None:
         self.layer = layer
         self.table = RowTable(["LEVEL", "SHAPE", "TOTAL"])
         self.table = RowTable(
@@ -231,7 +231,7 @@ class LoaderCommands:
         The current list of layers.
     """
 
-    def __init__(self, layerlist: List[Layer]):
+    def __init__(self, layerlist: List[Layer]) -> None:
         self.layerlist = layerlist
 
     def __repr__(self):
diff --git a/napari/components/experimental/chunk/_commands/_tables.py b/napari/components/experimental/chunk/_commands/_tables.py
index dd062a28..33f45e45 100644
--- a/napari/components/experimental/chunk/_commands/_tables.py
+++ b/napari/components/experimental/chunk/_commands/_tables.py
@@ -38,7 +38,7 @@ class ColumnSpec:
         String column name, or a dict specification.
     """
 
-    def __init__(self, spec: Union[str, dict]):
+    def __init__(self, spec: Union[str, dict]) -> None:
 
         if isinstance(spec, str):
             spec = {'name': spec}  # Spec is the name, then we use defaults.
@@ -79,7 +79,7 @@ class RowTable:
     # Leave room between columns.
     PADDING = 2
 
-    def __init__(self, columns: List[Union[str, dict]]):
+    def __init__(self, columns: List[Union[str, dict]]) -> None:
         self.columns = [ColumnSpec(x) for x in columns]
         self.rows: List[list] = []
         self.padding = " " * self.PADDING
diff --git a/napari/components/experimental/chunk/_delay_queue.py b/napari/components/experimental/chunk/_delay_queue.py
index 4c43f2df..e70be3e0 100644
--- a/napari/components/experimental/chunk/_delay_queue.py
+++ b/napari/components/experimental/chunk/_delay_queue.py
@@ -80,7 +80,7 @@ class DelayQueue(threading.Thread):
         self,
         delay_queue_ms: float,
         submit_func: Callable[[ChunkRequest], None],
-    ):
+    ) -> None:
         super().__init__(daemon=True)
         self._shutdown = False
         self.delay_seconds: float = delay_queue_ms / 1000
diff --git a/napari/components/experimental/chunk/_info.py b/napari/components/experimental/chunk/_info.py
index 2391b9b2..df171317 100644
--- a/napari/components/experimental/chunk/_info.py
+++ b/napari/components/experimental/chunk/_info.py
@@ -18,7 +18,7 @@ LOGGER = logging.getLogger("napari.loader")
 class LoadCounts:
     """Count statistics about loaded chunks."""
 
-    def __init__(self):
+    def __init__(self) -> None:
         self.loads: int = 0
         self.chunks: int = 0
         self.bytes: int = 0
@@ -54,7 +54,7 @@ class LoadInfo:
         True if the load was synchronous.
     """
 
-    def __init__(self, num_bytes: int, duration_ms: float, sync: bool):
+    def __init__(self, num_bytes: int, duration_ms: float, sync: bool) -> None:
         self.num_bytes = num_bytes
         self.duration_ms = duration_ms
         self.sync = sync
@@ -78,7 +78,7 @@ class LoadStats:
 
     NUM_RECENT_LOADS = 10  # Save details on this many recent loads.
 
-    def __init__(self):
+    def __init__(self) -> None:
         self.window_ms: StatWindow = StatWindow(self.WINDOW_SIZE)
         self.window_bytes: StatWindow = StatWindow(self.WINDOW_SIZE)
         self.recent_loads: list = []
@@ -185,7 +185,7 @@ class LayerInfo:
     not deleted during the load process.
     """
 
-    def __init__(self, layer_ref: LayerRef, auto_sync_ms):
+    def __init__(self, layer_ref: LayerRef, auto_sync_ms) -> None:
         self.layer_ref = layer_ref
         self.load_type: LoadType = LoadType.AUTO
         self.auto_sync_ms = auto_sync_ms
diff --git a/napari/components/experimental/chunk/_loader.py b/napari/components/experimental/chunk/_loader.py
index 04dcd071..135bdcbf 100644
--- a/napari/components/experimental/chunk/_loader.py
+++ b/napari/components/experimental/chunk/_loader.py
@@ -35,7 +35,7 @@ class ChunkLoader:
         We only signal one event: chunk_loaded.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         _setup_logging(octree_config)
 
         loader_config = octree_config['loader_defaults']
diff --git a/napari/components/experimental/chunk/_pool.py b/napari/components/experimental/chunk/_pool.py
index 99efde25..27530df8 100644
--- a/napari/components/experimental/chunk/_pool.py
+++ b/napari/components/experimental/chunk/_pool.py
@@ -54,7 +54,9 @@ class LoaderPool:
         Requests sit in here for a bit before submission.
     """
 
-    def __init__(self, config: dict, on_done_loader: DoneCallback = None):
+    def __init__(
+        self, config: dict, on_done_loader: DoneCallback = None
+    ) -> None:
         from napari.components.experimental.chunk._delay_queue import (
             DelayQueue,
         )
diff --git a/napari/components/experimental/chunk/_pool_group.py b/napari/components/experimental/chunk/_pool_group.py
index 94b3d046..6e3eec43 100644
--- a/napari/components/experimental/chunk/_pool_group.py
+++ b/napari/components/experimental/chunk/_pool_group.py
@@ -30,8 +30,13 @@ class LoaderPoolGroup:
         The mapping from priority to loader pool.
     """
 
-    def __init__(self, octree_config: dict, on_done: DoneCallback = None):
+    def __init__(
+        self, octree_config: dict, on_done: DoneCallback = None
+    ) -> None:
         self._pools = self._create_pools(octree_config, on_done)
+        self._get_loader_priority = lru_cache(maxsize=64)(
+            self._get_loader_priority_impl
+        )
 
     def _create_pools(
         self, octree_config: dict, on_done: DoneCallback
@@ -69,8 +74,7 @@ class LoaderPoolGroup:
         use_priority = self._get_loader_priority(priority)
         return self._pools[use_priority]
 
-    @lru_cache(maxsize=64)
-    def _get_loader_priority(self, priority: int) -> int:
+    def _get_loader_priority_impl(self, priority: int) -> int:
         """Return the loader priority to use.
 
         This method is pretty fast, but since the mapping from priority to
diff --git a/napari/components/experimental/chunk/_request.py b/napari/components/experimental/chunk/_request.py
index 9cde98d5..22f5bdf3 100644
--- a/napari/components/experimental/chunk/_request.py
+++ b/napari/components/experimental/chunk/_request.py
@@ -51,7 +51,7 @@ class ChunkLocation:
         Weak reference to the layer.
     """
 
-    def __init__(self, layer_ref: LayerRef):
+    def __init__(self, layer_ref: LayerRef) -> None:
         self.layer_ref = layer_ref
 
     def __eq__(self, other) -> bool:
@@ -90,7 +90,7 @@ class OctreeLocation(ChunkLocation):
         level_index: int,
         row: int,
         col: int,
-    ):
+    ) -> None:
         super().__init__(layer_ref)
         self.slice_id: int = slice_id
         self.level_index: int = level_index
@@ -140,7 +140,7 @@ class ChunkRequest:
         location: ChunkLocation,
         chunks: Dict[str, ArrayLike],
         priority: int = 0,
-    ):
+    ) -> None:
         # Make sure chunks dict is valid.
         for chunk_key, array in chunks.items():
             assert isinstance(chunk_key, str)
diff --git a/napari/components/experimental/chunk/_tests/test_loader.py b/napari/components/experimental/chunk/_tests/test_loader.py
index 721da2fa..1ad0724d 100644
--- a/napari/components/experimental/chunk/_tests/test_loader.py
+++ b/napari/components/experimental/chunk/_tests/test_loader.py
@@ -25,8 +25,8 @@ def test_get_loader_config_defaults():
     }
     configs = _get_loader_configs(config)
     assert len(configs) == 1
-    configs[0]['num_workers'] == 10
-    configs[0]['delay_queue_ms'] == 10
+    assert configs[0]['num_workers'] == 10
+    assert configs[0]['delay_queue_ms'] == 0
 
 
 TEST_CONFIG = {
diff --git a/napari/components/experimental/chunk/_utils.py b/napari/components/experimental/chunk/_utils.py
index 586b714d..0a5f90e5 100644
--- a/napari/components/experimental/chunk/_utils.py
+++ b/napari/components/experimental/chunk/_utils.py
@@ -50,7 +50,7 @@ class StatWindow:
         The values in our window.
     """
 
-    def __init__(self, size: int):
+    def __init__(self, size: int) -> None:
         self.size = size
         self.values = np.array([])  # float64 array
 
diff --git a/napari/components/experimental/commands.py b/napari/components/experimental/commands.py
index 7acafae2..b3d1d1b4 100644
--- a/napari/components/experimental/commands.py
+++ b/napari/components/experimental/commands.py
@@ -19,7 +19,7 @@ class CommandProcessor:
         The viewer's layers.
     """
 
-    def __init__(self, layers):
+    def __init__(self, layers) -> None:
         self.layers = layers
 
     @property
@@ -46,7 +46,7 @@ class ExperimentalNamespace:
         The viewer's layers.
     """
 
-    def __init__(self, layers):
+    def __init__(self, layers) -> None:
         self.layers = layers
 
     @property
diff --git a/napari/components/experimental/monitor/_api.py b/napari/components/experimental/monitor/_api.py
index 1be9ae8d..8b72a371 100644
--- a/napari/components/experimental/monitor/_api.py
+++ b/napari/components/experimental/monitor/_api.py
@@ -108,7 +108,7 @@ class MonitorApi:
     def _client_messages() -> Queue:
         return MonitorApi._client_messages_queue
 
-    def __init__(self):
+    def __init__(self) -> None:
         # RemoteCommands listens to our run_command event. It executes
         # commands from the clients.
         self.events = EmitterGroup(source=self, run_command=None)
diff --git a/napari/components/experimental/monitor/_monitor.py b/napari/components/experimental/monitor/_monitor.py
index 7f924f33..81e5ffa1 100644
--- a/napari/components/experimental/monitor/_monitor.py
+++ b/napari/components/experimental/monitor/_monitor.py
@@ -134,7 +134,7 @@ class Monitor:
     process has fully started.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         # Both are set when start() is called, and only if we have
         # a parseable config file, have Python 3.9, etc.
         self._service = None
diff --git a/napari/components/experimental/monitor/_service.py b/napari/components/experimental/monitor/_service.py
index b670dd94..abd6c777 100644
--- a/napari/components/experimental/monitor/_service.py
+++ b/napari/components/experimental/monitor/_service.py
@@ -144,7 +144,7 @@ class MonitorService:
     those.
     """
 
-    def __init__(self, config: dict, manager: SharedMemoryManager):
+    def __init__(self, config: dict, manager: SharedMemoryManager) -> None:
         super().__init__()
         self._config = config
         self._manager = manager
diff --git a/napari/components/experimental/remote/_commands.py b/napari/components/experimental/remote/_commands.py
index 62c2e1c9..74beab04 100644
--- a/napari/components/experimental/remote/_commands.py
+++ b/napari/components/experimental/remote/_commands.py
@@ -36,7 +36,7 @@ class RemoteCommands:
     commands, command implementations should be spread out all over the system.
     """
 
-    def __init__(self, layers: LayerList):
+    def __init__(self, layers: LayerList) -> None:
         self.layers = layers
 
     def show_grid(self, show: bool) -> None:
diff --git a/napari/components/experimental/remote/_manager.py b/napari/components/experimental/remote/_manager.py
index 15b2d569..ae78e6d4 100644
--- a/napari/components/experimental/remote/_manager.py
+++ b/napari/components/experimental/remote/_manager.py
@@ -27,7 +27,7 @@ class RemoteManager:
         The viewer's layers.
     """
 
-    def __init__(self, layers: LayerList):
+    def __init__(self, layers: LayerList) -> None:
         self._commands = RemoteCommands(layers)
         self._messages = RemoteMessages(layers)
 
diff --git a/napari/components/experimental/remote/_messages.py b/napari/components/experimental/remote/_messages.py
index f5041434..f54ea0dc 100644
--- a/napari/components/experimental/remote/_messages.py
+++ b/napari/components/experimental/remote/_messages.py
@@ -22,7 +22,7 @@ class RemoteMessages:
         The viewer's layers, so we can call into them.
     """
 
-    def __init__(self, layers: LayerList):
+    def __init__(self, layers: LayerList) -> None:
         self.layers = layers
         self._frame_number = 0
         self._last_time = None
diff --git a/napari/components/layerlist.py b/napari/components/layerlist.py
index 60fff0d3..e45f21c4 100644
--- a/napari/components/layerlist.py
+++ b/napari/components/layerlist.py
@@ -56,7 +56,7 @@ class LayerList(SelectableEventedList[Layer]):
 
     """
 
-    def __init__(self, data=()):
+    def __init__(self, data=()) -> None:
         super().__init__(
             data=data,
             basetype=Layer,
diff --git a/napari/components/overlays/_interaction_box_mouse_bindings.py b/napari/components/overlays/_interaction_box_mouse_bindings.py
index cff255f0..d44968bf 100644
--- a/napari/components/overlays/_interaction_box_mouse_bindings.py
+++ b/napari/components/overlays/_interaction_box_mouse_bindings.py
@@ -45,7 +45,7 @@ def inside_boxes(boxes):
 
 
 class InteractionBoxMouseBindings:
-    def __init__(self, viewer, interaction_box_visual):
+    def __init__(self, viewer, interaction_box_visual) -> None:
         self._selected_vertex: int = None
         self._fixed_vertex: int = None
         self._fixed_aspect: float = None
diff --git a/napari/components/viewer_model.py b/napari/components/viewer_model.py
index ff1d185f..b8c491ea 100644
--- a/napari/components/viewer_model.py
+++ b/napari/components/viewer_model.py
@@ -149,7 +149,9 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
     # different events systems
     mouse_over_canvas: bool = False
 
-    def __init__(self, title='napari', ndisplay=2, order=(), axis_labels=()):
+    def __init__(
+        self, title='napari', ndisplay=2, order=(), axis_labels=()
+    ) -> None:
         # max_depth=0 means don't look for parent contexts.
         from napari._app_model.context import create_context
 
@@ -1038,7 +1040,7 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
     def _open_or_raise_error(
         self,
         paths: List[Union[Path, str]],
-        kwargs: Dict[str, Any] = {},
+        kwargs: Dict[str, Any] = None,
         layer_type: Optional[str] = None,
         stack: Union[bool, List[List[str]]] = False,
     ):
@@ -1091,8 +1093,6 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
             when multiple readers are available to read the path
         """
         paths = [os.fspath(path) for path in paths]  # PathObjects -> str
-        added = []
-        plugin = None
         _path = paths[0]
         # we want to display the paths nicely so make a help string here
         path_message = f"[{_path}], ...]" if len(paths) > 1 else _path
@@ -1138,7 +1138,7 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
                     layer_type=layer_type,
                 )
             # plugin failed
-            except Exception as e:
+            except Exception as e:  # noqa: BLE001
                 raise ReaderPluginError(
                     trans._(
                         'Tried opening with {plugin}, but failed.',
diff --git a/napari/errors/reader_errors.py b/napari/errors/reader_errors.py
index 785553ae..bc65facd 100644
--- a/napari/errors/reader_errors.py
+++ b/napari/errors/reader_errors.py
@@ -34,7 +34,7 @@ class MultipleReaderError(RuntimeError):
         available_readers: List[str],
         paths: List[str],
         *args: object,
-    ):
+    ) -> None:
         super().__init__(message, *args)
         self.available_plugins = available_readers
         self.paths = paths
diff --git a/napari/layers/_tests/test_serialize.py b/napari/layers/_tests/test_serialize.py
index ec3da3b9..f5a07e70 100644
--- a/napari/layers/_tests/test_serialize.py
+++ b/napari/layers/_tests/test_serialize.py
@@ -45,6 +45,6 @@ def test_no_callbacks(Layer, data, ndim):
     assert layer.ndim == ndim
 
     # Check that no internal callbacks have been registered
-    len(layer.events.callbacks) == 0
+    assert len(layer.events.callbacks) == 0
     for em in layer.events.emitters.values():
         assert len(em.callbacks) == 0
diff --git a/napari/layers/base/base.py b/napari/layers/base/base.py
index 355d26b3..83cb86c3 100644
--- a/napari/layers/base/base.py
+++ b/napari/layers/base/base.py
@@ -232,7 +232,7 @@ class Layer(KeymapProvider, MousemapProvider, ABC):
         multiscale=False,
         cache=True,  # this should move to future "data source" object.
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
         super().__init__()
 
         if name is None and data is not None:
@@ -1780,7 +1780,7 @@ class Layer(KeymapProvider, MousemapProvider, ABC):
 
         try:
             return Cls(data, **(meta or {}))
-        except Exception as exc:
+        except Exception as exc:  # noqa: BLE001
             if 'unexpected keyword argument' not in str(exc):
                 raise exc
 
diff --git a/napari/layers/image/_image_slice.py b/napari/layers/image/_image_slice.py
index 40f8827e..e5b0bdcc 100644
--- a/napari/layers/image/_image_slice.py
+++ b/napari/layers/image/_image_slice.py
@@ -65,7 +65,7 @@ class ImageSlice:
         image: ArrayLike,
         image_converter: Callable[[ArrayLike], ArrayLike],
         rgb: bool = False,
-    ):
+    ) -> None:
         LOGGER.debug("ImageSlice.__init__")
         self.image: ImageView = ImageView(image, image_converter)
         self.thumbnail: ImageView = ImageView(image, image_converter)
diff --git a/napari/layers/image/_image_slice_data.py b/napari/layers/image/_image_slice_data.py
index c96065aa..3f6e82f3 100644
--- a/napari/layers/image/_image_slice_data.py
+++ b/napari/layers/image/_image_slice_data.py
@@ -33,7 +33,7 @@ class ImageSliceData:
         indices: Tuple[Optional[slice], ...],
         image: ArrayLike,
         thumbnail_source: ArrayLike,
-    ):
+    ) -> None:
         self.layer = layer
         self.indices = indices
         self.image = image
diff --git a/napari/layers/image/_image_view.py b/napari/layers/image/_image_view.py
index 9464fb2e..86eb9041 100644
--- a/napari/layers/image/_image_view.py
+++ b/napari/layers/image/_image_view.py
@@ -36,7 +36,7 @@ class ImageView:
         self,
         view_image: ArrayLike,
         image_converter: Callable[[ArrayLike], ArrayLike],
-    ):
+    ) -> None:
         """Create an ImageView with some default image."""
         self.view = view_image
         self.image_converter = image_converter
diff --git a/napari/layers/image/experimental/_chunk_set.py b/napari/layers/image/experimental/_chunk_set.py
index 4b276425..6534dcfb 100644
--- a/napari/layers/image/experimental/_chunk_set.py
+++ b/napari/layers/image/experimental/_chunk_set.py
@@ -19,7 +19,7 @@ class ChunkSet:
     in the set.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         self._dict: Dict[OctreeChunk, int] = {}
         self._locations: Set[OctreeLocation] = set()
 
diff --git a/napari/layers/image/experimental/_chunked_image_loader.py b/napari/layers/image/experimental/_chunked_image_loader.py
index c46d8940..ba524de2 100644
--- a/napari/layers/image/experimental/_chunked_image_loader.py
+++ b/napari/layers/image/experimental/_chunked_image_loader.py
@@ -23,7 +23,7 @@ class ChunkedImageLoader(ImageLoader):
         The location we are currently loading or showing.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         # We're showing nothing to start.
         self._current: Optional[ImageLocation] = None
 
diff --git a/napari/layers/image/experimental/_chunked_slice_data.py b/napari/layers/image/experimental/_chunked_slice_data.py
index 233a5f08..c715aca4 100644
--- a/napari/layers/image/experimental/_chunked_slice_data.py
+++ b/napari/layers/image/experimental/_chunked_slice_data.py
@@ -42,7 +42,7 @@ class ChunkedSliceData(ImageSliceData):
         image: ArrayLike,
         thumbnail_source: ArrayLike,
         request: Optional[ChunkRequest] = None,
-    ):
+    ) -> None:
         super().__init__(layer, indices, image, thumbnail_source)
 
         # When ChunkedSliceData is first created self.request is
diff --git a/napari/layers/image/experimental/_image_location.py b/napari/layers/image/experimental/_image_location.py
index e454dc48..7a627f89 100644
--- a/napari/layers/image/experimental/_image_location.py
+++ b/napari/layers/image/experimental/_image_location.py
@@ -44,7 +44,7 @@ class ImageLocation(ChunkLocation):
         The indices of the slice.
     """
 
-    def __init__(self, layer: Layer, indices):
+    def __init__(self, layer: Layer, indices) -> None:
         super().__init__(LayerRef.from_layer(layer))
         self.data_id: int = get_data_id(layer.data)
         self.data_level: int = layer._data_level
diff --git a/napari/layers/image/experimental/_octree_loader.py b/napari/layers/image/experimental/_octree_loader.py
index 0f35daf0..b6b0720c 100644
--- a/napari/layers/image/experimental/_octree_loader.py
+++ b/napari/layers/image/experimental/_octree_loader.py
@@ -80,7 +80,7 @@ class OctreeLoader:
         A weak reference to the layer the octree lives in.
     """
 
-    def __init__(self, octree: Octree, layer_ref: LayerRef):
+    def __init__(self, octree: Octree, layer_ref: LayerRef) -> None:
         self._octree = octree
         self._layer_ref = layer_ref
 
diff --git a/napari/layers/image/experimental/_octree_slice.py b/napari/layers/image/experimental/_octree_slice.py
index 1a7621b2..d6e74f31 100644
--- a/napari/layers/image/experimental/_octree_slice.py
+++ b/napari/layers/image/experimental/_octree_slice.py
@@ -57,7 +57,7 @@ class OctreeSlice:
         data,
         layer_ref: LayerRef,
         meta: OctreeMetadata,
-    ):
+    ) -> None:
         self.data = data
         self._meta = meta
 
diff --git a/napari/layers/image/experimental/octree.py b/napari/layers/image/experimental/octree.py
index 5f2da7bb..27fead81 100644
--- a/napari/layers/image/experimental/octree.py
+++ b/napari/layers/image/experimental/octree.py
@@ -59,7 +59,7 @@ class Octree:
         The base shape and other information.
     """
 
-    def __init__(self, slice_id: int, data, meta: OctreeMetadata):
+    def __init__(self, slice_id: int, data, meta: OctreeMetadata) -> None:
         self.slice_id = slice_id
         self.data = data
         self.meta = meta
diff --git a/napari/layers/image/experimental/octree_chunk.py b/napari/layers/image/experimental/octree_chunk.py
index 489056f0..de2efa74 100644
--- a/napari/layers/image/experimental/octree_chunk.py
+++ b/napari/layers/image/experimental/octree_chunk.py
@@ -57,7 +57,7 @@ class OctreeChunk:
 
     def __init__(
         self, data: ArrayLike, location: OctreeLocation, geom: OctreeChunkGeom
-    ):
+    ) -> None:
         self._data = data
         self.location = location
         self.geom = geom
diff --git a/napari/layers/image/experimental/octree_image.py b/napari/layers/image/experimental/octree_image.py
index 5c1188df..956ef890 100644
--- a/napari/layers/image/experimental/octree_image.py
+++ b/napari/layers/image/experimental/octree_image.py
@@ -76,7 +76,7 @@ class _OctreeImageBase(_ImageBase):
         Settings for how we draw the octree, such as tile size.
     """
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
 
         self._view: OctreeView = None
         self._slice: OctreeSlice = None
diff --git a/napari/layers/image/experimental/octree_intersection.py b/napari/layers/image/experimental/octree_intersection.py
index c097004f..60046efa 100644
--- a/napari/layers/image/experimental/octree_intersection.py
+++ b/napari/layers/image/experimental/octree_intersection.py
@@ -88,7 +88,7 @@ class OctreeIntersection:
         The view we are intersecting with the octree.
     """
 
-    def __init__(self, level: OctreeLevel, view: OctreeView):
+    def __init__(self, level: OctreeLevel, view: OctreeView) -> None:
         self.level = level
         self._corners = view.corners
 
diff --git a/napari/layers/image/experimental/octree_level.py b/napari/layers/image/experimental/octree_level.py
index babefcb9..b44a3fb5 100644
--- a/napari/layers/image/experimental/octree_level.py
+++ b/napari/layers/image/experimental/octree_level.py
@@ -33,7 +33,7 @@ class OctreeLevelInfo:
         The index of this level within the whole tree.
     """
 
-    def __init__(self, meta: OctreeMetadata, level_index: int):
+    def __init__(self, meta: OctreeMetadata, level_index: int) -> None:
         self.meta = meta
 
         self.level_index = level_index
@@ -92,7 +92,7 @@ class OctreeLevel:
         data: ArrayLike,
         meta: OctreeMetadata,
         level_index: int,
-    ):
+    ) -> None:
         self.slice_id = slice_id
         self.data = data
 
diff --git a/napari/layers/image/experimental/octree_util.py b/napari/layers/image/experimental/octree_util.py
index 62dce590..054f38e5 100644
--- a/napari/layers/image/experimental/octree_util.py
+++ b/napari/layers/image/experimental/octree_util.py
@@ -40,7 +40,7 @@ class OctreeDisplayOptions:
         If True draw a grid around the tiles for debugging or demos.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         self._show_grid = True
 
         # TODO_OCTREE we set this after __init__ which is messy.
@@ -178,7 +178,7 @@ def spiral_index(row_range, col_range):
     x, y = 0, 0
     dx, dy = 0, -1
     # Loop through the desired number of indices
-    for i_ in range(max(total_row, total_col) ** 2):
+    for _ in range(max(total_row, total_col) ** 2):
         # Check if values are in range
         if (-total_row // 2 < x <= total_row // 2) and (
             -total_col // 2 < y <= total_col // 2
diff --git a/napari/layers/image/image.py b/napari/layers/image/image.py
index 740f3f7b..f7eb1422 100644
--- a/napari/layers/image/image.py
+++ b/napari/layers/image/image.py
@@ -241,7 +241,7 @@ class _ImageBase(IntensityVisualizationMixin, Layer):
         depiction='volume',
         plane=None,
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
         if name is None and data is not None:
             name = magic_name(data)
 
@@ -1129,7 +1129,7 @@ Image.__doc__ = _ImageBase.__doc__
 
 
 class _weakref_hide:
-    def __init__(self, obj):
+    def __init__(self, obj) -> None:
         import weakref
 
         self.obj = weakref.ref(obj)
diff --git a/napari/layers/intensity_mixin.py b/napari/layers/intensity_mixin.py
index 8ed317dc..bfec7525 100644
--- a/napari/layers/intensity_mixin.py
+++ b/napari/layers/intensity_mixin.py
@@ -27,7 +27,7 @@ class IntensityVisualizationMixin:
     and `contrast_limits` is the visible range (the set values on the widget)
     """
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
 
         self.events.add(
diff --git a/napari/layers/labels/labels.py b/napari/layers/labels/labels.py
index b1e430f1..954fd820 100644
--- a/napari/layers/labels/labels.py
+++ b/napari/layers/labels/labels.py
@@ -231,7 +231,7 @@ class Labels(_ImageBase):
         cache=True,
         plane=None,
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
         if name is None and data is not None:
             name = magic_name(data)
 
diff --git a/napari/layers/points/_tests/test_points.py b/napari/layers/points/_tests/test_points.py
index b0b2db09..3883eaeb 100644
--- a/napari/layers/points/_tests/test_points.py
+++ b/napari/layers/points/_tests/test_points.py
@@ -762,7 +762,7 @@ def test_setting_current_properties():
     }
 
     coerced_current_properties = layer.current_properties
-    for k, v in coerced_current_properties.items():
+    for k in coerced_current_properties:
         value = coerced_current_properties[k]
         assert isinstance(value, np.ndarray)
         np.testing.assert_equal(value, expected_current_properties[k])
diff --git a/napari/layers/points/_tests/test_points_mouse_bindings.py b/napari/layers/points/_tests/test_points_mouse_bindings.py
index b6ea0f4c..9eb934ff 100644
--- a/napari/layers/points/_tests/test_points_mouse_bindings.py
+++ b/napari/layers/points/_tests/test_points_mouse_bindings.py
@@ -794,7 +794,7 @@ def test_drag_start_selection(
                 layer.data[0], [offset_position[0], offset_position[1]]
             )
         else:
-            assert False, 'Unreachable code'  # pragma: no cover
+            raise AssertionError("Unreachable code")  # pragma: no cover
     else:
         np.testing.assert_array_equal(
             layer._drag_box, [initial_position, offset_position]
@@ -833,7 +833,7 @@ def test_drag_start_selection(
                 layer.data[0], [offset_position[0], offset_position[1]]
             )
         else:
-            assert False, 'Unreachable code'  # pragma: no cover
+            raise AssertionError("Unreachable code")  # pragma: no cover
     else:
         np.testing.assert_array_equal(
             layer._drag_box, [initial_position, offset_position]
diff --git a/napari/layers/points/points.py b/napari/layers/points/points.py
index b0626b4d..321712d9 100644
--- a/napari/layers/points/points.py
+++ b/napari/layers/points/points.py
@@ -329,7 +329,7 @@ class Points(Layer):
         canvas_size_limits=(2, 10000),
         antialiasing=1,
         shown=True,
-    ):
+    ) -> None:
         if ndim is None and scale is not None:
             ndim = len(scale)
 
@@ -763,18 +763,18 @@ class Points(Layer):
     def size(self, size: Union[int, float, np.ndarray, list]) -> None:
         try:
             self._size = np.broadcast_to(size, self.data.shape).copy()
-        except Exception:
+        except ValueError as e:
             try:
                 self._size = np.broadcast_to(
                     size, self.data.shape[::-1]
                 ).T.copy()
-            except Exception:
+            except ValueError:
                 raise ValueError(
                     trans._(
                         "Size is not compatible for broadcasting",
                         deferred=True,
                     )
-                )
+                ) from e
         self.refresh()
 
     @property
diff --git a/napari/layers/shapes/_mesh.py b/napari/layers/shapes/_mesh.py
index 56a99dd1..dccba46f 100644
--- a/napari/layers/shapes/_mesh.py
+++ b/napari/layers/shapes/_mesh.py
@@ -51,7 +51,7 @@ class Mesh:
 
     _types = ['face', 'edge']
 
-    def __init__(self, ndisplay=2):
+    def __init__(self, ndisplay=2) -> None:
 
         self._ndisplay = ndisplay
         self.clear()
diff --git a/napari/layers/shapes/_shape_list.py b/napari/layers/shapes/_shape_list.py
index 396bba2c..7ec93e30 100644
--- a/napari/layers/shapes/_shape_list.py
+++ b/napari/layers/shapes/_shape_list.py
@@ -67,7 +67,7 @@ class ShapeList:
         be rendered.
     """
 
-    def __init__(self, data=[], ndisplay=2):
+    def __init__(self, data=(), ndisplay=2) -> None:
 
         self._ndisplay = ndisplay
         self.shapes = []
@@ -1124,7 +1124,7 @@ class ShapeList:
         )
         return intersection_points
 
-    def to_masks(self, mask_shape=None, zoom_factor=1, offset=[0, 0]):
+    def to_masks(self, mask_shape=None, zoom_factor=1, offset=(0, 0)):
         """Returns N binary masks, one for each shape, embedded in an array of
         shape `mask_shape`.
 
@@ -1158,7 +1158,7 @@ class ShapeList:
 
         return masks
 
-    def to_labels(self, labels_shape=None, zoom_factor=1, offset=[0, 0]):
+    def to_labels(self, labels_shape=None, zoom_factor=1, offset=(0, 0)):
         """Returns a integer labels image, where each shape is embedded in an
         array of shape labels_shape with the value of the index + 1
         corresponding to it, and 0 for background. For overlapping shapes
@@ -1196,7 +1196,7 @@ class ShapeList:
         return labels
 
     def to_colors(
-        self, colors_shape=None, zoom_factor=1, offset=[0, 0], max_shapes=None
+        self, colors_shape=None, zoom_factor=1, offset=(0, 0), max_shapes=None
     ):
         """Rasterize shapes to an RGBA image array.
 
diff --git a/napari/layers/shapes/_shapes_models/_polgyon_base.py b/napari/layers/shapes/_shapes_models/_polgyon_base.py
index a36b55cc..3cd127ec 100644
--- a/napari/layers/shapes/_shapes_models/_polgyon_base.py
+++ b/napari/layers/shapes/_shapes_models/_polgyon_base.py
@@ -43,7 +43,7 @@ class PolygonBase(Shape):
         name='polygon',
         interpolation_order=1,
         interpolation_sampling=50,
-    ):
+    ) -> None:
 
         super().__init__(
             edge_width=edge_width,
diff --git a/napari/layers/shapes/_shapes_models/ellipse.py b/napari/layers/shapes/_shapes_models/ellipse.py
index cc19865a..09deb89a 100644
--- a/napari/layers/shapes/_shapes_models/ellipse.py
+++ b/napari/layers/shapes/_shapes_models/ellipse.py
@@ -39,7 +39,7 @@ class Ellipse(Shape):
         z_index=0,
         dims_order=None,
         ndisplay=2,
-    ):
+    ) -> None:
 
         super().__init__(
             edge_width=edge_width,
diff --git a/napari/layers/shapes/_shapes_models/line.py b/napari/layers/shapes/_shapes_models/line.py
index d572b3d6..505a0e99 100644
--- a/napari/layers/shapes/_shapes_models/line.py
+++ b/napari/layers/shapes/_shapes_models/line.py
@@ -29,7 +29,7 @@ class Line(Shape):
         z_index=0,
         dims_order=None,
         ndisplay=2,
-    ):
+    ) -> None:
 
         super().__init__(
             edge_width=edge_width,
diff --git a/napari/layers/shapes/_shapes_models/path.py b/napari/layers/shapes/_shapes_models/path.py
index 740ca8d0..3faad795 100644
--- a/napari/layers/shapes/_shapes_models/path.py
+++ b/napari/layers/shapes/_shapes_models/path.py
@@ -26,7 +26,7 @@ class Path(PolygonBase):
         dims_order=None,
         ndisplay=2,
         interpolation_order=1,
-    ):
+    ) -> None:
 
         super().__init__(
             data,
diff --git a/napari/layers/shapes/_shapes_models/polygon.py b/napari/layers/shapes/_shapes_models/polygon.py
index 72b9a2b4..149746e5 100644
--- a/napari/layers/shapes/_shapes_models/polygon.py
+++ b/napari/layers/shapes/_shapes_models/polygon.py
@@ -26,7 +26,7 @@ class Polygon(PolygonBase):
         dims_order=None,
         ndisplay=2,
         interpolation_order=1,
-    ):
+    ) -> None:
 
         super().__init__(
             data=data,
diff --git a/napari/layers/shapes/_shapes_models/rectangle.py b/napari/layers/shapes/_shapes_models/rectangle.py
index 31c9c993..cccca2e0 100644
--- a/napari/layers/shapes/_shapes_models/rectangle.py
+++ b/napari/layers/shapes/_shapes_models/rectangle.py
@@ -31,7 +31,7 @@ class Rectangle(Shape):
         z_index=0,
         dims_order=None,
         ndisplay=2,
-    ):
+    ) -> None:
 
         super().__init__(
             edge_width=edge_width,
diff --git a/napari/layers/shapes/_shapes_models/shape.py b/napari/layers/shapes/_shapes_models/shape.py
index c51e88ba..4dceef7e 100644
--- a/napari/layers/shapes/_shapes_models/shape.py
+++ b/napari/layers/shapes/_shapes_models/shape.py
@@ -95,7 +95,7 @@ class Shape(ABC):
         z_index=0,
         dims_order=None,
         ndisplay=2,
-    ):
+    ) -> None:
 
         self._dims_order = dims_order or list(range(2))
         self._ndisplay = ndisplay
@@ -352,7 +352,7 @@ class Shape(ABC):
             self.transform(transform)
             self.shift(-center)
 
-    def to_mask(self, mask_shape=None, zoom_factor=1, offset=[0, 0]):
+    def to_mask(self, mask_shape=None, zoom_factor=1, offset=(0, 0)):
         """Convert the shape vertices to a boolean mask.
 
         Set points to `True` if they are lying inside the shape if the shape is
diff --git a/napari/layers/shapes/_tests/test_shapes.py b/napari/layers/shapes/_tests/test_shapes.py
index f3bf6b2f..395890bf 100644
--- a/napari/layers/shapes/_tests/test_shapes.py
+++ b/napari/layers/shapes/_tests/test_shapes.py
@@ -216,7 +216,7 @@ def test_setting_current_properties():
     }
 
     coerced_current_properties = layer.current_properties
-    for k, v in coerced_current_properties.items():
+    for k in coerced_current_properties:
         value = coerced_current_properties[k]
         assert isinstance(value, np.ndarray)
         np.testing.assert_equal(value, expected_current_properties[k])
diff --git a/napari/layers/shapes/_tests/test_shapes_mouse_bindings.py b/napari/layers/shapes/_tests/test_shapes_mouse_bindings.py
index 3d62d694..ef7ad8ed 100644
--- a/napari/layers/shapes/_tests/test_shapes_mouse_bindings.py
+++ b/napari/layers/shapes/_tests/test_shapes_mouse_bindings.py
@@ -870,7 +870,7 @@ def test_drag_start_selection(
                 [offset_position[0], offset_position[1]],
             )
         else:
-            assert False, 'Unreachable code'  # pragma: no cover
+            raise AssertionError("Unreachable code")  # pragma: no cover
     else:
         np.testing.assert_array_equal(
             layer._drag_box, [initial_position, offset_position]
@@ -899,7 +899,7 @@ def test_drag_start_selection(
                 [offset_position[0], offset_position[1]],
             )
         else:
-            assert False, 'Unreachable code'  # pragma: no cover
+            raise AssertionError("Unreachable code")  # pragma: no cover
     else:
         np.testing.assert_array_equal(
             layer._drag_box, [initial_position, offset_position]
diff --git a/napari/layers/shapes/shapes.py b/napari/layers/shapes/shapes.py
index 958a9a6a..5830b0b7 100644
--- a/napari/layers/shapes/shapes.py
+++ b/napari/layers/shapes/shapes.py
@@ -409,7 +409,7 @@ class Shapes(Layer):
         visible=True,
         cache=True,
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
         if data is None:
             if ndim is None:
                 ndim = 2
@@ -2575,7 +2575,7 @@ class Shapes(Layer):
         self._finish_drawing()
         self.events.data(value=self.data)
 
-    def _rotate_box(self, angle, center=[0, 0]):
+    def _rotate_box(self, angle, center=(0, 0)):
         """Perform a rotation on the selected box.
 
         Parameters
@@ -2592,7 +2592,7 @@ class Shapes(Layer):
         box = self._selected_box - center
         self._selected_box = box @ transform.T + center
 
-    def _scale_box(self, scale, center=[0, 0]):
+    def _scale_box(self, scale, center=(0, 0)):
         """Perform a scaling on the selected box.
 
         Parameters
@@ -2613,7 +2613,7 @@ class Shapes(Layer):
             box[Box.HANDLE] = box[Box.TOP_CENTER] + r * handle_vec / cur_len
         self._selected_box = box + center
 
-    def _transform_box(self, transform, center=[0, 0]):
+    def _transform_box(self, transform, center=(0, 0)):
         """Perform a linear transformation on the selected box.
 
         Parameters
diff --git a/napari/layers/surface/surface.py b/napari/layers/surface/surface.py
index 1863c677..c6008ac0 100644
--- a/napari/layers/surface/surface.py
+++ b/napari/layers/surface/surface.py
@@ -172,7 +172,7 @@ class Surface(IntensityVisualizationMixin, Layer):
         experimental_clipping_planes=None,
         wireframe=None,
         normals=None,
-    ):
+    ) -> None:
 
         ndim = data[0].shape[1]
 
diff --git a/napari/layers/tracks/_track_utils.py b/napari/layers/tracks/_track_utils.py
index f1a6bd0c..5902db32 100644
--- a/napari/layers/tracks/_track_utils.py
+++ b/napari/layers/tracks/_track_utils.py
@@ -66,7 +66,7 @@ class TrackManager:
         Track ID for each vertex in track_vertices.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
 
         # store the raw data here
         self._data = None
diff --git a/napari/layers/tracks/tracks.py b/napari/layers/tracks/tracks.py
index 3ac20cef..13351f14 100644
--- a/napari/layers/tracks/tracks.py
+++ b/napari/layers/tracks/tracks.py
@@ -119,7 +119,7 @@ class Tracks(Layer):
         colormaps_dict=None,
         cache=True,
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
 
         # if not provided with any data, set up an empty layer in 2D+t
         if data is None:
diff --git a/napari/layers/utils/_link_layers.py b/napari/layers/utils/_link_layers.py
index 4f1e4238..d3464d5c 100644
--- a/napari/layers/utils/_link_layers.py
+++ b/napari/layers/utils/_link_layers.py
@@ -188,7 +188,9 @@ def layers_linked(layers: Iterable[Layer], attributes: Iterable[str] = ()):
 
 def _get_common_evented_attributes(
     layers: Iterable[Layer],
-    exclude: set[str] = {'thumbnail', 'status', 'name', 'data', 'extent'},
+    exclude: set[str] = frozenset(
+        ('thumbnail', 'status', 'name', 'data', 'extent')
+    ),
     with_private=False,
 ) -> set[str]:
     """Get the set of common, non-private evented attributes in ``layers``.
@@ -222,7 +224,7 @@ def _get_common_evented_attributes(
                 "``layers`` iterable must have at least one layer",
                 deferred=True,
             )
-        )
+        ) from None
 
     layer_events = [
         {
@@ -264,6 +266,6 @@ def _unlink_keys(keys: Iterable[LinkKey]):
 
 def _rebuild_link_index():
     links = DefaultDict(set)
-    for l1, l2, attr in _UNLINKERS:
+    for l1, l2, _attr in _UNLINKERS:
         links[l1].add(l2)
     return links
diff --git a/napari/layers/utils/_tests/test_layer_utils.py b/napari/layers/utils/_tests/test_layer_utils.py
index 35a676fa..2e41d87f 100644
--- a/napari/layers/utils/_tests/test_layer_utils.py
+++ b/napari/layers/utils/_tests/test_layer_utils.py
@@ -224,7 +224,7 @@ def test_coerce_current_properties_valid_values():
     }
     coerced_current_properties = coerce_current_properties(current_properties)
 
-    for k, v in coerced_current_properties.items():
+    for k in coerced_current_properties:
         value = coerced_current_properties[k]
         assert isinstance(value, np.ndarray)
         np.testing.assert_equal(value, expected_current_properties[k])
@@ -489,7 +489,7 @@ def test_register_label_attr_action(monkeypatch):
     monkeypatch.setattr(time, "time", lambda: 1)
 
     class Foo(KeymapProvider):
-        def __init__(self):
+        def __init__(self) -> None:
             super().__init__()
             self.value = 0
 
diff --git a/napari/layers/utils/_tests/test_stack_utils.py b/napari/layers/utils/_tests/test_stack_utils.py
index dc2c6e70..b44a1b60 100644
--- a/napari/layers/utils/_tests/test_stack_utils.py
+++ b/napari/layers/utils/_tests/test_stack_utils.py
@@ -185,7 +185,7 @@ def test_split_channels(kwargs):
     result_list = split_channels(data, 0, **kwargs)
 
     assert len(result_list) == 3
-    for d, meta, _ in result_list:
+    for d, _meta, _ in result_list:
         assert d.shape == (128, 128)
 
 
diff --git a/napari/layers/utils/color_encoding.py b/napari/layers/utils/color_encoding.py
index a8af87fa..1611910f 100644
--- a/napari/layers/utils/color_encoding.py
+++ b/napari/layers/utils/color_encoding.py
@@ -78,13 +78,13 @@ class ColorEncoding(StyleEncoding[ColorValue, ColorArray], Protocol):
             )
         try:
             color_array = ColorArray.validate(value)
-        except (ValueError, AttributeError, KeyError):
+        except (ValueError, AttributeError, KeyError) as e:
             raise TypeError(
                 trans._(
                     'value should be a ColorEncoding, a dict, a color, or a sequence of colors',
                     deferred=True,
                 )
-            )
+            ) from e
         if color_array.shape[0] == 1:
             return ConstantColorEncoding(constant=value)
         return ManualColorEncoding(array=color_array, default=DEFAULT_COLOR)
diff --git a/napari/layers/utils/color_manager.py b/napari/layers/utils/color_manager.py
index bb3e7a0c..d5fbd0e9 100644
--- a/napari/layers/utils/color_manager.py
+++ b/napari/layers/utils/color_manager.py
@@ -60,13 +60,13 @@ class ColorProperties:
                     # ensure the values are a numpy array
                     val['values'] = np.asarray(val['values'])
                     color_properties = cls(**val)
-                except ValueError:
+                except ValueError as e:
                     raise ValueError(
                         trans._(
                             'color_properties dictionary should have keys: name, values, and optionally current_value',
                             deferred=True,
                         )
-                    )
+                    ) from e
 
         elif isinstance(val, cls):
             color_properties = val
@@ -427,7 +427,7 @@ class ColorManager(EventedModel):
                     )
 
     def _update_current_color(
-        self, current_color: np.ndarray, update_indices: list = []
+        self, current_color: np.ndarray, update_indices: list = ()
     ):
         """Update the current color and update the colors if requested.
 
@@ -444,7 +444,7 @@ class ColorManager(EventedModel):
             will change the mode to DIRECT.
         """
         self.current_color = transform_color(current_color)[0]
-        if len(update_indices) > 0:
+        if update_indices:
             self.color_mode = ColorMode.DIRECT
             cur_colors = self.colors.copy()
             cur_colors[update_indices] = self.current_color
@@ -463,12 +463,15 @@ class ColorManager(EventedModel):
         ] = None,
         color_mode: Optional[Union[ColorMode, str]] = None,
         current_color: Optional[np.ndarray] = None,
-        default_color_cycle: np.ndarray = np.array([1, 1, 1, 1]),
+        default_color_cycle: ColorType = None,
     ):
         """Initialize a ColorManager object from layer kwargs. This is a convenience
         function to coerce possible inputs into ColorManager kwargs
 
         """
+        if default_color_cycle is None:
+            default_color_cycle = np.array([1, 1, 1, 1])
+
         properties = {k: np.asarray(v) for k, v in properties.items()}
         if isinstance(colors, dict):
             # if the kwargs are passed as a dictionary, unpack them
@@ -493,13 +496,13 @@ class ColorManager(EventedModel):
                     color_properties = ColorProperties(
                         name=prop_name, values=prop_values
                     )
-                except KeyError:
+                except KeyError as e:
                     raise KeyError(
                         trans._(
                             'if color_properties is a string, it should be a property name',
                             deferred=True,
                         )
-                    )
+                    ) from e
         else:
             color_values = colors
             color_properties = None
diff --git a/napari/layers/utils/layer_utils.py b/napari/layers/utils/layer_utils.py
index 46dc0772..d143c124 100644
--- a/napari/layers/utils/layer_utils.py
+++ b/napari/layers/utils/layer_utils.py
@@ -109,13 +109,13 @@ def register_layer_attr_action(
         sig = inspect.signature(func)
         try:
             first_variable_name = next(iter(sig.parameters))
-        except StopIteration:
+        except StopIteration as e:
             raise RuntimeError(
                 trans._(
                     "If actions has no arguments there is no way to know what to set the attribute to.",
                     deferred=True,
                 ),
-            )
+            ) from e
 
         @functools.wraps(func)
         def _wrapper(*args, **kwargs):
@@ -784,7 +784,7 @@ class _FeatureTable:
         values: Optional[Union[Dict[str, np.ndarray], pd.DataFrame]] = None,
         *,
         num_data: Optional[int] = None,
-    ):
+    ) -> None:
         self._values = _validate_features(values, num_data=num_data)
         self._defaults = self._make_defaults()
 
diff --git a/napari/layers/utils/stack_utils.py b/napari/layers/utils/stack_utils.py
index 8729e04a..6f6f0350 100644
--- a/napari/layers/utils/stack_utils.py
+++ b/napari/layers/utils/stack_utils.py
@@ -137,7 +137,7 @@ def split_channels(
         for key, val in kwargs.items():
             try:
                 i_kwargs[key] = next(val)
-            except StopIteration:
+            except StopIteration as e:
                 raise IndexError(
                     trans._(
                         "Error adding multichannel image with data shape {data_shape!r}.\nRequested channel_axis ({channel_axis}) had length {n_channels}, but the '{key}' argument only provided {i} values. ",
@@ -148,7 +148,7 @@ def split_channels(
                         key=key,
                         i=i,
                     )
-                )
+                ) from e
 
         layerdata = (image, i_kwargs, 'image')
         layerdata_list.append(layerdata)
diff --git a/napari/layers/utils/style_encoding.py b/napari/layers/utils/style_encoding.py
index 8249c767..4b92d1ec 100644
--- a/napari/layers/utils/style_encoding.py
+++ b/napari/layers/utils/style_encoding.py
@@ -229,7 +229,7 @@ class _DerivedStyleEncoding(
     fallback: StyleValue
     _cached: StyleArray
 
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         super().__init__(**kwargs)
         self._cached = _empty_array_like(self.fallback)
 
diff --git a/napari/layers/utils/text_manager.py b/napari/layers/utils/text_manager.py
index b95e44b0..35e2298e 100644
--- a/napari/layers/utils/text_manager.py
+++ b/napari/layers/utils/text_manager.py
@@ -92,7 +92,7 @@ class TextManager(EventedModel):
 
     def __init__(
         self, text=None, properties=None, n_text=None, features=None, **kwargs
-    ):
+    ) -> None:
         if n_text is not None:
             _warn_about_deprecated_n_text_parameter()
         if properties is not None:
diff --git a/napari/layers/vectors/vectors.py b/napari/layers/vectors/vectors.py
index e2edaeac..c70fc0c1 100644
--- a/napari/layers/vectors/vectors.py
+++ b/napari/layers/vectors/vectors.py
@@ -176,7 +176,7 @@ class Vectors(Layer):
         visible=True,
         cache=True,
         experimental_clipping_planes=None,
-    ):
+    ) -> None:
         if ndim is None and scale is not None:
             ndim = len(scale)
 
diff --git a/napari/plugins/__init__.py b/napari/plugins/__init__.py
index 1a728761..f4b5fef2 100644
--- a/napari/plugins/__init__.py
+++ b/napari/plugins/__init__.py
@@ -1,8 +1,7 @@
 from functools import lru_cache
 
-from npe2 import PackageMetadata
+from npe2 import PackageMetadata, PluginManifest
 from npe2 import PluginManager as _PluginManager
-from npe2 import PluginManifest
 
 from napari.plugins import _npe2
 from napari.plugins._plugin_manager import NapariPluginManager
diff --git a/napari/plugins/_npe2.py b/napari/plugins/_npe2.py
index a6c53d42..6b1061b9 100644
--- a/napari/plugins/_npe2.py
+++ b/napari/plugins/_npe2.py
@@ -34,7 +34,7 @@ if TYPE_CHECKING:
 
 
 class _FakeHookimpl:
-    def __init__(self, name):
+    def __init__(self, name) -> None:
         self.plugin_name = name
 
 
@@ -139,6 +139,13 @@ def get_widget_contribution(
 def populate_qmenu(menu: QMenu, menu_key: str):
     """Populate `menu` from a `menu_key` offering in the manifest."""
     # TODO: declare somewhere what menu_keys are valid.
+
+    def _wrap(cmd_):
+        def _wrapped(*args):
+            cmd_.exec(args=args)
+
+        return _wrapped
+
     for item in pm.iter_menu(menu_key):
         if isinstance(item, contributions.Submenu):
             subm_contrib = pm.get_submenu(item.submenu)
@@ -147,7 +154,7 @@ def populate_qmenu(menu: QMenu, menu_key: str):
         else:
             cmd = pm.get_command(item.command)
             action = menu.addAction(cmd.title)
-            action.triggered.connect(lambda *args: cmd.exec(args=args))  # type: ignore
+            action.triggered.connect(_wrap(cmd))
 
 
 def file_extensions_string_for_layers(
diff --git a/napari/plugins/_plugin_manager.py b/napari/plugins/_plugin_manager.py
index 18210492..9b577e96 100644
--- a/napari/plugins/_plugin_manager.py
+++ b/napari/plugins/_plugin_manager.py
@@ -1,3 +1,4 @@
+import contextlib
 import sys
 import warnings
 from functools import partial
@@ -63,7 +64,7 @@ class NapariPluginManager(PluginManager):
 
     ENTRY_POINT = 'napari.plugin'
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__('napari', discover_entry_point=self.ENTRY_POINT)
 
         self.events = EmitterGroup(
@@ -737,11 +738,10 @@ class NapariPluginManager(PluginManager):
                 ext = f".{ext}"
             ext_map[ext] = plugin
 
+            func = None
             # give warning that plugin *may* not be able to read that extension
-            try:
+            with contextlib.suppress(Exception):
                 func = caller._call_plugin(plugin, path=f'_testing_{ext}')
-            except Exception:
-                pass
             if func is None:
                 msg = trans._(
                     'plugin {plugin!r} did not return a {type_} function when provided a path ending in {ext!r}. This *may* indicate a typo?',
diff --git a/napari/plugins/_tests/test_exceptions.py b/napari/plugins/_tests/test_exceptions.py
index 68ad36c1..0627fb38 100644
--- a/napari/plugins/_tests/test_exceptions.py
+++ b/napari/plugins/_tests/test_exceptions.py
@@ -29,7 +29,7 @@ def test_format_exceptions(cgitb, as_html, monkeypatch):
                 plugin_name='test_plugin',
                 plugin="mock",
                 cause=e,
-            )
+            ) from e
     except PluginError:
         pass
 
diff --git a/napari/plugins/_tests/test_hub.py b/napari/plugins/_tests/test_hub.py
index d01cdee6..c9b43467 100644
--- a/napari/plugins/_tests/test_hub.py
+++ b/napari/plugins/_tests/test_hub.py
@@ -21,7 +21,7 @@ ANACONDA_REPLY_EMPTY = b'{"versions": []}'
 # Mocks
 # ----------------------------------------------------------------------------
 class FakeResponse:
-    def __init__(self, *, data: bytes, _error=None):
+    def __init__(self, *, data: bytes, _error=None) -> None:
         self.data = data
         self._error = _error
 
diff --git a/napari/plugins/hub.py b/napari/plugins/hub.py
index 3daea10a..0b53df84 100644
--- a/napari/plugins/hub.py
+++ b/napari/plugins/hub.py
@@ -98,9 +98,11 @@ def hub_plugin_info(
 
 
 def iter_hub_plugin_info(
-    skip={}, conda_forge=True
+    skip=None, conda_forge=True
 ) -> Generator[Tuple[Optional[PackageMetadata], bool], None, None]:
     """Return a generator that yields ProjectInfo of available napari plugins."""
+    if skip is None:
+        skip = {}
     with request.urlopen(NAPARI_HUB_PLUGINS) as resp:
         plugins = json.loads(resp.read().decode())
 
diff --git a/napari/plugins/io.py b/napari/plugins/io.py
index 142164bb..e723391b 100644
--- a/napari/plugins/io.py
+++ b/napari/plugins/io.py
@@ -135,7 +135,7 @@ def read_data_with_plugins(
         try:
             layer_data = reader(npe1_path)  # try to read data
             hookimpl = result.implementation
-        except Exception as exc:
+        except Exception as exc:  # noqa BLE001
             raise PluginCallError(result.implementation, cause=exc) from exc
 
     if not layer_data:
@@ -391,8 +391,8 @@ def _write_multiple_layers_with_plugins(
             writer_function(abspath_or_url(path), layer_data),
             implementation.plugin_name,
         )
-    except Exception as exc:
-        raise PluginCallError(implementation, cause=exc)
+    except Exception as exc:  # noqa: BLE001
+        raise PluginCallError(implementation, cause=exc) from exc
 
 
 def _write_single_layer_with_plugins(
diff --git a/napari/settings/_base.py b/napari/settings/_base.py
index 9cda7c5f..bacba638 100644
--- a/napari/settings/_base.py
+++ b/napari/settings/_base.py
@@ -1,5 +1,6 @@
 from __future__ import annotations
 
+import contextlib
 import logging
 import os
 from collections.abc import Mapping
@@ -363,7 +364,7 @@ def config_file_settings_source(
     default_cfg = getattr(default_cfg, 'default', None)
 
     # if the config has a `sources` list, read those too and merge.
-    sources = list(getattr(settings.__config__, 'sources', []))
+    sources: List[str] = list(getattr(settings.__config__, 'sources', []))
     if config_path:
         sources.append(config_path)
     if not sources:
@@ -373,17 +374,17 @@ def config_file_settings_source(
     for path in sources:
         if not path:
             continue  # pragma: no cover
-        _path = Path(path).expanduser().resolve()
+        path_ = Path(path).expanduser().resolve()
 
         # if the requested config path does not exist, move on to the next
-        if not _path.is_file():
+        if not path_.is_file():
             # if it wasn't the `_config_path` stated in the BaseModel itself,
             # we warn, since this would have been user provided.
-            if _path != default_cfg:
+            if path_ != default_cfg:
                 _logger.warning(
                     trans._(
                         "Requested config path is not a file: {path}",
-                        path=_path,
+                        path=path_,
                     )
                 )
             continue
@@ -404,8 +405,8 @@ def config_file_settings_source(
 
         try:
             # try to parse the config file into a dict
-            new_data = load(_path.read_text()) or {}
-        except Exception as err:
+            new_data = load(path_.read_text()) or {}
+        except Exception as err:  # noqa: BLE001
             _logger.warning(
                 trans._(
                     "The content of the napari settings file could not be read\n\nThe default settings will be used and the content of the file will be replaced the next time settings are changed.\n\nError:\n{err}",
@@ -414,7 +415,7 @@ def config_file_settings_source(
                 )
             )
             continue
-        assert isinstance(new_data, dict), _path.read_text()
+        assert isinstance(new_data, dict), path_.read_text()
         deep_update(data, new_data, copy=False)
 
     try:
@@ -432,12 +433,10 @@ def config_file_settings_source(
             deferred=True,
             errors=display_errors(errors),
         )
-        try:
+        with contextlib.suppress(Exception):
             # we're about to nuke some settings, so just in case... try backup
-            backup_path = _path.parent / f'{_path.stem}.BAK{_path.suffix}'
-            backup_path.write_text(_path.read_text())
-        except Exception:
-            pass
+            backup_path = path_.parent / f'{path_.stem}.BAK{path_.suffix}'
+            backup_path.write_text(path_.read_text())
 
         _logger.warning(msg)
         try:
diff --git a/napari/settings/_migrations.py b/napari/settings/_migrations.py
index d4233372..297a38e4 100644
--- a/napari/settings/_migrations.py
+++ b/napari/settings/_migrations.py
@@ -31,7 +31,7 @@ def do_migrations(model: NapariSettings):
                 try:
                     migration.run(model)
                     model.schema_version = migration.to_
-                except Exception as e:
+                except Exception as e:  # noqa BLE001
                     msg = (
                         f"Failed to migrate settings from v{migration.from_} "
                         f"to v{migration.to_}. Error: {e}. "
@@ -39,7 +39,7 @@ def do_migrations(model: NapariSettings):
                     try:
                         model.update(backup)
                         msg += 'You may need to reset your settings with `napari --reset`. '
-                    except Exception:
+                    except Exception:  # noqa BLE001
                         msg += 'Settings rollback also failed. Please run `napari --reset`.'
                     warnings.warn(msg)
                     return
diff --git a/napari/settings/_tests/test_migrations.py b/napari/settings/_tests/test_migrations.py
index cecfda72..c4538d63 100644
--- a/napari/settings/_tests/test_migrations.py
+++ b/napari/settings/_tests/test_migrations.py
@@ -1,5 +1,5 @@
 import os
-from importlib.metadata import distribution
+from importlib.metadata import PackageNotFoundError, distribution
 from unittest.mock import patch
 
 import pytest
@@ -87,7 +87,7 @@ def test_030_to_040_migration():
     try:
         d = distribution('napari-svg')
         assert 'napari.manifest' in {ep.group for ep in d.entry_points}
-    except Exception:
+    except PackageNotFoundError:
         pytest.fail(
             'napari-svg not present as an npe2 plugin. '
             'This test needs updating'
diff --git a/napari/utils/_tests/test_key_bindings.py b/napari/utils/_tests/test_key_bindings.py
index f3700e37..44102cf6 100644
--- a/napari/utils/_tests/test_key_bindings.py
+++ b/napari/utils/_tests/test_key_bindings.py
@@ -160,7 +160,7 @@ class Foo(KeymapProvider):
         'D': ...,
     }
 
-    def __init__(self):
+    def __init__(self) -> None:
         self.keymap = {
             'B': lambda x: setattr(x, 'B', None),  # overwrite
             'E': lambda x: setattr(x, 'E', None),  # new entry
diff --git a/napari/utils/_tests/test_migrations.py b/napari/utils/_tests/test_migrations.py
index 1b01f633..30706ee9 100644
--- a/napari/utils/_tests/test_migrations.py
+++ b/napari/utils/_tests/test_migrations.py
@@ -19,7 +19,7 @@ def test_simple():
 def test_constructor():
     class Sample:
         @rename_argument("a", "b", "1")
-        def __init__(self, b):
+        def __init__(self, b) -> None:
             self.b = b
 
     assert Sample(1).b == 1
diff --git a/napari/utils/_tests/test_misc.py b/napari/utils/_tests/test_misc.py
index 39ccf674..aae0a17d 100644
--- a/napari/utils/_tests/test_misc.py
+++ b/napari/utils/_tests/test_misc.py
@@ -44,7 +44,7 @@ def test_sequence_of_iterables(input, expected):
         ensure_sequence_of_iterables(input, repeat_empty=True),
         expected,
     )
-    for i, result, expectation in zipped:
+    for _i, result, expectation in zipped:
         assert result == expectation
 
 
@@ -84,7 +84,7 @@ def test_sequence_of_iterables_raises():
 def test_ensure_iterable(input, expected):
     """Test test_ensure_iterable returns an iterable."""
     zipped = zip(range(3), ensure_iterable(input), expected)
-    for i, result, expectation in zipped:
+    for _i, result, expectation in zipped:
         assert result == expectation
 
 
diff --git a/napari/utils/_tests/test_proxies.py b/napari/utils/_tests/test_proxies.py
index 3a4f6a1a..72566e3b 100644
--- a/napari/utils/_tests/test_proxies.py
+++ b/napari/utils/_tests/test_proxies.py
@@ -105,7 +105,7 @@ def test_receive_return_proxy_object():
         layer = pv.layers[-1]
         assert isinstance(layer, PublicOnlyProxy)
         # remove and add it back, should be fine
-        add_layer = getattr(pv, 'add_layer')
+        add_layer = pv.add_layer
         viewer.layers.pop()
 
     add_layer(layer)
diff --git a/napari/utils/_testsupport.py b/napari/utils/_testsupport.py
index 4a2efeff..3de6fd52 100644
--- a/napari/utils/_testsupport.py
+++ b/napari/utils/_testsupport.py
@@ -224,10 +224,12 @@ def make_napari_viewer(
     def actual_factory(
         *model_args,
         ViewerClass=Viewer,
-        strict_qt=is_internal_test or os.getenv("NAPARI_STRICT_QT"),
+        strict_qt=None,
         block_plugin_discovery=True,
         **model_kwargs,
     ):
+        if strict_qt is None:
+            strict_qt = is_internal_test or os.getenv("NAPARI_STRICT_QT")
         nonlocal _strict
         _strict = strict_qt
 
diff --git a/napari/utils/action_manager.py b/napari/utils/action_manager.py
index e12159e5..98b4a24b 100644
--- a/napari/utils/action_manager.py
+++ b/napari/utils/action_manager.py
@@ -80,7 +80,7 @@ class ActionManager:
 
     _actions: Dict[str, Action]
 
-    def __init__(self):
+    def __init__(self) -> None:
         # map associating a name/id with a Comm
         self._actions: Dict[str, Action] = {}
         self._shortcuts: Dict[str, List[str]] = defaultdict(list)
diff --git a/napari/utils/colormaps/colormap.py b/napari/utils/colormaps/colormap.py
index 9c2a4243..3c5e1f35 100644
--- a/napari/utils/colormaps/colormap.py
+++ b/napari/utils/colormaps/colormap.py
@@ -52,7 +52,9 @@ class Colormap(EventedModel):
     interpolation: ColormapInterpolationMode = ColormapInterpolationMode.LINEAR
     controls: Array[np.float32, (-1,)] = None
 
-    def __init__(self, colors, display_name: Optional[str] = None, **data):
+    def __init__(
+        self, colors, display_name: Optional[str] = None, **data
+    ) -> None:
         if display_name is None:
             display_name = data.get('name', 'custom')
 
diff --git a/napari/utils/colormaps/colormap_utils.py b/napari/utils/colormaps/colormap_utils.py
index f8055a96..b8d1f8fd 100644
--- a/napari/utils/colormaps/colormap_utils.py
+++ b/napari/utils/colormaps/colormap_utils.py
@@ -463,7 +463,7 @@ def vispy_or_mpl_colormap(name):
                 display_name = _MATPLOTLIB_COLORMAP_NAMES[name]
             else:
                 display_name = name
-        except AttributeError:
+        except AttributeError as e:
             suggestion = _MATPLOTLIB_COLORMAP_NAMES_REVERSE.get(
                 name
             ) or _MATPLOTLIB_COLORMAP_NAMES_REVERSE.get(name)
@@ -475,7 +475,7 @@ def vispy_or_mpl_colormap(name):
                         name=name,
                         suggestion=suggestion,
                     )
-                )
+                ) from e
             else:
                 colormaps = set(_VISPY_COLORMAPS_ORIGINAL).union(
                     set(_MATPLOTLIB_COLORMAP_NAMES)
diff --git a/napari/utils/colormaps/standardize_color.py b/napari/utils/colormaps/standardize_color.py
index b0feb407..61ed00e5 100644
--- a/napari/utils/colormaps/standardize_color.py
+++ b/napari/utils/colormaps/standardize_color.py
@@ -321,7 +321,7 @@ def _handle_str_list_like(colors: Sequence) -> np.ndarray:
     for idx, c in enumerate(colors):
         try:
             color_array[idx, :] = _color_switch[type(c)](c)
-        except (ValueError, TypeError, KeyError):
+        except (ValueError, TypeError, KeyError) as e:
             raise ValueError(
                 trans._(
                     "Invalid color found: {color} at index {idx}.",
@@ -329,7 +329,7 @@ def _handle_str_list_like(colors: Sequence) -> np.ndarray:
                     color=c,
                     idx=idx,
                 )
-            )
+            ) from e
     return color_array
 
 
diff --git a/napari/utils/events/_tests/test_event_emitter.py b/napari/utils/events/_tests/test_event_emitter.py
index 4ecf795e..5a160ae5 100644
--- a/napari/utils/events/_tests/test_event_emitter.py
+++ b/napari/utils/events/_tests/test_event_emitter.py
@@ -103,7 +103,7 @@ def test_error_on_connect():
         return decorator
 
     class Test:
-        def __init__(self):
+        def __init__(self) -> None:
             self.m1, self.m2, self.m4 = 0, 0, 0
 
         @rename("nonexist")
@@ -233,7 +233,7 @@ def test_event_order_methods():
 
 def test_no_event_arg():
     class TestOb:
-        def __init__(self):
+        def __init__(self) -> None:
             self.count = 0
 
         def fun(self):
diff --git a/napari/utils/events/_tests/test_evented_dict.py b/napari/utils/events/_tests/test_evented_dict.py
index 57ab6704..918e1a5b 100644
--- a/napari/utils/events/_tests/test_evented_dict.py
+++ b/napari/utils/events/_tests/test_evented_dict.py
@@ -61,7 +61,7 @@ def test_copy(test_dict, regular_dict):
 
 
 class E:
-    def __init__(self):
+    def __init__(self) -> None:
         self.events = EmitterGroup(test=None)
 
 
diff --git a/napari/utils/events/_tests/test_evented_list.py b/napari/utils/events/_tests/test_evented_list.py
index 535d7686..3e834c1e 100644
--- a/napari/utils/events/_tests/test_evented_list.py
+++ b/napari/utils/events/_tests/test_evented_list.py
@@ -219,7 +219,8 @@ def test_move_multiple_mimics_slice_reorder():
 
     # move_multiple also works omitting the insertion index
     el[:] = list(range(8))
-    el.move_multiple(new_order) == [el[i] for i in new_order]
+    el.move_multiple(new_order)
+    assert el == new_order
 
 
 def test_slice(test_list, regular_list):
@@ -376,7 +377,7 @@ def test_nested_move_multiple(sources, dest, expectation):
 
 
 class E:
-    def __init__(self):
+    def __init__(self) -> None:
         self.events = EmitterGroup(test=None)
 
 
diff --git a/napari/utils/events/_tests/test_typed_list.py b/napari/utils/events/_tests/test_typed_list.py
index 9d699dd3..da7f138a 100644
--- a/napari/utils/events/_tests/test_typed_list.py
+++ b/napari/utils/events/_tests/test_typed_list.py
@@ -62,7 +62,7 @@ def test_custom_lookup(list_type):
     """Test that we can get objects by non-integer index using custom lookups."""
 
     class Custom:
-        def __init__(self, name='', data=()):
+        def __init__(self, name='', data=()) -> None:
             self.name = name
             self.data = data
 
@@ -137,7 +137,7 @@ def test_nested_type_enforcement():
 
 def test_nested_custom_lookup():
     class Custom:
-        def __init__(self, name=''):
+        def __init__(self, name='') -> None:
             self.name = name
 
     c = Custom()
diff --git a/napari/utils/events/containers/_dict.py b/napari/utils/events/containers/_dict.py
index aefaed96..ca4fa285 100644
--- a/napari/utils/events/containers/_dict.py
+++ b/napari/utils/events/containers/_dict.py
@@ -22,7 +22,7 @@ class TypedMutableMapping(MutableMapping[_K, _T]):
         self,
         data: Mapping[_K, _T] = None,
         basetype: Union[Type[_T], Sequence[Type[_T]]] = (),
-    ):
+    ) -> None:
         if data is None:
             data = {}
         self._dict: Dict[_K, _T] = dict()
diff --git a/napari/utils/events/containers/_evented_dict.py b/napari/utils/events/containers/_evented_dict.py
index 0946287f..8ea814ba 100644
--- a/napari/utils/events/containers/_evented_dict.py
+++ b/napari/utils/events/containers/_evented_dict.py
@@ -45,7 +45,7 @@ class EventedDict(TypedMutableMapping[_K, _T]):
         self,
         data: Mapping[_K, _T] = None,
         basetype: Union[Type[_T], Sequence[Type[_T]]] = (),
-    ):
+    ) -> None:
         _events = {
             "changing": None,
             "changed": None,
@@ -85,7 +85,7 @@ class EventedDict(TypedMutableMapping[_K, _T]):
     def _reemit_child_event(self, event: Event):
         """An item in the dict emitted an event.  Re-emit with key"""
         if not hasattr(event, "key"):
-            setattr(event, "key", self.key(event.source))
+            event.key = self.key(event.source)
         # re-emit with this object's EventEmitter of the same type if present
         # otherwise just emit with the EmitterGroup itself
         getattr(self.events, event.type, self.events)(event)
diff --git a/napari/utils/events/containers/_evented_list.py b/napari/utils/events/containers/_evented_list.py
index 48b8f22b..83c4d0cd 100644
--- a/napari/utils/events/containers/_evented_list.py
+++ b/napari/utils/events/containers/_evented_list.py
@@ -85,8 +85,10 @@ class EventedList(TypedMutableSequence[_T]):
         data: Iterable[_T] = (),
         *,
         basetype: Union[Type[_T], Sequence[Type[_T]]] = (),
-        lookup: Dict[Type[_L], Callable[[_T], Union[_T, _L]]] = dict(),
-    ):
+        lookup: Dict[Type[_L], Callable[[_T], Union[_T, _L]]] = None,
+    ) -> None:
+        if lookup is None:
+            lookup = {}
         _events = {
             'inserting': None,  # int
             'inserted': None,  # Tuple[int, Any] - (idx, value)
@@ -197,7 +199,7 @@ class EventedList(TypedMutableSequence[_T]):
         """An item in the list emitted an event.  Re-emit with index"""
         if not hasattr(event, 'index'):
             with contextlib.suppress(ValueError):
-                setattr(event, 'index', self.index(event.source))
+                event.index = self.index(event.source)
         # reemit with this object's EventEmitter of the same type if present
         # otherwise just emit with the EmitterGroup itself
         getattr(self.events, event.type, self.events)(event)
diff --git a/napari/utils/events/containers/_selection.py b/napari/utils/events/containers/_selection.py
index 219301ec..f6e4a609 100644
--- a/napari/utils/events/containers/_selection.py
+++ b/napari/utils/events/containers/_selection.py
@@ -54,14 +54,18 @@ class Selection(EventedSet[_T]):
         emitted when the current item has changed. (Private event)
     """
 
-    def __init__(self, data: Iterable[_T] = ()):
+    def __init__(self, data: Iterable[_T] = ()) -> None:
         self._active: Optional[_T] = None
         self._current_ = None
         self.events = EmitterGroup(source=self, _current=None, active=None)
         super().__init__(data=data)
         self._update_active()
 
-    def _emit_change(self, added=set(), removed=set()):
+    def _emit_change(self, added=None, removed=None):
+        if added is None:
+            added = set()
+        if removed is None:
+            removed = set()
         self._update_active()
         return super()._emit_change(added=added, removed=removed)
 
diff --git a/napari/utils/events/containers/_set.py b/napari/utils/events/containers/_set.py
index 2a2845a7..91035062 100644
--- a/napari/utils/events/containers/_set.py
+++ b/napari/utils/events/containers/_set.py
@@ -28,7 +28,7 @@ class EventedSet(MutableSet[_T]):
 
     events: EmitterGroup
 
-    def __init__(self, data: Iterable[_T] = ()):
+    def __init__(self, data: Iterable[_T] = ()) -> None:
 
         _events = {'changed': None}
         # For inheritance: If the mro already provides an EmitterGroup, add...
@@ -56,8 +56,12 @@ class EventedSet(MutableSet[_T]):
         # for subclasses to potentially check value before adding
         return value
 
-    def _emit_change(self, added=set(), removed=set()):
+    def _emit_change(self, added=None, removed=None):
         # provides a hook for subclasses to update internal state before emit
+        if added is None:
+            added = set()
+        if removed is None:
+            removed = set()
         self.events.changed(added=added, removed=removed)
 
     def add(self, value: _T) -> None:
diff --git a/napari/utils/events/containers/_typed.py b/napari/utils/events/containers/_typed.py
index 2c28d674..4dee3322 100644
--- a/napari/utils/events/containers/_typed.py
+++ b/napari/utils/events/containers/_typed.py
@@ -49,8 +49,10 @@ class TypedMutableSequence(MutableSequence[_T]):
         data: Iterable[_T] = (),
         *,
         basetype: Union[Type[_T], Sequence[Type[_T]]] = (),
-        lookup: Dict[Type[_L], Callable[[_T], Union[_T, _L]]] = dict(),
-    ):
+        lookup: Dict[Type[_L], Callable[[_T], Union[_T, _L]]] = None,
+    ) -> None:
+        if lookup is None:
+            lookup = {}
         self._list: List[_T] = []
         self._basetypes = (
             basetype if isinstance(basetype, Sequence) else (basetype,)
diff --git a/napari/utils/events/debugging.py b/napari/utils/events/debugging.py
index 95feaef0..0ae03847 100644
--- a/napari/utils/events/debugging.py
+++ b/napari/utils/events/debugging.py
@@ -104,7 +104,7 @@ def log_event_stack(event: 'Event', cfg: EventDebugSettings = _SETTINGS):
     for f in reversed(call_stack):
         if 'self' in f.frame.f_locals:
             obj_type = type(f.frame.f_locals['self'])
-            module = getattr(obj_type, '__module__') or ''
+            module = obj_type.__module__ or ''
             if module.startswith("napari"):
                 trigger = f'{obj_type.__name__}.{f.function}()'
                 lines.insert(1, f'  was triggered by {trigger}, via:')
diff --git a/napari/utils/events/event.py b/napari/utils/events/event.py
index b74437aa..cf61d0ba 100644
--- a/napari/utils/events/event.py
+++ b/napari/utils/events/event.py
@@ -98,7 +98,7 @@ class Event:
         All extra keyword arguments become attributes of the event object.
     """
 
-    def __init__(self, type: str, native: Any = None, **kwargs: Any):
+    def __init__(self, type: str, native: Any = None, **kwargs: Any) -> None:
         # stack of all sources this event has been emitted through
         self._sources: List[Any] = []
         self._handled: bool = False
@@ -218,7 +218,7 @@ class _WeakCounter:
     It will only implement the methods we use here.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         self._counter = weakref.WeakKeyDictionary()
         self._nonecount = 0
 
@@ -278,7 +278,7 @@ class EventEmitter:
         source: Any = None,
         type: Optional[str] = None,
         event_class: Type[Event] = Event,
-    ):
+    ) -> None:
         # connected callbacks
         self._callbacks: List[Union[Callback, CallbackRef]] = []
         # used when connecting new callbacks at specific positions
@@ -783,7 +783,7 @@ class EventEmitter:
                 cb(event)
             else:
                 cb()
-        except Exception as e:
+        except Exception as e:  # noqa: BLE001
             # dead Qt object with living python pointer. not importing Qt
             # here... but this error is consistent across backends
             if (
@@ -885,7 +885,7 @@ class WarningEmitter(EventEmitter):
         stacklevel=3,
         *args,
         **kwargs,
-    ):
+    ) -> None:
         self._message = message
         self._warned = False
         self._category = category
@@ -959,7 +959,7 @@ class EmitterGroup(EventEmitter):
         source: Any = None,
         auto_connect: bool = False,
         **emitters: Union[Type[Event], EventEmitter, None],
-    ):
+    ) -> None:
         EventEmitter.__init__(self, source)
 
         self.auto_connect = auto_connect
@@ -1172,7 +1172,7 @@ class EventBlocker:
     manager (i.e. 'with' statement).
     """
 
-    def __init__(self, target, callback=None):
+    def __init__(self, target, callback=None) -> None:
         self.target = target
         self.callback = callback
         self._base_count = target._block_counter.get(callback, 0)
@@ -1196,7 +1196,7 @@ class EventBlockerAll:
     manager (i.e. 'with' statement).
     """
 
-    def __init__(self, target):
+    def __init__(self, target) -> None:
         self.target = target
 
     def __enter__(self):
diff --git a/napari/utils/events/evented_model.py b/napari/utils/events/evented_model.py
index 66b43765..3edea11d 100644
--- a/napari/utils/events/evented_model.py
+++ b/napari/utils/events/evented_model.py
@@ -192,7 +192,7 @@ class EventedModel(BaseModel, metaclass=EventedMetaclass):
         # field declares a _json_encode method.
         json_encoders = _BASE_JSON_ENCODERS
 
-    def __init__(self, **kwargs):
+    def __init__(self, **kwargs) -> None:
         super().__init__(**kwargs)
 
         self._events.source = self
diff --git a/napari/utils/info.py b/napari/utils/info.py
index 091a863c..8d7375c5 100644
--- a/napari/utils/info.py
+++ b/napari/utils/info.py
@@ -1,3 +1,4 @@
+import contextlib
 import os
 import platform
 import subprocess
@@ -50,21 +51,17 @@ def _sys_name():
     """
     Discover MacOS or Linux Human readable information. For Linux provide information about distribution.
     """
-    try:
+    with contextlib.suppress(Exception):
         if sys.platform == "linux":
             return _linux_sys_name()
         if sys.platform == "darwin":
-            try:
+            with contextlib.suppress(subprocess.CalledProcessError):
                 res = subprocess.run(
                     ["sw_vers", "-productVersion"],
                     check=True,
                     capture_output=True,
                 )
                 return f"MacOS {res.stdout.decode().strip()}"
-            except subprocess.CalledProcessError:
-                pass
-    except Exception:
-        pass
     return ""
 
 
@@ -103,7 +100,7 @@ def sys_info(as_html=False):
             f"<b>{API_NAME}</b>: {API_VERSION}<br>"
         )
 
-    except Exception as e:
+    except Exception as e:  # noqa BLE001
         text += f"<b>Qt</b>: Import failed ({e})<br>"
 
     modules = (
@@ -123,7 +120,7 @@ def sys_info(as_html=False):
         try:
             loaded[module] = __import__(module)
             text += f"<b>{name}</b>: {loaded[module].__version__}<br>"
-        except Exception as e:
+        except Exception as e:  # noqa BLE001
             text += f"<b>{name}</b>: Import failed ({e})<br>"
 
     text += "<br><b>OpenGL:</b><br>"
@@ -151,7 +148,7 @@ def sys_info(as_html=False):
         screen_list = QGuiApplication.screens()
         for i, screen in enumerate(screen_list, start=1):
             text += f"  - screen {i}: resolution {screen.geometry().width()}x{screen.geometry().height()}, scale {screen.devicePixelRatio()}<br>"
-    except Exception as e:
+    except Exception as e:  # noqa BLE001
         text += f"  - failed to load screen information {e}"
 
     text += "<br><b>Settings path:</b><br>"
diff --git a/napari/utils/interactions.py b/napari/utils/interactions.py
index e8d96b12..4363f55f 100644
--- a/napari/utils/interactions.py
+++ b/napari/utils/interactions.py
@@ -258,7 +258,7 @@ class Shortcut:
     instead of -.
     """
 
-    def __init__(self, shortcut: str):
+    def __init__(self, shortcut: str) -> None:
         """
         Parameters
         ----------
diff --git a/napari/utils/io.py b/napari/utils/io.py
index 59cab056..996c2fbb 100644
--- a/napari/utils/io.py
+++ b/napari/utils/io.py
@@ -1,12 +1,14 @@
 import os
 import warnings
-
-import numpy as np
+from typing import TYPE_CHECKING
 
 from napari.utils.translations import trans
 
+if TYPE_CHECKING:
+    import numpy as np
+
 
-def imsave(filename: str, data: np.ndarray):
+def imsave(filename: str, data: "np.ndarray"):
     """Custom implementation of imsave to avoid skimage dependency.
 
     Parameters
@@ -26,7 +28,7 @@ def imsave(filename: str, data: np.ndarray):
                 int(x) for x in tifffile.__version__.split('.')[:3]
             )
             compression_instead_of_compress = current_version >= (2021, 6, 6)
-        except Exception:
+        except Exception:  # noqa: BLE001
             # Just in case anything goes wrong in parsing version number
             # like repackaging on linux or anything else we fallback to
             # using compress
diff --git a/napari/utils/key_bindings.py b/napari/utils/key_bindings.py
index 9a223616..c1530a66 100644
--- a/napari/utils/key_bindings.py
+++ b/napari/utils/key_bindings.py
@@ -336,7 +336,7 @@ class KeybindingDescriptor:
         Function to bind.
     """
 
-    def __init__(self, func):
+    def __init__(self, func) -> None:
         self.__func__ = func
 
     def __get__(self, instance, cls):
@@ -355,7 +355,7 @@ class KeymapProvider:
         Instance keymap.
     """
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
         self.keymap = {}
 
@@ -400,7 +400,7 @@ class KeymapHandler:
         Classes that provide the keymaps for this class to handle.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
         self._key_release_generators = {}
         self.keymap_providers = []
diff --git a/napari/utils/misc.py b/napari/utils/misc.py
index 267c797b..6db7cdc9 100644
--- a/napari/utils/misc.py
+++ b/napari/utils/misc.py
@@ -89,36 +89,30 @@ def bundle_bin_dir() -> Optional[str]:
 
 def in_jupyter() -> bool:
     """Return true if we're running in jupyter notebook/lab or qtconsole."""
-    try:
+    with contextlib.suppress(ImportError):
         from IPython import get_ipython
 
         return get_ipython().__class__.__name__ == 'ZMQInteractiveShell'
-    except Exception:
-        pass
     return False
 
 
 def in_ipython() -> bool:
     """Return true if we're running in an IPython interactive shell."""
-    try:
+    with contextlib.suppress(ImportError):
         from IPython import get_ipython
 
         return get_ipython().__class__.__name__ == 'TerminalInteractiveShell'
-    except Exception:
-        pass
     return False
 
 
 def in_python_repl() -> bool:
     """Return true if we're running in a Python REPL."""
-    try:
+    with contextlib.suppress(ImportError):
         from IPython import get_ipython
 
         return get_ipython().__class__.__name__ == 'NoneType' and hasattr(
             sys, 'ps1'
         )
-    except Exception:
-        pass
     return False
 
 
diff --git a/napari/utils/mouse_bindings.py b/napari/utils/mouse_bindings.py
index 4b34ff43..56a794ec 100644
--- a/napari/utils/mouse_bindings.py
+++ b/napari/utils/mouse_bindings.py
@@ -21,7 +21,7 @@ class MousemapProvider:
     mouse_drag_callbacks: List[callable]
     mouse_double_click_callbacks: List[callable]
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
         # Hold callbacks for when mouse moves with nothing pressed
         self.mouse_move_callbacks = []
diff --git a/napari/utils/naming.py b/napari/utils/naming.py
index 6e35674f..f15dc0d7 100644
--- a/napari/utils/naming.py
+++ b/napari/utils/naming.py
@@ -84,7 +84,9 @@ class CallerFrame:
 
     """
 
-    def __init__(self, skip_predicate: Callable[[int, FrameType], bool]):
+    def __init__(
+        self, skip_predicate: Callable[[int, FrameType], bool]
+    ) -> None:
         self.predicate = skip_predicate
         self.namespace = {}
         self.names = ()
diff --git a/napari/utils/notebook_display.py b/napari/utils/notebook_display.py
index a86a6e6f..0180b5ab 100644
--- a/napari/utils/notebook_display.py
+++ b/napari/utils/notebook_display.py
@@ -52,7 +52,7 @@ class NotebookScreenshot:
         *,
         canvas_only=False,
         alt_text=None,
-    ):
+    ) -> None:
         """Initialize screenshot object.
 
         Parameters
diff --git a/napari/utils/notifications.py b/napari/utils/notifications.py
index b9fac5a9..0a5ffa07 100644
--- a/napari/utils/notifications.py
+++ b/napari/utils/notifications.py
@@ -108,7 +108,7 @@ class Notification(Event):
         ] = NotificationSeverity.WARNING,
         actions: ActionSequence = (),
         **kwargs,
-    ):
+    ) -> None:
         self.severity = NotificationSeverity(severity)
         super().__init__(type=str(self.severity).lower(), **kwargs)
         self._message = message
@@ -144,7 +144,7 @@ class ErrorNotification(Notification):
 
     exception: BaseException
 
-    def __init__(self, exception: BaseException, *args, **kwargs):
+    def __init__(self, exception: BaseException, *args, **kwargs) -> None:
         msg = getattr(exception, 'message', str(exception))
         actions = getattr(exception, 'actions', ())
         super().__init__(msg, NotificationSeverity.ERROR, actions)
@@ -193,7 +193,7 @@ class WarningNotification(Notification):
 
     def __init__(
         self, warning: Warning, filename=None, lineno=None, *args, **kwargs
-    ):
+    ) -> None:
         msg = getattr(warning, 'message', str(warning))
         actions = getattr(warning, 'actions', ())
         super().__init__(msg, NotificationSeverity.WARNING, actions)
@@ -308,11 +308,7 @@ class NotificationManager:
         if not self.catch_error:
             sys.__excepthook__(exctype, value, traceback)
             return
-
-        try:
-            self.dispatch(Notification.from_exception(value))
-        except Exception:
-            pass
+        self.dispatch(Notification.from_exception(value))
 
     def receive_warning(
         self,
@@ -401,7 +397,7 @@ def _setup_thread_excepthook():
         def run_with_except_hook(*args2, **kwargs2):
             try:
                 _run(*args2, **kwargs2)
-            except Exception:
+            except Exception:  # noqa BLE001
                 sys.excepthook(*sys.exc_info())
 
         self.run = run_with_except_hook
diff --git a/napari/utils/perf/_config.py b/napari/utils/perf/_config.py
index 73094d7f..87e2a2ac 100644
--- a/napari/utils/perf/_config.py
+++ b/napari/utils/perf/_config.py
@@ -17,7 +17,7 @@ PERFMON_ENV_VAR = "NAPARI_PERFMON"
 class PerfmonConfigError(Exception):
     """Error parsing or interpreting config file."""
 
-    def __init__(self, message):
+    def __init__(self, message) -> None:
         self.message = message
 
 
@@ -70,7 +70,7 @@ class PerfmonConfig:
     }
     """
 
-    def __init__(self, config_path: Optional[str]):
+    def __init__(self, config_path: Optional[str]) -> None:
         # Should only patch once, but it can't be on module load, user
         # should patch once main() as started running during startup.
         self.patched = False
@@ -105,7 +105,7 @@ class PerfmonConfig:
         """
         try:
             return self.data["callable_lists"][list_name]
-        except KeyError:
+        except KeyError as e:
             raise PerfmonConfigError(
                 trans._(
                     "{path} has no callable list '{list_name}'",
@@ -113,7 +113,7 @@ class PerfmonConfig:
                     path=self.config_path,
                     list_name=list_name,
                 )
-            )
+            ) from e
 
     def _patch_callables(self):
         """Add a perf_timer to every callable.
diff --git a/napari/utils/perf/_event.py b/napari/utils/perf/_event.py
index 9bb34ad0..2028b8f6 100644
--- a/napari/utils/perf/_event.py
+++ b/napari/utils/perf/_event.py
@@ -72,7 +72,7 @@ class PerfEvent:
         thread_id: int = None,
         phase: str = "X",  # "X" is a "complete event" in their spec.
         **kwargs: dict,
-    ):
+    ) -> None:
         if process_id is None:
             process_id = os.getpid()
         if thread_id is None:
diff --git a/napari/utils/perf/_patcher.py b/napari/utils/perf/_patcher.py
index 3f2282c3..d51070df 100644
--- a/napari/utils/perf/_patcher.py
+++ b/napari/utils/perf/_patcher.py
@@ -21,7 +21,7 @@ PatchFunction = Callable[[CallableParent, str, str], None]
 class PatchError(Exception):
     """Failed to patch target, config file error?"""
 
-    def __init__(self, message):
+    def __init__(self, message) -> None:
         self.message = message
 
 
@@ -56,7 +56,7 @@ def _patch_attribute(
         class_str, callable_str = attribute_str.split('.')
         try:
             parent = getattr(module, class_str)
-        except AttributeError:
+        except AttributeError as e:
             raise PatchError(
                 trans._(
                     "Module {module_name} has no attribute {attribute_str}",
@@ -64,7 +64,7 @@ def _patch_attribute(
                     module_name=module.__name__,
                     attribute_str=attribute_str,
                 )
-            )
+            ) from e
         parent_str = class_str
     else:
         # Assume attribute_str is <function>.
@@ -75,7 +75,7 @@ def _patch_attribute(
 
     try:
         getattr(parent, callable_str)
-    except AttributeError:
+    except AttributeError as e:
         raise PatchError(
             trans._(
                 "Parent {parent_str} has no attribute {callable_str}",
@@ -83,7 +83,7 @@ def _patch_attribute(
                 parent_str=parent_str,
                 callable_str=callable_str,
             )
-        )
+        ) from e
 
     label = (
         callable_str if class_str is None else f"{class_str}.{callable_str}"
@@ -128,7 +128,7 @@ def _import_module(target_str: str) -> Tuple[types.ModuleType, str]:
         module_path = '.'.join(parts[:i])
         try:
             module = import_module(module_path)
-        except ModuleNotFoundError:
+        except ModuleNotFoundError as e:
             if module is None:
                 # The very first top-level module import failed!
                 raise PatchError(
@@ -137,7 +137,7 @@ def _import_module(target_str: str) -> Tuple[types.ModuleType, str]:
                         deferred=True,
                         module_path=module_path,
                     )
-                )
+                ) from e
 
             # We successfully imported part of the target_str but then
             # we got a failure. Usually this is because we tried
diff --git a/napari/utils/perf/_stat.py b/napari/utils/perf/_stat.py
index cb0c0945..37d2a3d2 100644
--- a/napari/utils/perf/_stat.py
+++ b/napari/utils/perf/_stat.py
@@ -22,7 +22,7 @@ class Stat:
         How many values we've seen.
     """
 
-    def __init__(self, value: int):
+    def __init__(self, value: int) -> None:
         """Create Stat with an initial value.
 
         Parameters
diff --git a/napari/utils/perf/_timers.py b/napari/utils/perf/_timers.py
index 675eec63..9ec1a70b 100644
--- a/napari/utils/perf/_timers.py
+++ b/napari/utils/perf/_timers.py
@@ -44,7 +44,7 @@ class PerfTimers:
     chrome://tracing GUI to see the full story.
     """
 
-    def __init__(self):
+    def __init__(self) -> None:
         """Create PerfTimers."""
         # Maps a timer name to one Stat object.
         self.timers: Dict[str, Stat] = {}
diff --git a/napari/utils/perf/_trace_file.py b/napari/utils/perf/_trace_file.py
index 4af68a13..ca2b8ca6 100644
--- a/napari/utils/perf/_trace_file.py
+++ b/napari/utils/perf/_trace_file.py
@@ -2,9 +2,10 @@
 """
 import json
 from time import perf_counter_ns
-from typing import List
+from typing import TYPE_CHECKING, List
 
-from napari.utils.perf._event import PerfEvent
+if TYPE_CHECKING:
+    from napari.utils.perf._event import PerfEvent
 
 
 class PerfTraceFile:
@@ -34,7 +35,7 @@ class PerfTraceFile:
     https://chromium.googlesource.com/catapult/+/HEAD/tracing/README.md
     """
 
-    def __init__(self, output_path: str):
+    def __init__(self, output_path: str) -> None:
         """Store events in memory and write to the file when done."""
         self.output_path = output_path
 
@@ -43,9 +44,9 @@ class PerfTraceFile:
 
         # Accumulate events in a list and only write at the end so the cost
         # of writing to a file does not bloat our timings.
-        self.events: List[PerfEvent] = []
+        self.events: List["PerfEvent"] = []
 
-    def add_event(self, event: PerfEvent) -> None:
+    def add_event(self, event: "PerfEvent") -> None:
         """Add one perf event to our in-memory list.
 
         Parameters
@@ -61,7 +62,7 @@ class PerfTraceFile:
         with open(self.output_path, "w") as outf:
             json.dump(event_data, outf)
 
-    def _get_event_data(self, event: PerfEvent) -> dict:
+    def _get_event_data(self, event: "PerfEvent") -> dict:
         """Return the data for one perf event.
 
         Parameters
diff --git a/napari/utils/stubgen.py b/napari/utils/stubgen.py
index 1cbbc865..c66b58f8 100644
--- a/napari/utils/stubgen.py
+++ b/napari/utils/stubgen.py
@@ -24,6 +24,7 @@ callable methods will be stubbed.
 """
 import importlib
 import inspect
+import subprocess
 import textwrap
 import typing
 import warnings
@@ -35,9 +36,8 @@ from typing_extensions import get_args, get_origin
 PYI_TEMPLATE = """
 # THIS FILE IS AUTOGENERATED BY napari.utils.stubgen
 # DO NOT EDIT
-# flake8: noqa
 
-from typing import *
+from typing import List, Union, Mapping, Sequence, Tuple, Dict, Set, Any 
 {imports}
 
 {body}
@@ -188,12 +188,16 @@ def generate_module_stub(module: Union[str, ModuleType], save=True) -> str:
     body = '\n'.join(stubs)
     pyi = PYI_TEMPLATE.format(imports=importstr, body=body)
     # format with black and isort
-    pyi = _format_module_str(pyi)
+    # pyi = _format_module_str(pyi)
+    pyi = pyi.replace("NoneType", "None")
 
     if save:
         print("Writing stub:", module.__file__.replace(".py", ".pyi"))
-        with open(module.__file__.replace(".py", ".pyi"), 'w') as f:
+        file_path = module.__file__.replace(".py", ".pyi")
+        with open(file_path, 'w') as f:
             f.write(pyi)
+        subprocess.run(["ruff", file_path])
+        subprocess.run(["black", file_path])
 
     return pyi
 
diff --git a/napari/utils/theme.py b/napari/utils/theme.py
index 48c34ba7..198c292c 100644
--- a/napari/utils/theme.py
+++ b/napari/utils/theme.py
@@ -23,9 +23,10 @@ from napari.utils.translations import trans
 try:
     from qtpy import QT_VERSION
 
-    major, minor, *rest = QT_VERSION.split('.')
+    major, minor, *_ = QT_VERSION.split('.')
     use_gradients = (int(major) >= 5) and (int(minor) >= 12)
-except Exception:
+    del major, minor, QT_VERSION
+except ImportError:
     use_gradients = False
 
 
@@ -180,11 +181,11 @@ def template(css: str, **theme):
 def get_system_theme() -> str:
     """Return the system default theme, either 'dark', or 'light'."""
     try:
-        id = darkdetect.theme().lower()
-    except Exception:
-        id = "dark"
+        id_ = darkdetect.theme().lower()
+    except AttributeError:
+        id_ = "dark"
 
-    return id
+    return id_
 
 
 def get_theme(id, as_dict=None):
diff --git a/napari/utils/transforms/transforms.py b/napari/utils/transforms/transforms.py
index 759585b5..090a1743 100644
--- a/napari/utils/transforms/transforms.py
+++ b/napari/utils/transforms/transforms.py
@@ -34,7 +34,7 @@ class Transform:
         A string name for the transform.
     """
 
-    def __init__(self, func=tz.identity, inverse=None, name=None):
+    def __init__(self, func=tz.identity, inverse=None, name=None) -> None:
         self.func = func
         self._inverse_func = inverse
         self.name = name
@@ -110,7 +110,7 @@ class Transform:
 
 
 class TransformChain(EventedList, Transform):
-    def __init__(self, transforms=None):
+    def __init__(self, transforms=None) -> None:
         if transforms is None:
             transforms = []
         super().__init__(
@@ -205,7 +205,7 @@ class ScaleTranslate(Transform):
         A string name for the transform.
     """
 
-    def __init__(self, scale=(1.0,), translate=(0.0,), *, name=None):
+    def __init__(self, scale=(1.0,), translate=(0.0,), *, name=None) -> None:
         super().__init__(name=name)
 
         if len(scale) > len(translate):
@@ -369,7 +369,7 @@ class Affine(Transform):
         affine_matrix=None,
         ndim=None,
         name=None,
-    ):
+    ) -> None:
         super().__init__(name=name)
         self._upper_triangular = True
         if ndim is None:
@@ -698,7 +698,7 @@ class CompositeAffine(Affine):
         shear=None,
         ndim=None,
         name=None,
-    ):
+    ) -> None:
         super().__init__(
             scale, translate, rotate=rotate, shear=shear, ndim=ndim, name=name
         )
diff --git a/napari/utils/translations.py b/napari/utils/translations.py
index d3d395a8..f058c83a 100644
--- a/napari/utils/translations.py
+++ b/napari/utils/translations.py
@@ -217,7 +217,7 @@ class TranslationString(str):
         n: Optional[str] = None,
         deferred: bool = False,
         **kwargs,
-    ):
+    ) -> None:
         if msgid is None:
             raise ValueError(
                 trans._("Must provide at least a `msgid` parameter!")
@@ -320,7 +320,7 @@ class TranslationBundle:
         The locale for this bundle. Examples include "en_US", "en_CO".
     """
 
-    def __init__(self, domain: str, locale: str):
+    def __init__(self, domain: str, locale: str) -> None:
         self._domain = domain
         self._locale = locale
 
@@ -678,7 +678,7 @@ def _load_language(
         with open(default_config_path) as fh:
             try:
                 data = safe_load(fh) or {}
-            except Exception as err:
+            except Exception as err:  # noqa BLE001
                 import warnings
 
                 warnings.warn(
diff --git a/napari/utils/tree/group.py b/napari/utils/tree/group.py
index b3d21de2..d84dc389 100644
--- a/napari/utils/tree/group.py
+++ b/napari/utils/tree/group.py
@@ -1,13 +1,15 @@
 from __future__ import annotations
 
-from typing import Generator, Iterable, List, TypeVar, Union
+from typing import TYPE_CHECKING, Generator, Iterable, List, TypeVar, Union
 
-from napari.utils.events.containers._nested_list import MaybeNestedIndex
 from napari.utils.events.containers._selectable_list import (
     SelectableNestableEventedList,
 )
 from napari.utils.tree.node import Node
 
+if TYPE_CHECKING:
+    from napari.utils.events.containers._nested_list import MaybeNestedIndex
+
 NodeType = TypeVar("NodeType", bound=Node)
 
 
@@ -39,7 +41,7 @@ class Group(Node, SelectableNestableEventedList[NodeType]):
         children: Iterable[NodeType] = (),
         name: str = "Group",
         basetype=Node,
-    ):
+    ) -> None:
         Node.__init__(self, name=name)
         SelectableNestableEventedList.__init__(
             self,
@@ -71,7 +73,7 @@ class Group(Node, SelectableNestableEventedList[NodeType]):
     def __getitem__(self, key) -> Union[NodeType, Group[NodeType]]:
         return super().__getitem__(key)
 
-    def __delitem__(self, key: MaybeNestedIndex):
+    def __delitem__(self, key: "MaybeNestedIndex"):
         """Remove item at ``key``, and unparent."""
         if isinstance(key, (int, tuple)):
             self[key].parent = None  # type: ignore
diff --git a/napari/utils/tree/node.py b/napari/utils/tree/node.py
index c00a87c3..7f85f38b 100644
--- a/napari/utils/tree/node.py
+++ b/napari/utils/tree/node.py
@@ -28,7 +28,7 @@ class Node:
         The parent of this Node.
     """
 
-    def __init__(self, name: str = "Node"):
+    def __init__(self, name: str = "Node") -> None:
         self.parent: Optional[Group] = None
         self._name = name
 
diff --git a/napari/view_layers.py b/napari/view_layers.py
index 6e03dbed..10743113 100644
--- a/napari/view_layers.py
+++ b/napari/view_layers.py
@@ -247,7 +247,7 @@ def imshow(
     order=(),
     axis_labels=(),
     show=True,
-) -> Tuple[Viewer, List[Image]]:
+) -> Tuple[Viewer, List["Image"]]:
     """Load data into an Image layer and return the Viewer and Layer.
 
     Parameters
diff --git a/napari/viewer.py b/napari/viewer.py
index 8329ada5..f0775769 100644
--- a/napari/viewer.py
+++ b/napari/viewer.py
@@ -47,7 +47,7 @@ class Viewer(ViewerModel):
         order=(),
         axis_labels=(),
         show=True,
-    ):
+    ) -> None:
         super().__init__(
             title=title,
             ndisplay=ndisplay,
diff --git a/napari/window.py b/napari/window.py
index 926ffd53..ce9127a0 100644
--- a/napari/window.py
+++ b/napari/window.py
@@ -18,7 +18,7 @@ except ImportError as e:
     err = e
 
     class Window:  # type: ignore
-        def __init__(self, *args, **kwargs):
+        def __init__(self, *args, **kwargs) -> None:
             pass
 
         def close(self):
diff --git a/napari_builtins/io/_read.py b/napari_builtins/io/_read.py
index 22c8206e..29bdb2fa 100644
--- a/napari_builtins/io/_read.py
+++ b/napari_builtins/io/_read.py
@@ -6,17 +6,19 @@ import urllib.parse
 from contextlib import contextmanager, suppress
 from glob import glob
 from pathlib import Path
-from typing import List, Optional, Sequence, Tuple, Union
+from typing import TYPE_CHECKING, List, Optional, Sequence, Tuple, Union
 from urllib.error import HTTPError, URLError
 
 import dask.array as da
 import numpy as np
 from dask import delayed
 
-from napari.types import FullLayerData, LayerData, ReaderFunction
 from napari.utils.misc import abspath_or_url
 from napari.utils.translations import trans
 
+if TYPE_CHECKING:
+    from napari.types import FullLayerData, LayerData, ReaderFunction
+
 try:
     import imageio.v2 as imageio
 except ModuleNotFoundError:
@@ -259,7 +261,7 @@ def magic_imread(
 
 def _points_csv_to_layerdata(
     table: np.ndarray, column_names: List[str]
-) -> FullLayerData:
+) -> "FullLayerData":
     """Convert table data and column names from a csv file to Points LayerData.
 
     Parameters
@@ -299,7 +301,7 @@ def _points_csv_to_layerdata(
 
 def _shapes_csv_to_layerdata(
     table: np.ndarray, column_names: List[str]
-) -> FullLayerData:
+) -> "FullLayerData":
     """Convert table data and column names from a csv file to Shapes LayerData.
 
     Parameters
@@ -434,7 +436,7 @@ csv_reader_functions = {
 
 def csv_to_layer_data(
     path: str, require_type: Optional[str] = None
-) -> Optional[FullLayerData]:
+) -> Optional["FullLayerData"]:
     """Return layer data from a CSV file if detected as a valid type.
 
     Parameters
@@ -475,7 +477,7 @@ def csv_to_layer_data(
     return None  # only reachable if it is a valid layer type without a reader
 
 
-def _csv_reader(path: Union[str, Sequence[str]]) -> List[LayerData]:
+def _csv_reader(path: Union[str, Sequence[str]]) -> List["LayerData"]:
     if isinstance(path, str):
         layer_data = csv_to_layer_data(path, require_type=None)
         return [layer_data] if layer_data else []
@@ -486,11 +488,13 @@ def _csv_reader(path: Union[str, Sequence[str]]) -> List[LayerData]:
     ]
 
 
-def _magic_imreader(path: str) -> List[LayerData]:
+def _magic_imreader(path: str) -> List["LayerData"]:
     return [(magic_imread(path),)]
 
 
-def napari_get_reader(path: Union[str, List[str]]) -> Optional[ReaderFunction]:
+def napari_get_reader(
+    path: Union[str, List[str]]
+) -> Optional["ReaderFunction"]:
     """Our internal fallback file reader at the end of the reader plugin chain.
 
     This will assume that the filepath is an image, and will pass all of the
diff --git a/napari_builtins/io/_write.py b/napari_builtins/io/_write.py
index 8b63944d..2dbacb77 100644
--- a/napari_builtins/io/_write.py
+++ b/napari_builtins/io/_write.py
@@ -2,14 +2,16 @@ import csv
 import os
 import shutil
 from tempfile import TemporaryDirectory
-from typing import Any, List, Optional, Tuple, Union
+from typing import TYPE_CHECKING, Any, List, Optional, Tuple, Union
 
 import numpy as np
 
-from napari.types import FullLayerData
 from napari.utils.io import imsave
 from napari.utils.misc import abspath_or_url
 
+if TYPE_CHECKING:
+    from napari.types import FullLayerData
+
 
 def write_csv(
     filename: str,
@@ -266,7 +268,7 @@ def napari_write_shapes(path: str, data: Any, meta: dict) -> Optional[str]:
 
 
 def write_layer_data_with_plugins(
-    path: str, layer_data: List[FullLayerData]
+    path: str, layer_data: List["FullLayerData"]
 ) -> List[str]:
     """Write layer data out into a folder one layer at a time.
 
diff --git a/pyproject.toml b/pyproject.toml
index 3bc315ad..1077eddb 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -71,16 +71,43 @@ ignore = [
   "napari/resources/icons/_themes/*/*.svg"
 ]
 
-[tool.isort]
-profile = "black"
-line_length = 79
-skip_glob = ["*examples/*", "*vendored*", "*_vendor*"]
-
 [tool.ruff]
-line-length = 120
-ignore = ["E501"]
-per-file-ignores = {"napari/_vispy/__init__.py" = ["E402"]}
+line-length = 79
+select = ["E", "F", "UP", "I", "W", "YTT", "TCH", "BLE", "B"]
+ignore = ["E501", "UP006", "UP007", "TCH001", "TCH002", "TCH003"]
+
+exclude = [
+    ".bzr",
+    ".direnv",
+    ".eggs",
+    ".git",
+    ".mypy_cache",
+    ".pants.d",
+    ".ruff_cache",
+    ".svn",
+    ".tox",
+    ".venv",
+    "__pypackages__",
+    "_build",
+    "buck-out",
+    "build",
+    "dist",
+    "node_modules",
+    "venv",
+    "*vendored*",
+    "*_vendor*",
+]
+
 target-version = "py38"
+fix = true
+
+[tool.ruff.per-file-ignores]
+"napari/_vispy/__init__.py" = ["E402"]
+"**/_tests/*.py" = ["B011"]
+"napari/utils/_testsupport.py" = ["B011"]
+
+[tool.ruff.isort]
+known-first-party=['napari']
 
 [tool.pytest.ini_options]
 # These follow standard library warnings filters syntax.  See more here:
diff --git a/setup.cfg b/setup.cfg
index 4868e414..662e1454 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -129,8 +129,6 @@ release =
 dev =
     black
     check-manifest>=0.42
-    flake8
-    isort
     pre-commit>=2.9.0
     pydantic[dotenv]
     rich
@@ -153,7 +151,7 @@ docs =
     qtgallery
 build =
     black
-    isort
+    ruff
     pyqt5
 bundle_build =
     briefcase==0.3.1
@@ -181,17 +179,6 @@ pytest11 =
 napari.manifest =
     napari_builtins = napari_builtins:builtins.yaml
 
-[flake8]
-# Ignores - https://lintlyci.github.io/Flake8Rules
-# E203  Whitespace before ':'  (sometimes conflicts with black)
-# E501 line too long (84 > 79 characters)  (sometimes too annoying)
-# W503	Line break occurred before a binary operator
-# C901 McCabe complexity test. Would be nice to re-enable, but takes work
-ignore = E203,W503,E501,C901,D401
-max-line-length = 79
-max-complexity = 18
-exclude = _vendor,vendored,__init__.py,examples,benchmarks,napari/resources/_qt_resources*.py
-
 
 [coverage:report]
 exclude_lines =
diff --git a/tools/test_strings.py b/tools/test_strings.py
index d039ba5e..3200c35b 100644
--- a/tools/test_strings.py
+++ b/tools/test_strings.py
@@ -27,6 +27,7 @@ import sys
 import termios
 import tokenize
 import tty
+from contextlib import suppress
 from pathlib import Path
 from types import ModuleType
 from typing import Dict, List, Optional, Set, Tuple
@@ -51,7 +52,7 @@ TranslationErrorsDict = Dict[str, List[Tuple[str, str]]]
 class FindTransStrings(ast.NodeVisitor):
     """This node visitor finds translated strings."""
 
-    def __init__(self):
+    def __init__(self) -> None:
         super().__init__()
 
         self._found = set()
@@ -113,24 +114,17 @@ class FindTransStrings(ast.NodeVisitor):
 
     def visit_Call(self, node):
         method_name, args, kwargs = "", [], []
-        try:
+        with suppress(AttributeError):
             if node.func.value.id == "trans":
                 method_name = node.func.attr
-
                 # Args
-                args = []
                 for item in [arg.value for arg in node.args]:
                     args.append(item)
                     self._found.add(item)
-
                 # Kwargs
-                kwargs = []
-                for item in [kw.arg for kw in node.keywords]:
-                    if item != "deferred":
-                        kwargs.append(item)
-
-        except Exception:
-            pass
+                kwargs = [
+                    kw.arg for kw in node.keywords if kw.arg != "deferred"
+                ]
 
         if method_name:
             self._check_vars(method_name, args, kwargs)
@@ -147,7 +141,7 @@ show_trans_strings = FindTransStrings()
 
 
 def _find_func_definitions(
-    node: ast.AST, defs: List[ast.FunctionDef] = []
+    node: ast.AST, defs: List[ast.FunctionDef] = None
 ) -> List[ast.FunctionDef]:
     """Find all functions definition recrusively.
 
@@ -167,9 +161,12 @@ def _find_func_definitions(
     """
     try:
         body = node.body
-    except Exception:
+    except AttributeError:
         body = []
 
+    if defs is None:
+        defs = []
+
     for node in body:
         _find_func_definitions(node, defs=defs)
         if isinstance(node, ast.FunctionDef):
@@ -347,7 +344,7 @@ def find_strings(fpath: str) -> Dict[Tuple[int, str], Tuple[int, str]]:
             if toktype == tokenize.STRING:
                 try:
                     string = eval(tokstr)
-                except Exception:
+                except Exception:  # noqa BLE001
                     string = eval(tokstr[1:])
 
                 if isinstance(string, str):
@@ -410,7 +407,7 @@ def import_module_by_path(fpath: str) -> Optional[ModuleType]:
         spec = importlib.util.spec_from_file_location(module_name, fpath)
         module = importlib.util.module_from_spec(spec)
         spec.loader.exec_module(module)
-    except Exception:
+    except ImportError:
         module = None
 
     return module
@@ -455,7 +452,7 @@ def find_issues(
         module = import_module_by_path(fpath)
         try:
             __all__strings = module.__all__
-        except Exception:
+        except AttributeError:
             __all__strings = []
 
         for key in strings:
diff --git a/tox.ini b/tox.ini
index c596c725..a7b6ee89 100644
--- a/tox.ini
+++ b/tox.ini
@@ -106,17 +106,10 @@ commands =
 commands =
     python -m pytest napari/_tests/test_examples.py -v --color=yes --basetemp={envtmpdir} {posargs}
 
-[testenv:isort]
+[testenv:ruff]
 skip_install = True
 deps = pre-commit
-commands = pre-commit run isort --all-files
-
-
-[testenv:flake8]
-skip_install = True
-deps = pre-commit
-commands = pre-commit run flake8 --all-files
-
+commands = pre-commit run ruff --all-files
 
 [testenv:black]
 skip_install = True
-- 
2.34.1

