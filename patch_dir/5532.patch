From ce458f79cc867b0c12d4e5bfffbe0fb6b3baee8b Mon Sep 17 00:00:00 2001
From: Matthias Bussonnier <bussonniermatthias@gmail.com>
Date: Fri, 17 Feb 2023 14:18:48 +0100
Subject: [PATCH] MAINT: Follow Nep29, bump minimum numpy. (#5532)

Co-authored-by: Peter Sobolewski <76622105+psobolewskiPhD@users.noreply.github.com>
---
 README.md                        |  1 +
 napari/_tests/utils.py           |  5 -----
 napari/layers/_data_protocols.py |  2 +-
 napari/types.py                  | 34 +-------------------------------
 setup.cfg                        |  2 +-
 5 files changed, 4 insertions(+), 40 deletions(-)

diff --git a/README.md b/README.md
index 7b3352a7..dfb7d662 100644
--- a/README.md
+++ b/README.md
@@ -13,6 +13,7 @@
 [![Development Status](https://img.shields.io/pypi/status/napari.svg)](https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha)
 [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)
 [![DOI](https://zenodo.org/badge/144513571.svg)](https://zenodo.org/badge/latestdoi/144513571)
+[![NEP29](https://raster.shields.io/badge/Follows-NEP29-brightgreen.png)](https://numpy.org/neps/nep-0029-deprecation_policy.html)
 
 **napari** is a fast, interactive, multi-dimensional image viewer for Python. It's designed for browsing, annotating, and analyzing large multi-dimensional images. It's built on top of Qt (for the GUI), vispy (for performant GPU-based rendering), and the scientific Python stack (numpy, scipy).
 
diff --git a/napari/_tests/utils.py b/napari/_tests/utils.py
index dd44f6ba..76e8474f 100644
--- a/napari/_tests/utils.py
+++ b/napari/_tests/utils.py
@@ -145,11 +145,6 @@ def are_objects_equal(object1, object2):
         items = [(object1, object2)]
 
     # equal_nan does not exist in array_equal in old numpy
-    npy_major_version = tuple(int(v) for v in np.__version__.split('.')[:2])
-    if npy_major_version < (1, 19):
-        fixed = [(np.nan_to_num(a1), np.nan_to_num(a2)) for a1, a2 in items]
-        return np.all([np.all(a1 == a2) for a1, a2 in fixed])
-
     try:
         return np.all(
             [np.array_equal(a1, a2, equal_nan=True) for a1, a2 in items]
diff --git a/napari/layers/_data_protocols.py b/napari/layers/_data_protocols.py
index 6204838d..59037436 100644
--- a/napari/layers/_data_protocols.py
+++ b/napari/layers/_data_protocols.py
@@ -19,7 +19,7 @@ _OBJ_NAMES.update({'__annotations__', '__dict__', '__weakref__'})
 if TYPE_CHECKING:
     from enum import Enum
 
-    from napari.types import DTypeLike
+    from numpy.typing import DTypeLike
 
     # https://github.com/python/typing/issues/684#issuecomment-548203158
     class ellipsis(Enum):
diff --git a/napari/types.py b/napari/types.py
index c227b8f1..e6143754 100644
--- a/napari/types.py
+++ b/napari/types.py
@@ -24,29 +24,6 @@ if TYPE_CHECKING:
     from magicgui.widgets import FunctionGui
     from qtpy.QtWidgets import QWidget
 
-try:
-    from numpy.typing import DTypeLike  # requires numpy 1.20
-except ImportError:
-    # Anything that can be coerced into numpy.dtype.
-    # Reference: https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html
-    from typing import Protocol, TypeVar
-
-    _DType_co = TypeVar("_DType_co", covariant=True, bound=np.dtype)
-
-    # A protocol for anything with the dtype attribute
-    class _SupportsDType(Protocol[_DType_co]):
-        @property
-        def dtype(self) -> _DType_co:
-            ...
-
-    DTypeLike = Union[  # type: ignore
-        np.dtype,  # default data type (float64)
-        None,
-        type,  # array-scalar types and generic types
-        _SupportsDType[np.dtype],  # anything with a dtype attribute
-        str,  # character codes, type strings, e.g. 'float64'
-    ]
-
 
 # This is a WOEFULLY inadequate stub for a duck-array type.
 # Mostly, just a placeholder for the concept of needing an ArrayLike type.
@@ -95,16 +72,7 @@ class SampleDict(TypedDict):
 # while their names should not change (without deprecation), their typing
 # implementations may... or may be rolled over to napari/image-types
 
-if tuple(np.__version__.split('.')) < ('1', '20'):
-    # this hack is because NewType doesn't allow `Any` as a base type
-    # and numpy <=1.20 didn't provide type stubs for np.ndarray
-    # https://github.com/python/mypy/issues/6701#issuecomment-609638202
-    class ArrayBase(np.ndarray):
-        def __getattr__(self, name: str) -> Any:
-            return object.__getattribute__(self, name)
-
-else:
-    ArrayBase = np.ndarray  # type: ignore
+ArrayBase = np.ndarray
 
 
 ImageData = NewType("ImageData", ArrayBase)
diff --git a/setup.cfg b/setup.cfg
index 2dfeaade..7f51cde9 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -54,7 +54,7 @@ install_requires =
     napari-plugin-engine>=0.1.9
     napari-svg>=0.1.6
     npe2>=0.5.2
-    numpy>=1.20
+    numpy>=1.21
     numpydoc>=0.9.2
     pandas>=1.1.0 ; python_version < '3.9'
     pandas>=1.3.0 ; python_version >= '3.9'
-- 
2.34.1

