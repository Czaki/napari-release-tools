From 208db6019fec379124ba7c296c55ddee5ea6a1d1 Mon Sep 17 00:00:00 2001
From: Grzegorz Bokota <bokota+github@gmail.com>
Date: Wed, 9 Nov 2022 22:32:02 +0100
Subject: [PATCH] Make all imports absolute (#5318)

---
 .pre-commit-config.yaml                       |  4 +
 napari/__init__.py                            |  4 +-
 napari/__main__.py                            |  8 +-
 napari/_app_model/__init__.py                 |  2 +-
 napari/_app_model/_app.py                     | 10 +-
 napari/_app_model/_submenus.py                |  4 +-
 napari/_app_model/actions/_layer_actions.py   |  6 +-
 napari/_app_model/actions/_toggle_action.py   |  2 +-
 napari/_app_model/actions/_view_actions.py    |  6 +-
 napari/_app_model/constants/__init__.py       |  4 +-
 napari/_app_model/constants/_commands.py      |  2 +-
 napari/_app_model/context/__init__.py         |  8 +-
 napari/_app_model/context/_context.py         |  6 +-
 napari/_app_model/context/_context_keys.py    |  2 +-
 .../_app_model/context/_layerlist_context.py  | 14 +--
 napari/_app_model/injection/_processors.py    |  8 +-
 napari/_app_model/injection/_providers.py     |  2 +-
 napari/_event_loop.py                         |  2 +-
 napari/_qt/__init__.py                        |  6 +-
 napari/_qt/_qapp_model/__init__.py            |  2 +-
 napari/_qt/_qapp_model/_menus.py              |  2 +-
 napari/_qt/_qapp_model/qactions/__init__.py   | 10 +-
 napari/_qt/_qapp_model/qactions/_help.py      |  8 +-
 napari/_qt/_qapp_model/qactions/_view.py      | 10 +-
 napari/_qt/containers/__init__.py             | 14 +--
 napari/_qt/containers/_base_item_model.py     |  6 +-
 napari/_qt/containers/_base_item_view.py      | 10 +-
 napari/_qt/containers/_factory.py             | 16 ++--
 napari/_qt/containers/_layer_delegate.py      | 14 +--
 napari/_qt/containers/qt_layer_list.py        | 15 +--
 napari/_qt/containers/qt_layer_model.py       |  4 +-
 napari/_qt/containers/qt_list_model.py        |  2 +-
 napari/_qt/containers/qt_list_view.py         |  6 +-
 napari/_qt/containers/qt_tree_model.py        |  6 +-
 napari/_qt/containers/qt_tree_view.py         |  6 +-
 napari/_qt/dialogs/preferences_dialog.py      | 12 ++-
 napari/_qt/dialogs/qt_about.py                |  4 +-
 napari/_qt/dialogs/qt_activity_dialog.py      | 10 +-
 napari/_qt/dialogs/qt_modal.py                |  2 +-
 napari/_qt/dialogs/qt_notification.py         | 24 ++---
 napari/_qt/dialogs/qt_plugin_dialog.py        | 33 ++++---
 napari/_qt/dialogs/qt_plugin_report.py        | 12 +--
 napari/_qt/dialogs/qt_reader_dialog.py        |  3 +-
 napari/_qt/dialogs/screenshot_dialog.py       |  4 +-
 napari/_qt/experimental/qt_chunk_receiver.py  |  4 +-
 napari/_qt/experimental/qt_poll.py            |  2 +-
 napari/_qt/layer_controls/__init__.py         |  4 +-
 .../layer_controls/qt_colormap_combobox.py    |  2 +-
 .../_qt/layer_controls/qt_image_controls.py   | 14 +--
 .../layer_controls/qt_image_controls_base.py  | 18 ++--
 .../_qt/layer_controls/qt_labels_controls.py  | 23 +++--
 .../layer_controls/qt_layer_controls_base.py  |  8 +-
 .../qt_layer_controls_container.py            | 30 +++---
 .../_qt/layer_controls/qt_points_controls.py  | 21 ++--
 .../_qt/layer_controls/qt_shapes_controls.py  | 23 +++--
 .../_qt/layer_controls/qt_surface_controls.py |  8 +-
 .../_qt/layer_controls/qt_tracks_controls.py  |  8 +-
 .../_qt/layer_controls/qt_vectors_controls.py | 10 +-
 napari/_qt/menus/__init__.py                  |  8 +-
 napari/_qt/menus/_util.py                     |  2 +-
 napari/_qt/menus/debug_menu.py                | 10 +-
 napari/_qt/menus/file_menu.py                 | 25 +++--
 napari/_qt/menus/plugins_menu.py              | 18 ++--
 napari/_qt/menus/window_menu.py               |  6 +-
 napari/_qt/perf/qt_event_tracing.py           |  4 +-
 napari/_qt/perf/qt_performance.py             |  4 +-
 napari/_qt/qt_event_filters.py                |  2 +-
 napari/_qt/qt_event_loop.py                   | 40 ++++----
 napari/_qt/qt_main_window.py                  | 54 +++++------
 napari/_qt/qt_resources/__init__.py           |  6 +-
 napari/_qt/qt_resources/_svg.py               |  6 +-
 napari/_qt/qt_viewer.py                       | 95 +++++++++++--------
 napari/_qt/qthreading.py                      | 20 ++--
 napari/_qt/utils.py                           |  8 +-
 napari/_qt/widgets/qt_color_swatch.py         |  8 +-
 napari/_qt/widgets/qt_dict_table.py           |  2 +-
 napari/_qt/widgets/qt_dims.py                 |  8 +-
 napari/_qt/widgets/qt_dims_slider.py          | 14 +--
 napari/_qt/widgets/qt_dims_sorter.py          | 12 +--
 napari/_qt/widgets/qt_extension2reader.py     |  5 +-
 napari/_qt/widgets/qt_highlight_preview.py    |  2 +-
 napari/_qt/widgets/qt_keyboard_settings.py    | 12 +--
 napari/_qt/widgets/qt_message_popup.py        |  4 +-
 napari/_qt/widgets/qt_plugin_sorter.py        | 10 +-
 napari/_qt/widgets/qt_progress_bar.py         |  2 +-
 napari/_qt/widgets/qt_range_slider_popup.py   |  2 +-
 napari/_qt/widgets/qt_size_preview.py         |  2 +-
 napari/_qt/widgets/qt_splash_screen.py        |  2 +-
 napari/_qt/widgets/qt_theme_sample.py         | 10 +-
 napari/_qt/widgets/qt_viewer_buttons.py       | 18 ++--
 napari/_qt/widgets/qt_viewer_dock_widget.py   |  6 +-
 napari/_qt/widgets/qt_viewer_status_bar.py    |  6 +-
 napari/_qt/widgets/qt_welcome.py              |  6 +-
 napari/_vendor/darkdetect/__init__.py         | 12 +--
 .../experimental/cachetools/__init__.py       |  2 +-
 .../cachetools/cachetools/__init__.py         | 12 +--
 .../cachetools/cachetools/cache.py            |  2 +-
 .../cachetools/cachetools/decorators.py       |  2 +-
 .../cachetools/cachetools/func.py             | 10 +-
 .../experimental/cachetools/cachetools/lfu.py |  2 +-
 .../experimental/cachetools/cachetools/lru.py |  2 +-
 .../experimental/cachetools/cachetools/rr.py  |  2 +-
 .../experimental/cachetools/cachetools/ttl.py |  2 +-
 .../humanize/src/humanize/__init__.py         |  8 +-
 .../humanize/src/humanize/number.py           |  6 +-
 .../humanize/src/humanize/time.py             |  4 +-
 .../qt_jsonschema_form/__init__.py            |  2 +-
 .../qt_jsonschema_form/form.py                |  4 +-
 .../qt_jsonschema_form/widgets.py             | 16 ++--
 napari/_vispy/__init__.py                     | 16 ++--
 napari/_vispy/camera.py                       |  2 +-
 napari/_vispy/canvas.py                       |  6 +-
 napari/_vispy/experimental/texture_atlas.py   |  8 +-
 napari/_vispy/experimental/tile_grid.py       |  2 +-
 napari/_vispy/experimental/tile_set.py        |  4 +-
 .../_vispy/experimental/tiled_image_visual.py | 10 +-
 .../experimental/vispy_tiled_image_layer.py   | 14 +--
 napari/_vispy/layers/base.py                  |  4 +-
 napari/_vispy/layers/image.py                 | 12 +--
 napari/_vispy/layers/labels.py                |  2 +-
 napari/_vispy/layers/points.py                | 14 +--
 napari/_vispy/layers/shapes.py                | 12 +--
 napari/_vispy/layers/surface.py               |  4 +-
 napari/_vispy/layers/tracks.py                |  4 +-
 napari/_vispy/layers/vectors.py               |  6 +-
 napari/_vispy/overlays/axes.py                |  6 +-
 napari/_vispy/overlays/base.py                |  6 +-
 napari/_vispy/overlays/interaction_box.py     |  2 +-
 napari/_vispy/overlays/scale_bar.py           | 10 +-
 napari/_vispy/overlays/text.py                |  4 +-
 napari/_vispy/utils/gl.py                     |  2 +-
 napari/_vispy/utils/visual.py                 | 28 +++---
 napari/_vispy/visuals/axes.py                 |  6 +-
 napari/_vispy/visuals/points.py               |  4 +-
 napari/_vispy/visuals/shapes.py               |  2 +-
 napari/_vispy/visuals/surface.py              |  2 +-
 napari/_vispy/visuals/tracks.py               |  4 +-
 napari/_vispy/visuals/vectors.py              |  2 +-
 napari/components/__init__.py                 | 10 +-
 napari/components/_viewer_key_bindings.py     | 12 +--
 napari/components/camera.py                   |  6 +-
 napari/components/cursor.py                   |  4 +-
 napari/components/dims.py                     |  6 +-
 .../components/experimental/chunk/__init__.py | 13 ++-
 .../components/experimental/chunk/_cache.py   |  6 +-
 .../experimental/chunk/_commands/__init__.py  |  4 +-
 .../experimental/chunk/_commands/_loader.py   | 19 ++--
 .../experimental/chunk/_commands/_tables.py   |  4 +-
 .../experimental/chunk/_delay_queue.py        |  4 +-
 napari/components/experimental/chunk/_info.py | 11 ++-
 .../components/experimental/chunk/_loader.py  | 12 +--
 napari/components/experimental/chunk/_pool.py |  6 +-
 .../experimental/chunk/_pool_group.py         | 11 ++-
 .../components/experimental/chunk/_request.py |  4 +-
 napari/components/experimental/commands.py    |  6 +-
 .../experimental/monitor/__init__.py          |  4 +-
 .../components/experimental/monitor/_api.py   |  2 +-
 .../experimental/monitor/_monitor.py          |  8 +-
 .../experimental/monitor/_service.py          |  2 +-
 .../experimental/remote/__init__.py           |  2 +-
 .../experimental/remote/_commands.py          |  4 +-
 .../experimental/remote/_manager.py           |  8 +-
 .../experimental/remote/_messages.py          |  6 +-
 napari/components/grid.py                     |  4 +-
 napari/components/layerlist.py                | 18 ++--
 napari/components/overlays/__init__.py        | 14 ++-
 .../_interaction_box_mouse_bindings.py        | 10 +-
 napari/components/overlays/axes.py            |  2 +-
 napari/components/overlays/base.py            |  4 +-
 napari/components/overlays/interaction_box.py |  6 +-
 napari/components/overlays/overlays.py        |  4 +-
 napari/components/overlays/scale_bar.py       |  4 +-
 napari/components/overlays/text.py            |  3 +-
 napari/components/tooltip.py                  |  2 +-
 napari/components/viewer_model.py             | 79 ++++++++-------
 napari/errors/__init__.py                     |  2 +-
 napari/experimental/__init__.py               |  7 +-
 napari/layers/__init__.py                     | 18 ++--
 napari/layers/_data_protocols.py              |  4 +-
 napari/layers/_layer_actions.py               | 14 +--
 napari/layers/_multiscale_data.py             |  4 +-
 napari/layers/_source.py                      |  2 +-
 napari/layers/base/__init__.py                |  2 +-
 napari/layers/base/_base_constants.py         |  4 +-
 napari/layers/base/base.py                    | 54 ++++++-----
 napari/layers/image/__init__.py               |  4 +-
 napari/layers/image/_image_constants.py       |  4 +-
 napari/layers/image/_image_key_bindings.py    | 11 +--
 napari/layers/image/_image_loader.py          |  2 +-
 napari/layers/image/_image_mouse_bindings.py  |  6 +-
 napari/layers/image/_image_slice.py           | 14 +--
 napari/layers/image/_image_slice_data.py      |  4 +-
 napari/layers/image/_image_utils.py           |  6 +-
 napari/layers/image/_image_view.py            |  2 +-
 napari/layers/image/experimental/__init__.py  | 11 ++-
 .../layers/image/experimental/_chunk_set.py   |  4 +-
 .../experimental/_chunked_image_loader.py     |  8 +-
 .../image/experimental/_chunked_slice_data.py | 10 +-
 .../image/experimental/_image_location.py     |  4 +-
 .../image/experimental/_octree_loader.py      | 12 +--
 .../image/experimental/_octree_slice.py       | 22 +++--
 napari/layers/image/experimental/octree.py    | 19 ++--
 .../layers/image/experimental/octree_chunk.py |  4 +-
 .../layers/image/experimental/octree_image.py | 28 ++++--
 .../image/experimental/octree_intersection.py |  9 +-
 .../layers/image/experimental/octree_level.py | 15 ++-
 .../image/experimental/octree_tile_builder.py |  4 +-
 .../layers/image/experimental/octree_util.py  |  4 +-
 napari/layers/image/image.py                  | 52 +++++-----
 napari/layers/intensity_mixin.py              | 12 +--
 napari/layers/labels/__init__.py              |  4 +-
 napari/layers/labels/_labels_constants.py     |  4 +-
 napari/layers/labels/_labels_key_bindings.py  |  8 +-
 .../layers/labels/_labels_mouse_bindings.py   |  4 +-
 napari/layers/labels/labels.py                | 49 +++++-----
 napari/layers/points/__init__.py              |  4 +-
 napari/layers/points/_points_constants.py     |  4 +-
 napari/layers/points/_points_key_bindings.py  | 11 ++-
 .../layers/points/_points_mouse_bindings.py   |  2 +-
 napari/layers/points/_points_utils.py         |  4 +-
 napari/layers/points/points.py                | 49 ++++++----
 napari/layers/shapes/__init__.py              |  4 +-
 napari/layers/shapes/_shape_list.py           | 12 +--
 napari/layers/shapes/_shapes_constants.py     | 10 +-
 napari/layers/shapes/_shapes_key_bindings.py  | 10 +-
 .../layers/shapes/_shapes_models/__init__.py  | 12 +--
 .../shapes/_shapes_models/_polgyon_base.py    |  6 +-
 .../layers/shapes/_shapes_models/ellipse.py   |  6 +-
 napari/layers/shapes/_shapes_models/line.py   |  6 +-
 napari/layers/shapes/_shapes_models/path.py   |  2 +-
 .../layers/shapes/_shapes_models/polygon.py   |  2 +-
 .../layers/shapes/_shapes_models/rectangle.py |  6 +-
 napari/layers/shapes/_shapes_models/shape.py  |  6 +-
 .../layers/shapes/_shapes_mouse_bindings.py   | 12 ++-
 napari/layers/shapes/_shapes_utils.py         |  4 +-
 napari/layers/shapes/shapes.py                | 59 +++++++-----
 napari/layers/surface/__init__.py             |  2 +-
 napari/layers/surface/_surface_constants.py   |  4 +-
 napari/layers/surface/normals.py              |  3 +-
 napari/layers/surface/surface.py              | 28 +++---
 napari/layers/surface/wireframe.py            |  3 +-
 napari/layers/tracks/__init__.py              |  2 +-
 napari/layers/tracks/_track_utils.py          |  6 +-
 napari/layers/tracks/tracks.py                | 10 +-
 napari/layers/utils/_link_layers.py           |  6 +-
 napari/layers/utils/_text_constants.py        |  2 +-
 napari/layers/utils/_text_utils.py            |  4 +-
 napari/layers/utils/color_encoding.py         | 15 ++-
 napari/layers/utils/color_manager.py          | 18 ++--
 napari/layers/utils/color_manager_utils.py    |  4 +-
 napari/layers/utils/color_transformations.py  |  6 +-
 napari/layers/utils/interactivity_utils.py    | 10 +-
 napari/layers/utils/layer_utils.py            |  8 +-
 napari/layers/utils/plane.py                  |  6 +-
 napari/layers/utils/stack_utils.py            | 12 +--
 napari/layers/utils/string_encoding.py        |  6 +-
 napari/layers/utils/style_encoding.py         |  4 +-
 napari/layers/utils/text_manager.py           | 24 +++--
 napari/layers/vectors/__init__.py             |  2 +-
 napari/layers/vectors/_vector_utils.py        |  2 +-
 napari/layers/vectors/vectors.py              | 20 ++--
 napari/plugins/__init__.py                    |  6 +-
 napari/plugins/_npe2.py                       | 14 +--
 napari/plugins/_plugin_manager.py             | 22 ++---
 napari/plugins/exceptions.py                  |  5 +-
 napari/plugins/hook_specifications.py         |  2 +-
 napari/plugins/hub.py                         |  2 +-
 napari/plugins/io.py                          | 10 +-
 napari/plugins/pypi.py                        |  5 +-
 napari/plugins/utils.py                       |  3 +-
 napari/qt/__init__.py                         | 14 +--
 napari/qt/progress.py                         |  4 +-
 napari/qt/threading.py                        |  2 +-
 napari/resources/__init__.py                  |  9 +-
 napari/resources/_icons.py                    |  2 +-
 napari/settings/__init__.py                   |  9 +-
 napari/settings/_appearance.py                |  8 +-
 napari/settings/_application.py               | 14 +--
 napari/settings/_base.py                      | 10 +-
 napari/settings/_constants.py                 |  2 +-
 napari/settings/_experimental.py              |  4 +-
 napari/settings/_fields.py                    |  4 +-
 napari/settings/_migrations.py                |  4 +-
 napari/settings/_napari_settings.py           | 24 +++--
 napari/settings/_plugins.py                   |  9 +-
 napari/settings/_shortcuts.py                 |  7 +-
 napari/settings/_yaml.py                      |  2 +-
 napari/types.py                               |  2 +-
 napari/utils/__init__.py                      | 10 +-
 napari/utils/_magicgui.py                     | 22 +++--
 napari/utils/_octree.py                       |  4 +-
 napari/utils/_proxies.py                      |  4 +-
 napari/utils/_register.py                     |  6 +-
 napari/utils/_tests/test_action_manager.py    |  2 +-
 napari/utils/_tests/test_interactions.py      |  2 +-
 napari/utils/_tests/test_key_bindings.py      |  4 +-
 napari/utils/_tests/test_validators.py        |  2 +-
 napari/utils/_tracebacks.py                   |  2 +-
 napari/utils/action_manager.py                | 10 +-
 napari/utils/colormaps/__init__.py            |  6 +-
 .../_tests/test_categorical_colormap_utils.py |  5 +-
 napari/utils/colormaps/bop_colors.py          |  2 +-
 .../utils/colormaps/categorical_colormap.py   | 12 ++-
 .../colormaps/categorical_colormap_utils.py   |  4 +-
 napari/utils/colormaps/colormap.py            |  9 +-
 napari/utils/colormaps/colormap_utils.py      | 12 +--
 napari/utils/colormaps/inverse_colormaps.py   |  2 +-
 napari/utils/colormaps/standardize_color.py   |  2 +-
 napari/utils/colormaps/vendored/_cm_listed.py |  2 +-
 napari/utils/colormaps/vendored/cm.py         |  6 +-
 napari/utils/colormaps/vendored/colors.py     |  2 +-
 napari/utils/config.py                        |  2 +-
 napari/utils/events/__init__.py               | 24 ++---
 napari/utils/events/containers/__init__.py    | 16 ++--
 .../utils/events/containers/_evented_dict.py  |  6 +-
 .../utils/events/containers/_evented_list.py  | 13 ++-
 .../utils/events/containers/_nested_list.py   |  6 +-
 .../events/containers/_selectable_list.py     |  8 +-
 napari/utils/events/containers/_selection.py  |  6 +-
 napari/utils/events/containers/_set.py        |  4 +-
 napari/utils/events/containers/_typed.py      |  2 +-
 napari/utils/events/debugging.py              |  6 +-
 napari/utils/events/event.py                  |  4 +-
 napari/utils/events/evented_model.py          |  6 +-
 napari/utils/events/types.py                  |  2 +-
 napari/utils/history.py                       |  2 +-
 napari/utils/interactions.py                  |  9 +-
 napari/utils/io.py                            |  2 +-
 napari/utils/key_bindings.py                  |  7 +-
 napari/utils/misc.py                          |  2 +-
 napari/utils/naming.py                        |  2 +-
 napari/utils/notebook_display.py              |  2 +-
 napari/utils/notifications.py                 | 12 +--
 napari/utils/perf/__init__.py                 |  6 +-
 napari/utils/perf/_config.py                  |  6 +-
 napari/utils/perf/_patcher.py                 |  2 +-
 napari/utils/perf/_timers.py                  |  6 +-
 napari/utils/perf/_trace_file.py              |  2 +-
 napari/utils/progress.py                      |  5 +-
 napari/utils/settings/__init__.py             |  4 +-
 napari/utils/theme.py                         | 12 +--
 napari/utils/transforms/__init__.py           |  4 +-
 napari/utils/transforms/transform_utils.py    |  2 +-
 napari/utils/transforms/transforms.py         |  6 +-
 napari/utils/translations.py                  |  2 +-
 napari/utils/tree/__init__.py                 |  4 +-
 napari/utils/tree/group.py                    |  8 +-
 napari/utils/tree/node.py                     |  4 +-
 napari/utils/validators.py                    |  2 +-
 napari/view_layers.py                         |  5 +-
 napari/viewer.py                              | 12 +--
 napari/window.py                              |  4 +-
 napari_builtins/io/__init__.py                |  4 +-
 353 files changed, 1615 insertions(+), 1407 deletions(-)

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 6ebd8e8a..61d03106 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -1,4 +1,8 @@
 repos:
+-   repo: https://github.com/MarcoGorelli/absolufy-imports
+    rev: v0.3.1
+    hooks:
+    -   id: absolufy-imports
 -   repo: https://github.com/pycqa/isort
     rev: 5.10.1
     hooks:
diff --git a/napari/__init__.py b/napari/__init__.py
index 694c2f49..4d43725c 100644
--- a/napari/__init__.py
+++ b/napari/__init__.py
@@ -1,7 +1,7 @@
 import os
 
 try:
-    from ._version import version as __version__
+    from napari._version import version as __version__
 except ImportError:
     __version__ = "not-installed"
 
@@ -49,7 +49,7 @@ _submod_attrs = {
 # potential to take a second or more, so we definitely don't want to import it
 # just to access the CLI (which may not actually need any of the imports)
 
-from ._lazy import install_lazy
+from napari._lazy import install_lazy
 
 __getattr__, __dir__, __all__ = install_lazy(
     __name__, _proto_all_, _submod_attrs
diff --git a/napari/__main__.py b/napari/__main__.py
index 08ccd4ef..d0d03ee4 100644
--- a/napari/__main__.py
+++ b/napari/__main__.py
@@ -13,7 +13,7 @@ from pathlib import Path
 from textwrap import wrap
 from typing import Any, Dict, List
 
-from .utils.translations import trans
+from napari.utils.translations import trans
 
 
 class InfoAction(argparse.Action):
@@ -270,7 +270,11 @@ def _run():
 
     else:
         if args.with_:
-            from .plugins import _initialize_plugins, _npe2, plugin_manager
+            from napari.plugins import (
+                _initialize_plugins,
+                _npe2,
+                plugin_manager,
+            )
 
             # if a plugin widget has been requested, this will fail immediately
             # if the requested plugin/widget is not available.
diff --git a/napari/_app_model/__init__.py b/napari/_app_model/__init__.py
index 49061aa6..f6a2e72f 100644
--- a/napari/_app_model/__init__.py
+++ b/napari/_app_model/__init__.py
@@ -1,3 +1,3 @@
-from ._app import get_app
+from napari._app_model._app import get_app
 
 __all__ = ["get_app"]
diff --git a/napari/_app_model/_app.py b/napari/_app_model/_app.py
index 3bb5d17a..217115c0 100644
--- a/napari/_app_model/_app.py
+++ b/napari/_app_model/_app.py
@@ -6,11 +6,11 @@ from typing import Dict
 
 from app_model import Application
 
-from ._submenus import SUBMENUS
-from .actions._layer_actions import LAYER_ACTIONS
-from .actions._view_actions import VIEW_ACTIONS
-from .injection._processors import PROCESSORS
-from .injection._providers import PROVIDERS
+from napari._app_model._submenus import SUBMENUS
+from napari._app_model.actions._layer_actions import LAYER_ACTIONS
+from napari._app_model.actions._view_actions import VIEW_ACTIONS
+from napari._app_model.injection._processors import PROCESSORS
+from napari._app_model.injection._providers import PROVIDERS
 
 APP_NAME = 'napari'
 
diff --git a/napari/_app_model/_submenus.py b/napari/_app_model/_submenus.py
index e5f9165d..9f757383 100644
--- a/napari/_app_model/_submenus.py
+++ b/napari/_app_model/_submenus.py
@@ -1,7 +1,7 @@
 from app_model.types import SubmenuItem
 
-from ..utils.translations import trans
-from .constants import MenuGroup, MenuId
+from napari._app_model.constants import MenuGroup, MenuId
+from napari.utils.translations import trans
 
 SUBMENUS = [
     (
diff --git a/napari/_app_model/actions/_layer_actions.py b/napari/_app_model/actions/_layer_actions.py
index 6bd4a047..589cfd5d 100644
--- a/napari/_app_model/actions/_layer_actions.py
+++ b/napari/_app_model/actions/_layer_actions.py
@@ -15,9 +15,9 @@ from typing import TYPE_CHECKING, List
 
 from app_model.types import Action
 
-from ...layers import _layer_actions
-from ..constants import CommandId, MenuGroup, MenuId
-from ..context import LayerListContextKeys as LLCK
+from napari._app_model.constants import CommandId, MenuGroup, MenuId
+from napari._app_model.context import LayerListContextKeys as LLCK
+from napari.layers import _layer_actions
 
 if TYPE_CHECKING:
     from app_model.types import MenuRuleDict
diff --git a/napari/_app_model/actions/_toggle_action.py b/napari/_app_model/actions/_toggle_action.py
index 2e76a393..4f5a14b2 100644
--- a/napari/_app_model/actions/_toggle_action.py
+++ b/napari/_app_model/actions/_toggle_action.py
@@ -5,7 +5,7 @@ from typing import TYPE_CHECKING
 from app_model.types import Action, ToggleRule
 
 if TYPE_CHECKING:
-    from ...viewer import Viewer
+    from napari.viewer import Viewer
 
 
 class ViewerToggleAction(Action):
diff --git a/napari/_app_model/actions/_view_actions.py b/napari/_app_model/actions/_view_actions.py
index 4673bea6..2e712428 100644
--- a/napari/_app_model/actions/_view_actions.py
+++ b/napari/_app_model/actions/_view_actions.py
@@ -8,9 +8,9 @@ from typing import List
 
 from app_model.types import Action, ToggleRule
 
-from ...settings import get_settings
-from ..constants import CommandId, MenuId
-from ._toggle_action import ViewerToggleAction
+from napari._app_model.actions._toggle_action import ViewerToggleAction
+from napari._app_model.constants import CommandId, MenuId
+from napari.settings import get_settings
 
 VIEW_ACTIONS: List[Action] = []
 
diff --git a/napari/_app_model/constants/__init__.py b/napari/_app_model/constants/__init__.py
index 15854ebd..aaa79a94 100644
--- a/napari/_app_model/constants/__init__.py
+++ b/napari/_app_model/constants/__init__.py
@@ -1,4 +1,4 @@
-from ._commands import CommandId
-from ._menus import MenuGroup, MenuId
+from napari._app_model.constants._commands import CommandId
+from napari._app_model.constants._menus import MenuGroup, MenuId
 
 __all__ = ['CommandId', 'MenuGroup', 'MenuId']
diff --git a/napari/_app_model/constants/_commands.py b/napari/_app_model/constants/_commands.py
index d88cc2a6..81f4c420 100644
--- a/napari/_app_model/constants/_commands.py
+++ b/napari/_app_model/constants/_commands.py
@@ -11,7 +11,7 @@ that operates on layers.
 from enum import Enum
 from typing import NamedTuple, Optional
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 # fmt: off
diff --git a/napari/_app_model/context/__init__.py b/napari/_app_model/context/__init__.py
index e6bc7524..ab66456f 100644
--- a/napari/_app_model/context/__init__.py
+++ b/napari/_app_model/context/__init__.py
@@ -1,5 +1,9 @@
-from ._context import Context, create_context, get_context
-from ._layerlist_context import LayerListContextKeys
+from napari._app_model.context._context import (
+    Context,
+    create_context,
+    get_context,
+)
+from napari._app_model.context._layerlist_context import LayerListContextKeys
 
 __all__ = [
     'Context',
diff --git a/napari/_app_model/context/_context.py b/napari/_app_model/context/_context.py
index 66264734..7c47a050 100644
--- a/napari/_app_model/context/_context.py
+++ b/napari/_app_model/context/_context.py
@@ -6,10 +6,10 @@ from app_model.expressions import Context
 from app_model.expressions import create_context as _create_context
 from app_model.expressions import get_context
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ...utils.events import Event
+    from napari.utils.events import Event
 
 __all__ = ["create_context", "get_context", "Context", "SettingsAwareContext"]
 
@@ -24,7 +24,7 @@ class SettingsAwareContext(Context):
 
     def __init__(self):
         super().__init__()
-        from ...settings import get_settings
+        from napari.settings import get_settings
 
         self._settings = get_settings()
         self._settings.events.changed.connect(self._update_key)
diff --git a/napari/_app_model/context/_context_keys.py b/napari/_app_model/context/_context_keys.py
index f2a1981e..546c7947 100644
--- a/napari/_app_model/context/_context_keys.py
+++ b/napari/_app_model/context/_context_keys.py
@@ -3,7 +3,7 @@ from typing import TYPE_CHECKING, Generic, TypeVar
 from app_model.expressions import ContextNamespace as _ContextNamespace
 
 if TYPE_CHECKING:
-    from ...utils.events import Event
+    from napari.utils.events import Event
 
 A = TypeVar("A")
 
diff --git a/napari/_app_model/context/_layerlist_context.py b/napari/_app_model/context/_layerlist_context.py
index 4d96ceab..e6c1685e 100644
--- a/napari/_app_model/context/_layerlist_context.py
+++ b/napari/_app_model/context/_layerlist_context.py
@@ -5,15 +5,15 @@ from typing import TYPE_CHECKING, Optional, Tuple
 
 from app_model.expressions import ContextKey
 
-from ...utils._dtype import normalize_dtype
-from ...utils.translations import trans
-from ._context_keys import ContextNamespace
+from napari._app_model.context._context_keys import ContextNamespace
+from napari.utils._dtype import normalize_dtype
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from numpy.typing import DTypeLike
 
-    from ...layers import Layer
-    from ...utils.events import Selection
+    from napari.layers import Layer
+    from napari.utils.events import Selection
 
     LayerSel = Selection[Layer]
 
@@ -23,13 +23,13 @@ def _len(s: LayerSel) -> int:
 
 
 def _all_linked(s: LayerSel) -> bool:
-    from ...layers.utils._link_layers import layer_is_linked
+    from napari.layers.utils._link_layers import layer_is_linked
 
     return bool(s and all(layer_is_linked(x) for x in s))
 
 
 def _n_unselected_links(s: LayerSel) -> int:
-    from ...layers.utils._link_layers import get_linked_layers
+    from napari.layers.utils._link_layers import get_linked_layers
 
     return len(get_linked_layers(*s) - s)
 
diff --git a/napari/_app_model/injection/_processors.py b/napari/_app_model/injection/_processors.py
index 32b9d6bb..ba3a86b7 100644
--- a/napari/_app_model/injection/_processors.py
+++ b/napari/_app_model/injection/_processors.py
@@ -4,9 +4,9 @@ from contextlib import nullcontext, suppress
 from functools import partial
 from typing import Any, Callable, Dict, List, Optional, Set, Union
 
-from ... import layers, types, viewer
-from ...layers._source import layer_source
-from ._providers import _provide_viewer
+from napari import layers, types, viewer
+from napari._app_model.injection._providers import _provide_viewer
+from napari.layers._source import layer_source
 
 
 def _add_layer_data_tuples_to_viewer(
@@ -15,7 +15,7 @@ def _add_layer_data_tuples_to_viewer(
     viewer=None,
     source: Optional[dict] = None,
 ):
-    from ...utils.misc import ensure_list_of_layer_data_tuple
+    from napari.utils.misc import ensure_list_of_layer_data_tuple
 
     if viewer is None:
         viewer = _provide_viewer()
diff --git a/napari/_app_model/injection/_providers.py b/napari/_app_model/injection/_providers.py
index 9d111fe3..a061898b 100644
--- a/napari/_app_model/injection/_providers.py
+++ b/napari/_app_model/injection/_providers.py
@@ -1,6 +1,6 @@
 from typing import Optional
 
-from ... import components, layers, viewer
+from napari import components, layers, viewer
 
 
 def _provide_viewer() -> Optional[viewer.Viewer]:
diff --git a/napari/_event_loop.py b/napari/_event_loop.py
index 89198582..7caae84d 100644
--- a/napari/_event_loop.py
+++ b/napari/_event_loop.py
@@ -1,5 +1,5 @@
 try:
-    from ._qt.qt_event_loop import gui_qt, run
+    from napari._qt.qt_event_loop import gui_qt, run
 
 # qtpy raises a RuntimeError if no Qt bindings can be found
 except (ImportError, RuntimeError) as e:
diff --git a/napari/_qt/__init__.py b/napari/_qt/__init__.py
index dc474ff5..12519373 100644
--- a/napari/_qt/__init__.py
+++ b/napari/_qt/__init__.py
@@ -3,7 +3,7 @@ import sys
 from pathlib import Path
 from warnings import warn
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 try:
     from qtpy import API_NAME, QtCore
@@ -50,5 +50,5 @@ if tuple(int(x) for x in QtCore.__version__.split('.')[:3]) < (5, 12, 3):
     warn(message=warn_message)
 
 
-from .qt_event_loop import get_app, gui_qt, quit_app, run
-from .qt_main_window import Window
+from napari._qt.qt_event_loop import get_app, gui_qt, quit_app, run
+from napari._qt.qt_main_window import Window
diff --git a/napari/_qt/_qapp_model/__init__.py b/napari/_qt/_qapp_model/__init__.py
index 4a3c3b04..b16151e7 100644
--- a/napari/_qt/_qapp_model/__init__.py
+++ b/napari/_qt/_qapp_model/__init__.py
@@ -1,5 +1,5 @@
 """Helper functions to create Qt objects from app-model objects."""
 
-from ._menus import build_qmodel_menu
+from napari._qt._qapp_model._menus import build_qmodel_menu
 
 __all__ = ['build_qmodel_menu']
diff --git a/napari/_qt/_qapp_model/_menus.py b/napari/_qt/_qapp_model/_menus.py
index 6d36fdda..21e79c19 100644
--- a/napari/_qt/_qapp_model/_menus.py
+++ b/napari/_qt/_qapp_model/_menus.py
@@ -27,7 +27,7 @@ def build_qmodel_menu(
     QModelMenu
         QMenu subclass populated with all items in `menu_id` menu.
     """
-    from ..._app_model import get_app
+    from napari._app_model import get_app
 
     return QModelMenu(
         menu_id=menu_id, app=get_app(), title=title, parent=parent
diff --git a/napari/_qt/_qapp_model/qactions/__init__.py b/napari/_qt/_qapp_model/qactions/__init__.py
index 73d21267..94539394 100644
--- a/napari/_qt/_qapp_model/qactions/__init__.py
+++ b/napari/_qt/_qapp_model/qactions/__init__.py
@@ -22,11 +22,11 @@ def init_qactions() -> None:
     - registering Qt-dependent actions with app-model (i.e. Q_*_ACTIONS actions).
     """
 
-    from ...._app_model import get_app
-    from ...qt_main_window import Window, _QtMainWindow
-    from ...qt_viewer import QtViewer
-    from ._help import Q_HELP_ACTIONS
-    from ._view import Q_VIEW_ACTIONS
+    from napari._app_model import get_app
+    from napari._qt._qapp_model.qactions._help import Q_HELP_ACTIONS
+    from napari._qt._qapp_model.qactions._view import Q_VIEW_ACTIONS
+    from napari._qt.qt_main_window import Window, _QtMainWindow
+    from napari._qt.qt_viewer import QtViewer
 
     # update the namespace with the Qt-specific types/providers/processors
     app = get_app()
diff --git a/napari/_qt/_qapp_model/qactions/_help.py b/napari/_qt/_qapp_model/qactions/_help.py
index 36569ef3..49b8176b 100644
--- a/napari/_qt/_qapp_model/qactions/_help.py
+++ b/napari/_qt/_qapp_model/qactions/_help.py
@@ -4,10 +4,10 @@ from typing import List
 
 from app_model.types import Action, KeyBindingRule, KeyCode, KeyMod
 
-from ...._app_model.constants import CommandId, MenuId
-from ....utils.translations import trans
-from ...dialogs.qt_about import QtAbout
-from ...qt_main_window import Window
+from napari._app_model.constants import CommandId, MenuId
+from napari._qt.dialogs.qt_about import QtAbout
+from napari._qt.qt_main_window import Window
+from napari.utils.translations import trans
 
 try:
     from napari_error_reporter import ask_opt_in
diff --git a/napari/_qt/_qapp_model/qactions/_view.py b/napari/_qt/_qapp_model/qactions/_view.py
index 9f057481..7d6406c6 100644
--- a/napari/_qt/_qapp_model/qactions/_view.py
+++ b/napari/_qt/_qapp_model/qactions/_view.py
@@ -9,11 +9,11 @@ from app_model.types import (
     ToggleRule,
 )
 
-from ...._app_model.constants import CommandId, MenuGroup, MenuId
-from ....settings import get_settings
-from ....utils.translations import trans
-from ...qt_main_window import Window
-from ...qt_viewer import QtViewer
+from napari._app_model.constants import CommandId, MenuGroup, MenuId
+from napari._qt.qt_main_window import Window
+from napari._qt.qt_viewer import QtViewer
+from napari.settings import get_settings
+from napari.utils.translations import trans
 
 
 def _toggle_activity_dock(window: Window):
diff --git a/napari/_qt/containers/__init__.py b/napari/_qt/containers/__init__.py
index ebd853a1..ad65023e 100644
--- a/napari/_qt/containers/__init__.py
+++ b/napari/_qt/containers/__init__.py
@@ -1,10 +1,10 @@
-from ._factory import create_model, create_view
-from .qt_layer_list import QtLayerList
-from .qt_layer_model import QtLayerListModel
-from .qt_list_model import QtListModel
-from .qt_list_view import QtListView
-from .qt_tree_model import QtNodeTreeModel
-from .qt_tree_view import QtNodeTreeView
+from napari._qt.containers._factory import create_model, create_view
+from napari._qt.containers.qt_layer_list import QtLayerList
+from napari._qt.containers.qt_layer_model import QtLayerListModel
+from napari._qt.containers.qt_list_model import QtListModel
+from napari._qt.containers.qt_list_view import QtListView
+from napari._qt.containers.qt_tree_model import QtNodeTreeModel
+from napari._qt.containers.qt_tree_view import QtNodeTreeView
 
 __all__ = [
     'create_model',
diff --git a/napari/_qt/containers/_base_item_model.py b/napari/_qt/containers/_base_item_model.py
index 236dbc04..915bc674 100644
--- a/napari/_qt/containers/_base_item_model.py
+++ b/napari/_qt/containers/_base_item_model.py
@@ -5,9 +5,9 @@ from typing import TYPE_CHECKING, Any, Generic, Tuple, TypeVar, Union
 
 from qtpy.QtCore import QAbstractItemModel, QModelIndex, Qt
 
-from ...utils.events import disconnect_events
-from ...utils.events.containers import SelectableEventedList
-from ...utils.translations import trans
+from napari.utils.events import disconnect_events
+from napari.utils.events.containers import SelectableEventedList
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from qtpy.QtWidgets import QWidget
diff --git a/napari/_qt/containers/_base_item_view.py b/napari/_qt/containers/_base_item_view.py
index 065003cb..251c2cf2 100644
--- a/napari/_qt/containers/_base_item_view.py
+++ b/napari/_qt/containers/_base_item_view.py
@@ -6,8 +6,8 @@ from typing import TYPE_CHECKING, Generic, TypeVar
 from qtpy.QtCore import QItemSelection, QModelIndex, Qt
 from qtpy.QtWidgets import QAbstractItemView
 
-from ._base_item_model import ItemRole
-from ._factory import create_model
+from napari._qt.containers._base_item_model import ItemRole
+from napari._qt.containers._factory import create_model
 
 ItemType = TypeVar("ItemType")
 
@@ -15,9 +15,9 @@ if TYPE_CHECKING:
     from qtpy.QtCore import QAbstractItemModel
     from qtpy.QtGui import QKeyEvent
 
-    from ...utils.events import Event
-    from ...utils.events.containers import SelectableEventedList
-    from ._base_item_model import _BaseEventedItemModel
+    from napari._qt.containers._base_item_model import _BaseEventedItemModel
+    from napari.utils.events import Event
+    from napari.utils.events.containers import SelectableEventedList
 
 
 class _BaseEventedItemView(Generic[ItemType]):
diff --git a/napari/_qt/containers/_factory.py b/napari/_qt/containers/_factory.py
index 00cf5f62..90ef51d0 100644
--- a/napari/_qt/containers/_factory.py
+++ b/napari/_qt/containers/_factory.py
@@ -2,10 +2,10 @@ from __future__ import annotations
 
 from typing import TYPE_CHECKING, Union
 
-from ...components.layerlist import LayerList
-from ...utils.events import SelectableEventedList
-from ...utils.translations import trans
-from ...utils.tree import Group
+from napari.components.layerlist import LayerList
+from napari.utils.events import SelectableEventedList
+from napari.utils.translations import trans
+from napari.utils.tree import Group
 
 if TYPE_CHECKING:
     from qtpy.QtWidgets import QWidget
@@ -28,7 +28,7 @@ def create_view(
     Union[QtListView, QtNodeTreeView]
         A view instance appropriate for `obj`.
     """
-    from . import QtLayerList, QtListView, QtNodeTreeView
+    from napari._qt.containers import QtLayerList, QtListView, QtNodeTreeView
 
     if isinstance(obj, LayerList):
         return QtLayerList(obj, parent=parent)
@@ -62,7 +62,11 @@ def create_model(
     Union[QtListModel, QtNodeTreeModel]
         A model instance appropriate for `obj`.
     """
-    from . import QtLayerListModel, QtListModel, QtNodeTreeModel
+    from napari._qt.containers import (
+        QtLayerListModel,
+        QtListModel,
+        QtNodeTreeModel,
+    )
 
     if isinstance(obj, LayerList):
         return QtLayerListModel(obj, parent=parent)
diff --git a/napari/_qt/containers/_layer_delegate.py b/napari/_qt/containers/_layer_delegate.py
index dc78afd8..c3b75e82 100644
--- a/napari/_qt/containers/_layer_delegate.py
+++ b/napari/_qt/containers/_layer_delegate.py
@@ -41,19 +41,19 @@ from qtpy.QtCore import QPoint, QSize, Qt
 from qtpy.QtGui import QPixmap
 from qtpy.QtWidgets import QStyledItemDelegate
 
-from ..._app_model.constants import MenuId
-from ..._app_model.context import get_context
-from .._qapp_model import build_qmodel_menu
-from ..qt_resources import QColoredSVGIcon
-from ._base_item_model import ItemRole
-from .qt_layer_model import ThumbnailRole
+from napari._app_model.constants import MenuId
+from napari._app_model.context import get_context
+from napari._qt._qapp_model import build_qmodel_menu
+from napari._qt.containers._base_item_model import ItemRole
+from napari._qt.containers.qt_layer_model import ThumbnailRole
+from napari._qt.qt_resources import QColoredSVGIcon
 
 if TYPE_CHECKING:
     from qtpy import QtCore
     from qtpy.QtGui import QPainter
     from qtpy.QtWidgets import QStyleOptionViewItem, QWidget
 
-    from ...components.layerlist import LayerList
+    from napari.components.layerlist import LayerList
 
 
 class LayerDelegate(QStyledItemDelegate):
diff --git a/napari/_qt/containers/qt_layer_list.py b/napari/_qt/containers/qt_layer_list.py
index 2d384375..b7d5aab4 100644
--- a/napari/_qt/containers/qt_layer_list.py
+++ b/napari/_qt/containers/qt_layer_list.py
@@ -4,17 +4,20 @@ from typing import TYPE_CHECKING
 
 from qtpy.QtCore import QSortFilterProxyModel, Qt
 
-from ...layers import Layer
-from ...utils.translations import trans
-from ._base_item_model import SortRole, _BaseEventedItemModel
-from ._layer_delegate import LayerDelegate
-from .qt_list_view import QtListView
+from napari._qt.containers._base_item_model import (
+    SortRole,
+    _BaseEventedItemModel,
+)
+from napari._qt.containers._layer_delegate import LayerDelegate
+from napari._qt.containers.qt_list_view import QtListView
+from napari.layers import Layer
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from qtpy.QtGui import QKeyEvent
     from qtpy.QtWidgets import QWidget
 
-    from ...components.layerlist import LayerList
+    from napari.components.layerlist import LayerList
 
 
 class ReverseProxyModel(QSortFilterProxyModel):
diff --git a/napari/_qt/containers/qt_layer_model.py b/napari/_qt/containers/qt_layer_model.py
index d0d700b3..43fca1bb 100644
--- a/napari/_qt/containers/qt_layer_model.py
+++ b/napari/_qt/containers/qt_layer_model.py
@@ -3,8 +3,8 @@ import typing
 from qtpy.QtCore import QModelIndex, QSize, Qt
 from qtpy.QtGui import QImage
 
-from ...layers import Layer
-from .qt_list_model import QtListModel
+from napari._qt.containers.qt_list_model import QtListModel
+from napari.layers import Layer
 
 ThumbnailRole = Qt.UserRole + 2
 
diff --git a/napari/_qt/containers/qt_list_model.py b/napari/_qt/containers/qt_list_model.py
index 6cf552ea..240d6da9 100644
--- a/napari/_qt/containers/qt_list_model.py
+++ b/napari/_qt/containers/qt_list_model.py
@@ -4,7 +4,7 @@ from typing import List, Optional, Sequence, TypeVar
 
 from qtpy.QtCore import QMimeData, QModelIndex, Qt
 
-from ._base_item_model import _BaseEventedItemModel
+from napari._qt.containers._base_item_model import _BaseEventedItemModel
 
 logger = logging.getLogger(__name__)
 ListIndexMIMEType = "application/x-list-index"
diff --git a/napari/_qt/containers/qt_list_view.py b/napari/_qt/containers/qt_list_view.py
index 600337e9..24d94b53 100644
--- a/napari/_qt/containers/qt_list_view.py
+++ b/napari/_qt/containers/qt_list_view.py
@@ -4,13 +4,13 @@ from typing import TYPE_CHECKING, TypeVar
 
 from qtpy.QtWidgets import QListView
 
-from ._base_item_view import _BaseEventedItemView
-from .qt_list_model import QtListModel
+from napari._qt.containers._base_item_view import _BaseEventedItemView
+from napari._qt.containers.qt_list_model import QtListModel
 
 if TYPE_CHECKING:
     from qtpy.QtWidgets import QWidget
 
-    from ...utils.events.containers import SelectableEventedList
+    from napari.utils.events.containers import SelectableEventedList
 
 ItemType = TypeVar("ItemType")
 
diff --git a/napari/_qt/containers/qt_tree_model.py b/napari/_qt/containers/qt_tree_model.py
index 415269a4..2a3587fb 100644
--- a/napari/_qt/containers/qt_tree_model.py
+++ b/napari/_qt/containers/qt_tree_model.py
@@ -4,9 +4,9 @@ from typing import List, Optional, Tuple, TypeVar
 
 from qtpy.QtCore import QMimeData, QModelIndex, Qt
 
-from ...utils.translations import trans
-from ...utils.tree import Group, Node
-from ._base_item_model import _BaseEventedItemModel
+from napari._qt.containers._base_item_model import _BaseEventedItemModel
+from napari.utils.translations import trans
+from napari.utils.tree import Group, Node
 
 logger = logging.getLogger(__name__)
 NodeType = TypeVar("NodeType", bound=Node)
diff --git a/napari/_qt/containers/qt_tree_view.py b/napari/_qt/containers/qt_tree_view.py
index 1431d02b..7c69294d 100644
--- a/napari/_qt/containers/qt_tree_view.py
+++ b/napari/_qt/containers/qt_tree_view.py
@@ -5,9 +5,9 @@ from typing import TYPE_CHECKING, TypeVar
 
 from qtpy.QtWidgets import QTreeView
 
-from ...utils.tree import Group, Node
-from ._base_item_view import _BaseEventedItemView
-from .qt_tree_model import QtNodeTreeModel
+from napari._qt.containers._base_item_view import _BaseEventedItemView
+from napari._qt.containers.qt_tree_model import QtNodeTreeModel
+from napari.utils.tree import Group, Node
 
 if TYPE_CHECKING:
     from qtpy.QtCore import QModelIndex
diff --git a/napari/_qt/dialogs/preferences_dialog.py b/napari/_qt/dialogs/preferences_dialog.py
index 32df76c9..737a767d 100644
--- a/napari/_qt/dialogs/preferences_dialog.py
+++ b/napari/_qt/dialogs/preferences_dialog.py
@@ -14,7 +14,7 @@ from qtpy.QtWidgets import (
     QVBoxLayout,
 )
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from pydantic.fields import ModelField
@@ -34,7 +34,7 @@ class PreferencesDialog(QDialog):
     resized = Signal(QSize)
 
     def __init__(self, parent=None):
-        from ...settings import get_settings
+        from napari.settings import get_settings
 
         super().__init__(parent)
         self.setWindowTitle(trans._("Preferences"))
@@ -86,7 +86,7 @@ class PreferencesDialog(QDialog):
     def _rebuild_dialog(self):
         """Removes settings not to be exposed to user and creates dialog pages."""
         # FIXME: this dialog should not need to know about the plugin manager
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         self._starting_pm_order = plugin_manager.call_order()
         self._starting_values = self._settings.dict(exclude={'schema_version'})
@@ -111,7 +111,9 @@ class PreferencesDialog(QDialog):
         field : ModelField
             subfield for which to create a page.
         """
-        from ..._vendor.qt_json_builder.qt_jsonschema_form import WidgetBuilder
+        from napari._vendor.qt_json_builder.qt_jsonschema_form import (
+            WidgetBuilder,
+        )
 
         schema, values = self._get_page_dict(field)
         name = field.field_info.title or field.name
@@ -204,7 +206,7 @@ class PreferencesDialog(QDialog):
 
         # FIXME: this dialog should not need to know about the plugin manager
         if self._starting_pm_order:
-            from ...plugins import plugin_manager
+            from napari.plugins import plugin_manager
 
             plugin_manager.set_call_order(self._starting_pm_order)
         super().reject()
diff --git a/napari/_qt/dialogs/qt_about.py b/napari/_qt/dialogs/qt_about.py
index 97125563..c93905f3 100644
--- a/napari/_qt/dialogs/qt_about.py
+++ b/napari/_qt/dialogs/qt_about.py
@@ -9,8 +9,8 @@ from qtpy.QtWidgets import (
     QVBoxLayout,
 )
 
-from ...utils import citation_text, sys_info
-from ...utils.translations import trans
+from napari.utils import citation_text, sys_info
+from napari.utils.translations import trans
 
 
 class QtAbout(QDialog):
diff --git a/napari/_qt/dialogs/qt_activity_dialog.py b/napari/_qt/dialogs/qt_activity_dialog.py
index 8b8052cf..aeee8e3d 100644
--- a/napari/_qt/dialogs/qt_activity_dialog.py
+++ b/napari/_qt/dialogs/qt_activity_dialog.py
@@ -17,10 +17,12 @@ from qtpy.QtWidgets import (
 )
 
 import napari.resources
-
-from ...utils.progress import progress
-from ...utils.translations import trans
-from ..widgets.qt_progress_bar import QtLabeledProgressBar, QtProgressBarGroup
+from napari._qt.widgets.qt_progress_bar import (
+    QtLabeledProgressBar,
+    QtProgressBarGroup,
+)
+from napari.utils.progress import progress
+from napari.utils.translations import trans
 
 
 class ActivityToggleItem(QWidget):
diff --git a/napari/_qt/dialogs/qt_modal.py b/napari/_qt/dialogs/qt_modal.py
index 8f1e3830..5adfae39 100644
--- a/napari/_qt/dialogs/qt_modal.py
+++ b/napari/_qt/dialogs/qt_modal.py
@@ -2,7 +2,7 @@ from qtpy.QtCore import QPoint, QRect, Qt
 from qtpy.QtGui import QCursor, QGuiApplication
 from qtpy.QtWidgets import QDialog, QFrame, QVBoxLayout
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 class QtPopup(QDialog):
diff --git a/napari/_qt/dialogs/qt_notification.py b/napari/_qt/dialogs/qt_notification.py
index 15301ad2..e89b91cc 100644
--- a/napari/_qt/dialogs/qt_notification.py
+++ b/napari/_qt/dialogs/qt_notification.py
@@ -25,12 +25,12 @@ from qtpy.QtWidgets import (
 )
 from superqt import QElidingLabel, ensure_main_thread
 
-from ...settings import get_settings
-from ...utils.notifications import Notification, NotificationSeverity
-from ...utils.theme import get_theme
-from ...utils.translations import trans
-from ..code_syntax_highlight import Pylighter
-from ..qt_resources import QColoredSVGIcon
+from napari._qt.code_syntax_highlight import Pylighter
+from napari._qt.qt_resources import QColoredSVGIcon
+from napari.settings import get_settings
+from napari.utils.notifications import Notification, NotificationSeverity
+from napari.utils.theme import get_theme
+from napari.utils.translations import trans
 
 ActionSequence = Sequence[Tuple[str, Callable[['NapariQtNotification'], None]]]
 
@@ -110,8 +110,8 @@ class NapariQtNotification(QDialog):
 
     def _update_icon(self, severity: str):
         """Update the icon to match the severity level."""
-        from ...settings import get_settings
-        from ...utils.theme import get_theme
+        from napari.settings import get_settings
+        from napari.utils.theme import get_theme
 
         settings = get_settings()
         theme = settings.appearance.theme
@@ -353,7 +353,7 @@ class NapariQtNotification(QDialog):
         cls, notification: Notification, parent: QWidget = None
     ) -> NapariQtNotification:
 
-        from ...utils.notifications import ErrorNotification
+        from napari.utils.notifications import ErrorNotification
 
         if isinstance(notification, ErrorNotification):
 
@@ -380,8 +380,8 @@ class NapariQtNotification(QDialog):
     @classmethod
     @ensure_main_thread
     def show_notification(cls, notification: Notification):
-        from ..._qt.qt_main_window import _QtMainWindow
-        from ...settings import get_settings
+        from napari._qt.qt_main_window import _QtMainWindow
+        from napari.settings import get_settings
 
         settings = get_settings()
 
@@ -399,7 +399,7 @@ class NapariQtNotification(QDialog):
 def _debug_tb(tb):
     import pdb
 
-    from ..utils import event_hook_removed
+    from napari._qt.utils import event_hook_removed
 
     QApplication.processEvents()
     QApplication.processEvents()
diff --git a/napari/_qt/dialogs/qt_plugin_dialog.py b/napari/_qt/dialogs/qt_plugin_dialog.py
index 1b287efc..b8361f30 100644
--- a/napari/_qt/dialogs/qt_plugin_dialog.py
+++ b/napari/_qt/dialogs/qt_plugin_dialog.py
@@ -39,23 +39,22 @@ from qtpy.QtWidgets import (
 from superqt import QElidingLabel
 
 import napari.resources
-
-from ...plugins import plugin_manager
-from ...plugins.hub import iter_hub_plugin_info
-from ...plugins.pypi import _user_agent, iter_napari_plugin_info
-from ...plugins.utils import normalized_name
-from ...settings import get_settings
-from ...utils._appdirs import user_plugin_dir, user_site_packages
-from ...utils.misc import (
+from napari._qt.qt_resources import QColoredSVGIcon
+from napari._qt.qthreading import create_worker
+from napari._qt.widgets.qt_message_popup import WarnPopup
+from napari._qt.widgets.qt_tooltip import QtToolTipLabel
+from napari.plugins import plugin_manager
+from napari.plugins.hub import iter_hub_plugin_info
+from napari.plugins.pypi import _user_agent, iter_napari_plugin_info
+from napari.plugins.utils import normalized_name
+from napari.settings import get_settings
+from napari.utils._appdirs import user_plugin_dir, user_site_packages
+from napari.utils.misc import (
     parse_version,
     running_as_bundled_app,
     running_as_constructor_app,
 )
-from ...utils.translations import trans
-from ..qt_resources import QColoredSVGIcon
-from ..qthreading import create_worker
-from ..widgets.qt_message_popup import WarnPopup
-from ..widgets.qt_tooltip import QtToolTipLabel
+from napari.utils.translations import trans
 
 InstallerTypes = Literal['pip', 'mamba']
 
@@ -110,7 +109,7 @@ class Installer(QObject):
             process.setProgram(installer)
 
         if installer == "mamba":
-            from ..._version import version_tuple
+            from napari._version import version_tuple
 
             # To avoid napari version changing when installing a plugin, we
             # add a pin to the current napari version, that way we can
@@ -190,7 +189,7 @@ class Installer(QObject):
             self._processes[pkg_list] = process
 
         if not self._processes:
-            from ...plugins import plugin_manager
+            from napari.plugins import plugin_manager
 
             plugin_manager.discover()
             plugin_manager.prune()
@@ -324,7 +323,7 @@ class Installer(QObject):
         """
         from qtpy import QT_VERSION
 
-        from ..._version import version_tuple
+        from napari._version import version_tuple
 
         parts = [str(part) for part in version_tuple[:3]]
         napari_version_string = f"napari-{'.'.join(parts)}-"
@@ -784,7 +783,7 @@ class QtPluginDialog(QDialog):
         # fetch installed
         from npe2 import PluginManager
 
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         self.already_installed = set()
 
diff --git a/napari/_qt/dialogs/qt_plugin_report.py b/napari/_qt/dialogs/qt_plugin_report.py
index 684608be..0fe6c341 100644
--- a/napari/_qt/dialogs/qt_plugin_report.py
+++ b/napari/_qt/dialogs/qt_plugin_report.py
@@ -16,11 +16,11 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...plugins.exceptions import format_exceptions
-from ...settings import get_settings
-from ...utils.theme import get_theme
-from ...utils.translations import trans
-from ..code_syntax_highlight import Pylighter
+from napari._qt.code_syntax_highlight import Pylighter
+from napari.plugins.exceptions import format_exceptions
+from napari.settings import get_settings
+from napari.utils.theme import get_theme
+from napari.utils.translations import trans
 
 
 class QtPluginErrReporter(QDialog):
@@ -61,7 +61,7 @@ class QtPluginErrReporter(QDialog):
         initial_plugin: Optional[str] = None,
     ) -> None:
         super().__init__(parent)
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         self.plugin_manager = plugin_manager
 
diff --git a/napari/_qt/dialogs/qt_reader_dialog.py b/napari/_qt/dialogs/qt_reader_dialog.py
index 3aa5712d..eb305200 100644
--- a/napari/_qt/dialogs/qt_reader_dialog.py
+++ b/napari/_qt/dialogs/qt_reader_dialog.py
@@ -15,8 +15,7 @@ from qtpy.QtWidgets import (
 from napari.errors import ReaderPluginError
 from napari.plugins.utils import get_potential_readers
 from napari.settings import get_settings
-
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 class QtReaderDialog(QDialog):
diff --git a/napari/_qt/dialogs/screenshot_dialog.py b/napari/_qt/dialogs/screenshot_dialog.py
index 48d5a6db..be231d3f 100644
--- a/napari/_qt/dialogs/screenshot_dialog.py
+++ b/napari/_qt/dialogs/screenshot_dialog.py
@@ -4,8 +4,8 @@ from typing import Any, Callable
 
 from qtpy.QtWidgets import QFileDialog, QMessageBox
 
-from ...utils.misc import in_ipython
-from ...utils.translations import trans
+from napari.utils.misc import in_ipython
+from napari.utils.translations import trans
 
 
 class ScreenshotDialog(QFileDialog):
diff --git a/napari/_qt/experimental/qt_chunk_receiver.py b/napari/_qt/experimental/qt_chunk_receiver.py
index c34633c3..aedfc882 100644
--- a/napari/_qt/experimental/qt_chunk_receiver.py
+++ b/napari/_qt/experimental/qt_chunk_receiver.py
@@ -2,8 +2,8 @@
 """
 from qtpy.QtCore import QObject, Signal
 
-from ...components.experimental.chunk import chunk_loader
-from ...utils.events import EmitterGroup, Event, EventEmitter
+from napari.components.experimental.chunk import chunk_loader
+from napari.utils.events import EmitterGroup, Event, EventEmitter
 
 
 class QtGuiEvent(QObject):
diff --git a/napari/_qt/experimental/qt_poll.py b/napari/_qt/experimental/qt_poll.py
index fcf1cc20..955ca925 100644
--- a/napari/_qt/experimental/qt_poll.py
+++ b/napari/_qt/experimental/qt_poll.py
@@ -8,7 +8,7 @@ from typing import Optional
 
 from qtpy.QtCore import QEvent, QObject, QTimer
 
-from ...utils.events import EmitterGroup
+from napari.utils.events import EmitterGroup
 
 # When running a timer we use this interval.
 POLL_INTERVAL_MS = 16.666  # About 60HZ
diff --git a/napari/_qt/layer_controls/__init__.py b/napari/_qt/layer_controls/__init__.py
index 264df3f6..190580f3 100644
--- a/napari/_qt/layer_controls/__init__.py
+++ b/napari/_qt/layer_controls/__init__.py
@@ -1 +1,3 @@
-from .qt_layer_controls_container import QtLayerControlsContainer
+from napari._qt.layer_controls.qt_layer_controls_container import (
+    QtLayerControlsContainer,
+)
diff --git a/napari/_qt/layer_controls/qt_colormap_combobox.py b/napari/_qt/layer_controls/qt_colormap_combobox.py
index d5bffd1b..22c65b4b 100644
--- a/napari/_qt/layer_controls/qt_colormap_combobox.py
+++ b/napari/_qt/layer_controls/qt_colormap_combobox.py
@@ -7,7 +7,7 @@ from qtpy.QtWidgets import (
     QStyleOptionViewItem,
 )
 
-from ...utils.colormaps import (
+from napari.utils.colormaps import (
     display_name_to_name,
     ensure_colormap,
     make_colorbar,
diff --git a/napari/_qt/layer_controls/qt_image_controls.py b/napari/_qt/layer_controls/qt_image_controls.py
index 57504230..19929d1a 100644
--- a/napari/_qt/layer_controls/qt_image_controls.py
+++ b/napari/_qt/layer_controls/qt_image_controls.py
@@ -11,16 +11,18 @@ from qtpy.QtWidgets import (
 )
 from superqt import QLabeledDoubleSlider
 
-from ...layers.image._image_constants import (
+from napari._qt.layer_controls.qt_image_controls_base import (
+    QtBaseImageControls,
+)
+from napari._qt.utils import qt_signals_blocked
+from napari._qt.widgets._slider_compat import QDoubleSlider
+from napari.layers.image._image_constants import (
     ImageRendering,
     Interpolation,
     VolumeDepiction,
 )
-from ...utils.action_manager import action_manager
-from ...utils.translations import trans
-from ..utils import qt_signals_blocked
-from ..widgets._slider_compat import QDoubleSlider
-from .qt_image_controls_base import QtBaseImageControls
+from napari.utils.action_manager import action_manager
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_image_controls_base.py b/napari/_qt/layer_controls/qt_image_controls_base.py
index 2967698b..ba1ce929 100644
--- a/napari/_qt/layer_controls/qt_image_controls_base.py
+++ b/napari/_qt/layer_controls/qt_image_controls_base.py
@@ -8,15 +8,15 @@ from qtpy.QtGui import QImage, QPixmap
 from qtpy.QtWidgets import QHBoxLayout, QLabel, QPushButton, QWidget
 from superqt import QDoubleRangeSlider
 
-from ...utils._dtype import normalize_dtype
-from ...utils.colormaps import AVAILABLE_COLORMAPS
-from ...utils.events.event_utils import connect_no_arg, connect_setattr
-from ...utils.translations import trans
-from ..utils import qt_signals_blocked
-from ..widgets._slider_compat import QDoubleSlider
-from ..widgets.qt_range_slider_popup import QRangeSliderPopup
-from .qt_colormap_combobox import QtColormapComboBox
-from .qt_layer_controls_base import QtLayerControls
+from napari._qt.layer_controls.qt_colormap_combobox import QtColormapComboBox
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import qt_signals_blocked
+from napari._qt.widgets._slider_compat import QDoubleSlider
+from napari._qt.widgets.qt_range_slider_popup import QRangeSliderPopup
+from napari.utils._dtype import normalize_dtype
+from napari.utils.colormaps import AVAILABLE_COLORMAPS
+from napari.utils.events.event_utils import connect_no_arg, connect_setattr
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from napari.layers import Image
diff --git a/napari/_qt/layer_controls/qt_labels_controls.py b/napari/_qt/layer_controls/qt_labels_controls.py
index da03a6ca..0ca652f3 100644
--- a/napari/_qt/layer_controls/qt_labels_controls.py
+++ b/napari/_qt/layer_controls/qt_labels_controls.py
@@ -14,20 +14,23 @@ from qtpy.QtWidgets import (
 )
 from superqt import QLargeIntSpinBox
 
-from ...layers.labels._labels_constants import (
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import disable_with_opacity
+from napari._qt.widgets._slider_compat import QSlider
+from napari._qt.widgets.qt_mode_buttons import (
+    QtModePushButton,
+    QtModeRadioButton,
+)
+from napari.layers.labels._labels_constants import (
     LABEL_COLOR_MODE_TRANSLATIONS,
     LabelsRendering,
     Mode,
 )
-from ...layers.labels._labels_utils import get_dtype
-from ...utils._dtype import get_dtype_limits
-from ...utils.action_manager import action_manager
-from ...utils.events import disconnect_events
-from ...utils.translations import trans
-from ..utils import disable_with_opacity
-from ..widgets._slider_compat import QSlider
-from ..widgets.qt_mode_buttons import QtModePushButton, QtModeRadioButton
-from .qt_layer_controls_base import QtLayerControls
+from napari.layers.labels._labels_utils import get_dtype
+from napari.utils._dtype import get_dtype_limits
+from napari.utils.action_manager import action_manager
+from napari.utils.events import disconnect_events
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_layer_controls_base.py b/napari/_qt/layer_controls/qt_layer_controls_base.py
index 8d70fece..d872a9ac 100644
--- a/napari/_qt/layer_controls/qt_layer_controls_base.py
+++ b/napari/_qt/layer_controls/qt_layer_controls_base.py
@@ -1,10 +1,10 @@
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QComboBox, QFormLayout, QFrame, QLabel
 
-from ...layers.base._base_constants import BLENDING_TRANSLATIONS, Blending
-from ...utils.events import disconnect_events
-from ...utils.translations import trans
-from ..widgets._slider_compat import QDoubleSlider
+from napari._qt.widgets._slider_compat import QDoubleSlider
+from napari.layers.base._base_constants import BLENDING_TRANSLATIONS, Blending
+from napari.utils.events import disconnect_events
+from napari.utils.translations import trans
 
 # opaque and minimum blending do not support changing alpha (opacity)
 NO_OPACITY_BLENDING_MODES = {str(Blending.MINIMUM), str(Blending.OPAQUE)}
diff --git a/napari/_qt/layer_controls/qt_layer_controls_container.py b/napari/_qt/layer_controls/qt_layer_controls_container.py
index f9ffad42..f1b0b482 100644
--- a/napari/_qt/layer_controls/qt_layer_controls_container.py
+++ b/napari/_qt/layer_controls/qt_layer_controls_container.py
@@ -1,15 +1,23 @@
 from qtpy.QtWidgets import QFrame, QStackedWidget
 
-from ...layers import Image, Labels, Points, Shapes, Surface, Tracks, Vectors
-from ...utils import config
-from ...utils.translations import trans
-from .qt_image_controls import QtImageControls
-from .qt_labels_controls import QtLabelsControls
-from .qt_points_controls import QtPointsControls
-from .qt_shapes_controls import QtShapesControls
-from .qt_surface_controls import QtSurfaceControls
-from .qt_tracks_controls import QtTracksControls
-from .qt_vectors_controls import QtVectorsControls
+from napari._qt.layer_controls.qt_image_controls import QtImageControls
+from napari._qt.layer_controls.qt_labels_controls import QtLabelsControls
+from napari._qt.layer_controls.qt_points_controls import QtPointsControls
+from napari._qt.layer_controls.qt_shapes_controls import QtShapesControls
+from napari._qt.layer_controls.qt_surface_controls import QtSurfaceControls
+from napari._qt.layer_controls.qt_tracks_controls import QtTracksControls
+from napari._qt.layer_controls.qt_vectors_controls import QtVectorsControls
+from napari.layers import (
+    Image,
+    Labels,
+    Points,
+    Shapes,
+    Surface,
+    Tracks,
+    Vectors,
+)
+from napari.utils import config
+from napari.utils.translations import trans
 
 layer_to_controls = {
     Labels: QtLabelsControls,
@@ -22,7 +30,7 @@ layer_to_controls = {
 }
 
 if config.async_loading:
-    from ...layers.image.experimental.octree_image import _OctreeImageBase
+    from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
     # The user visible layer controls for OctreeImage layers are identical
     # to the regular image layer controls, for now.
diff --git a/napari/_qt/layer_controls/qt_points_controls.py b/napari/_qt/layer_controls/qt_points_controls.py
index b169da82..7ed00c81 100644
--- a/napari/_qt/layer_controls/qt_points_controls.py
+++ b/napari/_qt/layer_controls/qt_points_controls.py
@@ -4,15 +4,18 @@ import numpy as np
 from qtpy.QtCore import Qt, Slot
 from qtpy.QtWidgets import QButtonGroup, QCheckBox, QComboBox, QHBoxLayout
 
-from ...layers.points._points_constants import SYMBOL_TRANSLATION, Mode
-from ...utils.action_manager import action_manager
-from ...utils.events import disconnect_events
-from ...utils.translations import trans
-from ..utils import disable_with_opacity, qt_signals_blocked
-from ..widgets._slider_compat import QSlider
-from ..widgets.qt_color_swatch import QColorSwatchEdit
-from ..widgets.qt_mode_buttons import QtModePushButton, QtModeRadioButton
-from .qt_layer_controls_base import QtLayerControls
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import disable_with_opacity, qt_signals_blocked
+from napari._qt.widgets._slider_compat import QSlider
+from napari._qt.widgets.qt_color_swatch import QColorSwatchEdit
+from napari._qt.widgets.qt_mode_buttons import (
+    QtModePushButton,
+    QtModeRadioButton,
+)
+from napari.layers.points._points_constants import SYMBOL_TRANSLATION, Mode
+from napari.utils.action_manager import action_manager
+from napari.utils.events import disconnect_events
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_shapes_controls.py b/napari/_qt/layer_controls/qt_shapes_controls.py
index b6d9b7b3..52cb7ff9 100644
--- a/napari/_qt/layer_controls/qt_shapes_controls.py
+++ b/napari/_qt/layer_controls/qt_shapes_controls.py
@@ -5,16 +5,19 @@ import numpy as np
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QButtonGroup, QCheckBox, QGridLayout
 
-from ...layers.shapes._shapes_constants import Mode
-from ...utils.action_manager import action_manager
-from ...utils.events import disconnect_events
-from ...utils.interactions import Shortcut
-from ...utils.translations import trans
-from ..utils import disable_with_opacity, qt_signals_blocked
-from ..widgets._slider_compat import QSlider
-from ..widgets.qt_color_swatch import QColorSwatchEdit
-from ..widgets.qt_mode_buttons import QtModePushButton, QtModeRadioButton
-from .qt_layer_controls_base import QtLayerControls
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import disable_with_opacity, qt_signals_blocked
+from napari._qt.widgets._slider_compat import QSlider
+from napari._qt.widgets.qt_color_swatch import QColorSwatchEdit
+from napari._qt.widgets.qt_mode_buttons import (
+    QtModePushButton,
+    QtModeRadioButton,
+)
+from napari.layers.shapes._shapes_constants import Mode
+from napari.utils.action_manager import action_manager
+from napari.utils.events import disconnect_events
+from napari.utils.interactions import Shortcut
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_surface_controls.py b/napari/_qt/layer_controls/qt_surface_controls.py
index 953664d1..13792c99 100644
--- a/napari/_qt/layer_controls/qt_surface_controls.py
+++ b/napari/_qt/layer_controls/qt_surface_controls.py
@@ -2,9 +2,11 @@ from typing import TYPE_CHECKING
 
 from qtpy.QtWidgets import QComboBox, QHBoxLayout
 
-from ...layers.surface._surface_constants import SHADING_TRANSLATION
-from ...utils.translations import trans
-from .qt_image_controls_base import QtBaseImageControls
+from napari._qt.layer_controls.qt_image_controls_base import (
+    QtBaseImageControls,
+)
+from napari.layers.surface._surface_constants import SHADING_TRANSLATION
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_tracks_controls.py b/napari/_qt/layer_controls/qt_tracks_controls.py
index d7841757..fc9f8df6 100644
--- a/napari/_qt/layer_controls/qt_tracks_controls.py
+++ b/napari/_qt/layer_controls/qt_tracks_controls.py
@@ -3,10 +3,10 @@ from typing import TYPE_CHECKING
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QCheckBox, QComboBox, QSlider
 
-from ...utils.colormaps import AVAILABLE_COLORMAPS
-from ...utils.translations import trans
-from ..utils import qt_signals_blocked
-from .qt_layer_controls_base import QtLayerControls
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import qt_signals_blocked
+from napari.utils.colormaps import AVAILABLE_COLORMAPS
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/layer_controls/qt_vectors_controls.py b/napari/_qt/layer_controls/qt_vectors_controls.py
index a6d4a5c1..5cd4a69e 100644
--- a/napari/_qt/layer_controls/qt_vectors_controls.py
+++ b/napari/_qt/layer_controls/qt_vectors_controls.py
@@ -4,11 +4,11 @@ import numpy as np
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QCheckBox, QComboBox, QDoubleSpinBox, QLabel
 
-from ...layers.utils._color_manager_constants import ColorMode
-from ...utils.translations import trans
-from ..utils import qt_signals_blocked
-from ..widgets.qt_color_swatch import QColorSwatchEdit
-from .qt_layer_controls_base import QtLayerControls
+from napari._qt.layer_controls.qt_layer_controls_base import QtLayerControls
+from napari._qt.utils import qt_signals_blocked
+from napari._qt.widgets.qt_color_swatch import QColorSwatchEdit
+from napari.layers.utils._color_manager_constants import ColorMode
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import napari.layers
diff --git a/napari/_qt/menus/__init__.py b/napari/_qt/menus/__init__.py
index 06a8fa3d..a800abff 100644
--- a/napari/_qt/menus/__init__.py
+++ b/napari/_qt/menus/__init__.py
@@ -1,7 +1,7 @@
-from .debug_menu import DebugMenu
-from .file_menu import FileMenu
-from .plugins_menu import PluginsMenu
-from .window_menu import WindowMenu
+from napari._qt.menus.debug_menu import DebugMenu
+from napari._qt.menus.file_menu import FileMenu
+from napari._qt.menus.plugins_menu import PluginsMenu
+from napari._qt.menus.window_menu import WindowMenu
 
 __all__ = [
     'DebugMenu',
diff --git a/napari/_qt/menus/_util.py b/napari/_qt/menus/_util.py
index cf707139..0c9b2645 100644
--- a/napari/_qt/menus/_util.py
+++ b/napari/_qt/menus/_util.py
@@ -6,7 +6,7 @@ from qtpy.QtWidgets import QAction, QMenu
 if TYPE_CHECKING:
     from typing_extensions import TypedDict
 
-    from ...utils.events import EventEmitter
+    from napari.utils.events import EventEmitter
 
     try:
         from qtpy.QtCore import SignalInstance
diff --git a/napari/_qt/menus/debug_menu.py b/napari/_qt/menus/debug_menu.py
index 0cfe5f46..94f0054d 100644
--- a/napari/_qt/menus/debug_menu.py
+++ b/napari/_qt/menus/debug_menu.py
@@ -9,13 +9,13 @@ from typing import TYPE_CHECKING
 from qtpy.QtCore import QTimer
 from qtpy.QtWidgets import QFileDialog
 
-from ...utils import perf
-from ...utils.history import get_save_history, update_save_history
-from ...utils.translations import trans
-from ._util import NapariMenu, populate_menu
+from napari._qt.menus._util import NapariMenu, populate_menu
+from napari.utils import perf
+from napari.utils.history import get_save_history, update_save_history
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..qt_main_window import Window
+    from napari._qt.qt_main_window import Window
 
 
 class DebugMenu(NapariMenu):
diff --git a/napari/_qt/menus/file_menu.py b/napari/_qt/menus/file_menu.py
index 280670af..2b5bd370 100644
--- a/napari/_qt/menus/file_menu.py
+++ b/napari/_qt/menus/file_menu.py
@@ -4,21 +4,20 @@ from typing import TYPE_CHECKING
 from qtpy.QtCore import QSize
 from qtpy.QtWidgets import QAction
 
+from napari._qt.dialogs.preferences_dialog import PreferencesDialog
 from napari._qt.dialogs.qt_reader_dialog import handle_gui_reading
+from napari._qt.dialogs.screenshot_dialog import ScreenshotDialog
+from napari._qt.menus._util import NapariMenu, populate_menu
+from napari.components._viewer_key_bindings import register_viewer_action
 from napari.errors.reader_errors import MultipleReaderError
-
-from ...components._viewer_key_bindings import register_viewer_action
-from ...settings import get_settings
-from ...utils.history import get_save_history, update_save_history
-from ...utils.misc import running_as_bundled_app
-from ...utils.translations import trans
-from ..dialogs.preferences_dialog import PreferencesDialog
-from ..dialogs.screenshot_dialog import ScreenshotDialog
-from ._util import NapariMenu, populate_menu
+from napari.settings import get_settings
+from napari.utils.history import get_save_history, update_save_history
+from napari.utils.misc import running_as_bundled_app
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ... import Viewer
-    from ..qt_main_window import Window
+    from napari import Viewer
+    from napari._qt.qt_main_window import Window
 
 
 class FileMenu(NapariMenu):
@@ -141,7 +140,7 @@ class FileMenu(NapariMenu):
 
         self._pref_dialog = None
 
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         plugin_manager.discover_sample_data()
         plugin_manager.events.disabled.connect(self._rebuild_samples_menu)
@@ -191,7 +190,7 @@ class FileMenu(NapariMenu):
         self._pref_dialog = None
 
     def _rebuild_samples_menu(self):
-        from ...plugins import _npe2, menu_item_template, plugin_manager
+        from napari.plugins import _npe2, menu_item_template, plugin_manager
 
         self.open_sample_menu.clear()
 
diff --git a/napari/_qt/menus/plugins_menu.py b/napari/_qt/menus/plugins_menu.py
index cf4e38d7..f7560f4c 100644
--- a/napari/_qt/menus/plugins_menu.py
+++ b/napari/_qt/menus/plugins_menu.py
@@ -3,14 +3,14 @@ from typing import TYPE_CHECKING, Sequence
 
 from qtpy.QtWidgets import QAction
 
-from ...plugins import _npe2
-from ...utils.translations import trans
-from ..dialogs.qt_plugin_dialog import QtPluginDialog
-from ..dialogs.qt_plugin_report import QtPluginErrReporter
-from ._util import NapariMenu
+from napari._qt.dialogs.qt_plugin_dialog import QtPluginDialog
+from napari._qt.dialogs.qt_plugin_report import QtPluginErrReporter
+from napari._qt.menus._util import NapariMenu
+from napari.plugins import _npe2
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..qt_main_window import Window
+    from napari._qt.qt_main_window import Window
 
 
 class PluginsMenu(NapariMenu):
@@ -18,7 +18,7 @@ class PluginsMenu(NapariMenu):
         self._win = window
         super().__init__(trans._('&Plugins'), window._qt_window)
 
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         _npe2.index_npe1_adapters()
 
@@ -56,7 +56,7 @@ class PluginsMenu(NapariMenu):
                 self._win._remove_dock_widget(event=event)
 
     def _add_registered_widget(self, event=None, call_all=False):
-        from ...plugins import plugin_manager
+        from napari.plugins import plugin_manager
 
         # eg ('dock', ('my_plugin', {'My widget': MyWidget}))
         for hook_type, (plugin_name, widgets) in chain(
@@ -68,7 +68,7 @@ class PluginsMenu(NapariMenu):
     def _add_plugin_actions(
         self, hook_type: str, plugin_name: str, widgets: Sequence[str]
     ):
-        from ...plugins import menu_item_template
+        from napari.plugins import menu_item_template
 
         multiprovider = len(widgets) > 1
         if multiprovider:
diff --git a/napari/_qt/menus/window_menu.py b/napari/_qt/menus/window_menu.py
index b4bd3b1a..c43ff0aa 100644
--- a/napari/_qt/menus/window_menu.py
+++ b/napari/_qt/menus/window_menu.py
@@ -1,10 +1,10 @@
 from typing import TYPE_CHECKING
 
-from ...utils.translations import trans
-from ._util import NapariMenu, populate_menu
+from napari._qt.menus._util import NapariMenu, populate_menu
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..qt_main_window import Window
+    from napari._qt.qt_main_window import Window
 
 
 class WindowMenu(NapariMenu):
diff --git a/napari/_qt/perf/qt_event_tracing.py b/napari/_qt/perf/qt_event_tracing.py
index 774c3b5a..8e5fbfc0 100644
--- a/napari/_qt/perf/qt_event_tracing.py
+++ b/napari/_qt/perf/qt_event_tracing.py
@@ -9,8 +9,8 @@ dockable QtPerformance widget.
 from qtpy.QtCore import QEvent
 from qtpy.QtWidgets import QApplication, QWidget
 
-from ...utils import perf
-from ...utils.translations import trans
+from napari.utils import perf
+from napari.utils.translations import trans
 
 
 class QApplicationWithTracing(QApplication):
diff --git a/napari/_qt/perf/qt_performance.py b/napari/_qt/perf/qt_performance.py
index 5e746e85..8fdf0a16 100644
--- a/napari/_qt/perf/qt_performance.py
+++ b/napari/_qt/perf/qt_performance.py
@@ -16,8 +16,8 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils import perf
-from ...utils.translations import trans
+from napari.utils import perf
+from napari.utils.translations import trans
 
 
 class TextLog(QTextEdit):
diff --git a/napari/_qt/qt_event_filters.py b/napari/_qt/qt_event_filters.py
index 3d9bb850..f43c0379 100644
--- a/napari/_qt/qt_event_filters.py
+++ b/napari/_qt/qt_event_filters.py
@@ -5,7 +5,7 @@ import html
 from qtpy.QtCore import QEvent, QObject
 from qtpy.QtWidgets import QWidget
 
-from .utils import qt_might_be_rich_text
+from napari._qt.utils import qt_might_be_rich_text
 
 
 class QtToolTipEventFilter(QObject):
diff --git a/napari/_qt/qt_event_loop.py b/napari/_qt/qt_event_loop.py
index d00e4d04..4590d10b 100644
--- a/napari/_qt/qt_event_loop.py
+++ b/napari/_qt/qt_event_loop.py
@@ -11,24 +11,24 @@ from qtpy.QtCore import QDir, Qt
 from qtpy.QtGui import QIcon
 from qtpy.QtWidgets import QApplication
 
-from .. import Viewer, __version__
-from ..resources._icons import _theme_path
-from ..settings import get_settings
-from ..utils import config, perf
-from ..utils.notifications import (
-    notification_manager,
-    show_console_notification,
-)
-from ..utils.perf import perf_config
-from ..utils.theme import _themes
-from ..utils.translations import trans
-from .dialogs.qt_notification import NapariQtNotification
-from .qt_event_filters import QtToolTipEventFilter
-from .qthreading import (
+from napari import Viewer, __version__
+from napari._qt.dialogs.qt_notification import NapariQtNotification
+from napari._qt.qt_event_filters import QtToolTipEventFilter
+from napari._qt.qthreading import (
     register_threadworker_processors,
     wait_for_workers_to_quit,
 )
-from .utils import _maybe_allow_interrupt
+from napari._qt.utils import _maybe_allow_interrupt
+from napari.resources._icons import _theme_path
+from napari.settings import get_settings
+from napari.utils import config, perf
+from napari.utils.notifications import (
+    notification_manager,
+    show_console_notification,
+)
+from napari.utils.perf import perf_config
+from napari.utils.theme import _themes
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from IPython import InteractiveShell
@@ -155,7 +155,9 @@ def get_app(
             argv[0] = "napari"
 
         if perf_config and perf_config.trace_qt_events:
-            from .perf.qt_event_tracing import QApplicationWithTracing
+            from napari._qt.perf.qt_event_tracing import (
+                QApplicationWithTracing,
+            )
 
             app = QApplicationWithTracing(argv)
         else:
@@ -246,13 +248,13 @@ def quit_app():
 
     if config.monitor:
         # Stop the monitor service if we were using it
-        from ..components.experimental.monitor import monitor
+        from napari.components.experimental.monitor import monitor
 
         monitor.stop()
 
     if config.async_loading:
         # Shutdown the chunkloader
-        from ..components.experimental.chunk import chunk_loader
+        from napari.components.experimental.chunk import chunk_loader
 
         chunk_loader.shutdown()
 
@@ -292,7 +294,7 @@ def gui_qt(*, startup_logo=False, gui_exceptions=False, force=False):
     app = get_app()
     splash = None
     if startup_logo and app.applicationName() == 'napari':
-        from .widgets.qt_splash_screen import NapariSplashScreen
+        from napari._qt.widgets.qt_splash_screen import NapariSplashScreen
 
         splash = NapariSplashScreen()
         splash.close()
diff --git a/napari/_qt/qt_main_window.py b/napari/_qt/qt_main_window.py
index 54e396cd..90f6e47f 100644
--- a/napari/_qt/qt_main_window.py
+++ b/napari/_qt/qt_main_window.py
@@ -38,32 +38,32 @@ from qtpy.QtWidgets import (
 )
 from superqt.utils import QSignalThrottler
 
-from .._app_model.constants import MenuId
-from ..plugins import menu_item_template as plugin_menu_item_template
-from ..plugins import plugin_manager
-from ..settings import get_settings
-from ..utils import perf
-from ..utils._proxies import PublicOnlyProxy
-from ..utils.io import imsave
-from ..utils.misc import in_ipython, in_jupyter, running_as_bundled_app
-from ..utils.notifications import Notification
-from ..utils.theme import _themes, get_system_theme
-from ..utils.translations import trans
-from . import menus
-from ._qapp_model import build_qmodel_menu
-from ._qapp_model.qactions import init_qactions
-from .dialogs.confirm_close_dialog import ConfirmCloseDialog
-from .dialogs.qt_activity_dialog import QtActivityDialog
-from .dialogs.qt_notification import NapariQtNotification
-from .qt_event_loop import NAPARI_ICON_PATH, get_app, quit_app
-from .qt_resources import get_stylesheet
-from .qt_viewer import QtViewer
-from .utils import QImg2array, qbytearray_to_str, str_to_qbytearray
-from .widgets.qt_viewer_dock_widget import (
+from napari._app_model.constants import MenuId
+from napari._qt import menus
+from napari._qt._qapp_model import build_qmodel_menu
+from napari._qt._qapp_model.qactions import init_qactions
+from napari._qt.dialogs.confirm_close_dialog import ConfirmCloseDialog
+from napari._qt.dialogs.qt_activity_dialog import QtActivityDialog
+from napari._qt.dialogs.qt_notification import NapariQtNotification
+from napari._qt.qt_event_loop import NAPARI_ICON_PATH, get_app, quit_app
+from napari._qt.qt_resources import get_stylesheet
+from napari._qt.qt_viewer import QtViewer
+from napari._qt.utils import QImg2array, qbytearray_to_str, str_to_qbytearray
+from napari._qt.widgets.qt_viewer_dock_widget import (
     _SHORTCUT_DEPRECATION_STRING,
     QtViewerDockWidget,
 )
-from .widgets.qt_viewer_status_bar import ViewerStatusBar
+from napari._qt.widgets.qt_viewer_status_bar import ViewerStatusBar
+from napari.plugins import menu_item_template as plugin_menu_item_template
+from napari.plugins import plugin_manager
+from napari.settings import get_settings
+from napari.utils import perf
+from napari.utils._proxies import PublicOnlyProxy
+from napari.utils.io import imsave
+from napari.utils.misc import in_ipython, in_jupyter, running_as_bundled_app
+from napari.utils.notifications import Notification
+from napari.utils.theme import _themes, get_system_theme
+from napari.utils.translations import trans
 
 _sentinel = object()
 
@@ -71,7 +71,7 @@ if TYPE_CHECKING:
     from magicgui.widgets import Widget
     from qtpy.QtGui import QImage
 
-    from ..viewer import Viewer
+    from napari.viewer import Viewer
 
 
 class _QtMainWindow(QMainWindow):
@@ -705,7 +705,7 @@ class Window:
             A 2-tuple containing (the DockWidget instance, the plugin widget
             instance).
         """
-        from ..plugins import _npe2
+        from napari.plugins import _npe2
 
         Widget = None
         dock_kwargs = {}
@@ -1259,7 +1259,7 @@ class Window:
         -------
         img : QImage
         """
-        from .utils import add_flash_animation
+        from napari._qt.utils import add_flash_animation
 
         if canvas_only:
             canvas = self._qt_viewer.canvas
@@ -1368,7 +1368,7 @@ class Window:
 
 def _instantiate_dock_widget(wdg_cls, viewer: 'Viewer'):
     # if the signature is looking a for a napari viewer, pass it.
-    from ..viewer import Viewer
+    from napari.viewer import Viewer
 
     kwargs = {}
     try:
diff --git a/napari/_qt/qt_resources/__init__.py b/napari/_qt/qt_resources/__init__.py
index 94f0a599..d53973de 100644
--- a/napari/_qt/qt_resources/__init__.py
+++ b/napari/_qt/qt_resources/__init__.py
@@ -1,8 +1,8 @@
 from pathlib import Path
 from typing import List, Optional
 
-from ...settings import get_settings
-from ._svg import QColoredSVGIcon
+from napari._qt.qt_resources._svg import QColoredSVGIcon
+from napari.settings import get_settings
 
 __all__ = ['get_stylesheet', 'QColoredSVGIcon']
 
@@ -42,7 +42,7 @@ def get_stylesheet(
                 stylesheet += f.read()
 
     if theme:
-        from ...utils.theme import get_theme, template
+        from napari.utils.theme import get_theme, template
 
         return template(stylesheet, **get_theme(theme, as_dict=True))
 
diff --git a/napari/_qt/qt_resources/_svg.py b/napari/_qt/qt_resources/_svg.py
index 707e16b2..f0aed695 100644
--- a/napari/_qt/qt_resources/_svg.py
+++ b/napari/_qt/qt_resources/_svg.py
@@ -46,7 +46,7 @@ class QColoredSVGIcon(QIcon):
         color: Optional[str] = None,
         opacity: float = 1.0,
     ) -> None:
-        from ...resources import get_colorized_svg
+        from napari.resources import get_colorized_svg
 
         self._svg = path_or_xml
         colorized = get_colorized_svg(path_or_xml, color, opacity)
@@ -81,7 +81,7 @@ class QColoredSVGIcon(QIcon):
             A pre-colored QColoredSVGIcon (which may still be recolored)
         """
         if not color and theme:
-            from ...utils.theme import get_theme
+            from napari.utils.theme import get_theme
 
             color = getattr(get_theme(theme, False), theme_key).as_hex()
 
@@ -105,7 +105,7 @@ class QColoredSVGIcon(QIcon):
         QColoredSVGIcon
             A colorizeable QIcon
         """
-        from ...resources import get_icon_path
+        from napari.resources import get_icon_path
 
         path = get_icon_path(icon_name)
         return QColoredSVGIcon(path)
diff --git a/napari/_qt/qt_viewer.py b/napari/_qt/qt_viewer.py
index 5704e7fd..c6282e4e 100644
--- a/napari/_qt/qt_viewer.py
+++ b/napari/_qt/qt_viewer.py
@@ -12,50 +12,57 @@ from qtpy.QtCore import QCoreApplication, QObject, Qt
 from qtpy.QtGui import QCursor, QGuiApplication
 from qtpy.QtWidgets import QFileDialog, QSplitter, QVBoxLayout, QWidget
 
-from napari_builtins.io import imsave_extensions
-
-from ..components.camera import Camera
-from ..components.layerlist import LayerList
-from ..components.overlays._interaction_box_mouse_bindings import (
+from napari._qt.containers import QtLayerList
+from napari._qt.dialogs.qt_reader_dialog import handle_gui_reading
+from napari._qt.dialogs.screenshot_dialog import ScreenshotDialog
+from napari._qt.perf.qt_performance import QtPerformance
+from napari._qt.utils import (
+    QImg2array,
+    circle_pixmap,
+    crosshair_pixmap,
+    square_pixmap,
+)
+from napari._qt.widgets.qt_dims import QtDims
+from napari._qt.widgets.qt_viewer_buttons import (
+    QtLayerButtons,
+    QtViewerButtons,
+)
+from napari._qt.widgets.qt_viewer_dock_widget import QtViewerDockWidget
+from napari._qt.widgets.qt_welcome import QtWidgetOverlay
+from napari.components.camera import Camera
+from napari.components.layerlist import LayerList
+from napari.components.overlays._interaction_box_mouse_bindings import (
     InteractionBoxMouseBindings,
 )
-from ..errors import MultipleReaderError, ReaderPluginError
-from ..layers.base.base import Layer
-from ..plugins import _npe2
-from ..settings import get_settings
-from ..utils import config, perf
-from ..utils._proxies import ReadOnlyWrapper
-from ..utils.action_manager import action_manager
-from ..utils.colormaps.standardize_color import transform_color
-from ..utils.history import (
+from napari.errors import MultipleReaderError, ReaderPluginError
+from napari.layers.base.base import Layer
+from napari.plugins import _npe2
+from napari.settings import get_settings
+from napari.utils import config, perf
+from napari.utils._proxies import ReadOnlyWrapper
+from napari.utils.action_manager import action_manager
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.history import (
     get_open_history,
     get_save_history,
     update_open_history,
     update_save_history,
 )
-from ..utils.interactions import (
+from napari.utils.interactions import (
     mouse_double_click_callbacks,
     mouse_move_callbacks,
     mouse_press_callbacks,
     mouse_release_callbacks,
     mouse_wheel_callbacks,
 )
-from ..utils.io import imsave
-from ..utils.key_bindings import KeymapHandler
-from ..utils.misc import in_ipython, in_jupyter
-from ..utils.theme import get_theme
-from ..utils.translations import trans
-from .containers import QtLayerList
-from .dialogs.qt_reader_dialog import handle_gui_reading
-from .dialogs.screenshot_dialog import ScreenshotDialog
-from .perf.qt_performance import QtPerformance
-from .utils import QImg2array, circle_pixmap, crosshair_pixmap, square_pixmap
-from .widgets.qt_dims import QtDims
-from .widgets.qt_viewer_buttons import QtLayerButtons, QtViewerButtons
-from .widgets.qt_viewer_dock_widget import QtViewerDockWidget
-from .widgets.qt_welcome import QtWidgetOverlay
-
-from .._vispy import (  # isort:skip
+from napari.utils.io import imsave
+from napari.utils.key_bindings import KeymapHandler
+from napari.utils.misc import in_ipython, in_jupyter
+from napari.utils.theme import get_theme
+from napari.utils.translations import trans
+from napari_builtins.io import imsave_extensions
+
+from napari._vispy import (  # isort:skip
     VispyAxesOverlay,
     VispyCamera,
     VispyCanvas,
@@ -69,8 +76,8 @@ from .._vispy import (  # isort:skip
 if TYPE_CHECKING:
     from npe2.manifest.contributions import WriterContribution
 
-    from ..components import ViewerModel
-    from .layer_controls import QtLayerControlsContainer
+    from napari._qt.layer_controls import QtLayerControlsContainer
+    from napari.components import ViewerModel
 
 
 def _npe2_decode_selected_filter(
@@ -276,7 +283,9 @@ class QtViewer(QSplitter):
         # moved from the old layerlist... still feels misplaced.
         # can you help me move this elsewhere?
         if config.async_loading:
-            from .experimental.qt_chunk_receiver import QtChunkReceiver
+            from napari._qt.experimental.qt_chunk_receiver import (
+                QtChunkReceiver,
+            )
 
             # The QtChunkReceiver object allows the ChunkLoader to pass newly
             # loaded chunks to the layers that requested them.
@@ -294,7 +303,7 @@ class QtViewer(QSplitter):
     def controls(self) -> QtLayerControlsContainer:
         if self._controls is None:
             # Avoid circular import.
-            from .layer_controls import QtLayerControlsContainer
+            from napari._qt.layer_controls import QtLayerControlsContainer
 
             self._controls = QtLayerControlsContainer(self.viewer)
         return self._controls
@@ -674,7 +683,7 @@ class QtViewer(QSplitter):
         # CAN REMOVE THIS AFTER DEPRECATION IS DONE, see self.screenshot.
         img = self.canvas.native.grabFramebuffer()
         if flash:
-            from .utils import add_flash_animation
+            from napari._qt.utils import add_flash_animation
 
             # Here we are actually applying the effect to the `_canvas_overlay`
             # and not # the `native` widget because it does not work on the
@@ -849,7 +858,9 @@ class QtViewer(QSplitter):
 
     def _toggle_chunk_outlines(self):
         """Toggle whether we are drawing outlines around the chunks."""
-        from ..layers.image.experimental.octree_image import _OctreeImageBase
+        from napari.layers.image.experimental.octree_image import (
+            _OctreeImageBase,
+        )
 
         for layer in self.viewer.layers:
             if isinstance(layer, _OctreeImageBase):
@@ -1223,8 +1234,8 @@ class QtViewer(QSplitter):
 
 
 if TYPE_CHECKING:
-    from ..components.experimental.remote import RemoteManager
-    from .experimental.qt_poll import QtPoll
+    from napari._qt.experimental.qt_poll import QtPoll
+    from napari.components.experimental.remote import RemoteManager
 
 
 def _create_qt_poll(parent: QObject, camera: Camera) -> Optional[QtPoll]:
@@ -1255,7 +1266,7 @@ def _create_qt_poll(parent: QObject, camera: Camera) -> Optional[QtPoll]:
     if not config.async_octree and not config.monitor:
         return None
 
-    from .experimental.qt_poll import QtPoll
+    from napari._qt.experimental.qt_poll import QtPoll
 
     qt_poll = QtPoll(parent)
     camera.events.connect(qt_poll.on_camera)
@@ -1277,8 +1288,8 @@ def _create_remote_manager(
     if not config.monitor:
         return None  # Not using the monitor at all
 
-    from ..components.experimental.monitor import monitor
-    from ..components.experimental.remote import RemoteManager
+    from napari.components.experimental.monitor import monitor
+    from napari.components.experimental.remote import RemoteManager
 
     # Start the monitor so we can access its events. The monitor has no
     # dependencies to napari except to utils.Event.
diff --git a/napari/_qt/qthreading.py b/napari/_qt/qthreading.py
index f02f1219..b043b655 100644
--- a/napari/_qt/qthreading.py
+++ b/napari/_qt/qthreading.py
@@ -16,8 +16,8 @@ from typing import (
 from superqt.utils import _qthreading
 from typing_extensions import ParamSpec
 
-from ..utils.progress import progress
-from ..utils.translations import trans
+from napari.utils.progress import progress
+from napari.utils.translations import trans
 
 wait_for_workers_to_quit = _qthreading.WorkerBase.await_workers
 
@@ -29,12 +29,12 @@ class _NotifyingMixin:
         self.warned.connect(self._relay_warning)
 
     def _relay_error(self, exc: Exception):
-        from ..utils.notifications import notification_manager
+        from napari.utils.notifications import notification_manager
 
         notification_manager.receive_error(type(exc), exc, exc.__traceback__)
 
     def _relay_warning(self, show_warn_args: tuple):
-        from ..utils.notifications import notification_manager
+        from napari.utils.notifications import notification_manager
 
         notification_manager.receive_warning(*show_warn_args)
 
@@ -321,7 +321,7 @@ _new_worker_qthread = _qthreading.new_worker_qthread
 
 
 def _add_worker_data(worker: FunctionWorker, return_type, source=None):
-    from .._app_model.injection import _processors
+    from napari._app_model.injection import _processors
 
     cb = _processors._add_layer_data_to_viewer
     worker.signals.returned.connect(
@@ -332,7 +332,7 @@ def _add_worker_data(worker: FunctionWorker, return_type, source=None):
 def _add_worker_data_from_tuple(
     worker: FunctionWorker, return_type, source=None
 ):
-    from .._app_model.injection import _processors
+    from napari._app_model.injection import _processors
 
     cb = _processors._add_layer_data_tuples_to_viewer
     worker.signals.returned.connect(
@@ -345,10 +345,10 @@ def register_threadworker_processors():
 
     import magicgui
 
-    from .. import layers, types
-    from .._app_model import get_app
-    from ..types import LayerDataTuple
-    from ..utils import _magicgui as _mgui
+    from napari import layers, types
+    from napari._app_model import get_app
+    from napari.types import LayerDataTuple
+    from napari.utils import _magicgui as _mgui
 
     app = get_app()
 
diff --git a/napari/_qt/utils.py b/napari/_qt/utils.py
index 9ad5d6ff..9a5ab59e 100644
--- a/napari/_qt/utils.py
+++ b/napari/_qt/utils.py
@@ -28,10 +28,10 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ..utils.colormaps.standardize_color import transform_color
-from ..utils.events.custom_types import Array
-from ..utils.misc import is_sequence
-from ..utils.translations import trans
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.events.custom_types import Array
+from napari.utils.misc import is_sequence
+from napari.utils.translations import trans
 
 QBYTE_FLAG = "!QBYTE_"
 RICH_TEXT_PATTERN = re.compile("<[^\n]+>")
diff --git a/napari/_qt/widgets/qt_color_swatch.py b/napari/_qt/widgets/qt_color_swatch.py
index a764fa07..cff53bf8 100644
--- a/napari/_qt/widgets/qt_color_swatch.py
+++ b/napari/_qt/widgets/qt_color_swatch.py
@@ -15,14 +15,14 @@ from qtpy.QtWidgets import (
 )
 from vispy.color import get_color_dict
 
-from ...utils.colormaps.colormap_utils import ColorType
-from ...utils.colormaps.standardize_color import (
+from napari._qt.dialogs.qt_modal import QtPopup
+from napari.utils.colormaps.colormap_utils import ColorType
+from napari.utils.colormaps.standardize_color import (
     hex_to_name,
     rgb_to_hex,
     transform_color,
 )
-from ...utils.translations import trans
-from ..dialogs.qt_modal import QtPopup
+from napari.utils.translations import trans
 
 # matches any 3- or 4-tuple of int or float, with or without parens
 # captures the numbers into groups.
diff --git a/napari/_qt/widgets/qt_dict_table.py b/napari/_qt/widgets/qt_dict_table.py
index d75c401b..dcffcc8d 100644
--- a/napari/_qt/widgets/qt_dict_table.py
+++ b/napari/_qt/widgets/qt_dict_table.py
@@ -5,7 +5,7 @@ from qtpy.QtCore import QSize, Slot
 from qtpy.QtGui import QFont
 from qtpy.QtWidgets import QTableWidget, QTableWidgetItem
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 email_pattern = re.compile(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$")
 url_pattern = re.compile(
diff --git a/napari/_qt/widgets/qt_dims.py b/napari/_qt/widgets/qt_dims.py
index f19e6e55..fe264998 100644
--- a/napari/_qt/widgets/qt_dims.py
+++ b/napari/_qt/widgets/qt_dims.py
@@ -5,10 +5,10 @@ import numpy as np
 from qtpy.QtGui import QFont, QFontMetrics
 from qtpy.QtWidgets import QLineEdit, QSizePolicy, QVBoxLayout, QWidget
 
-from ...components.dims import Dims
-from ...settings._constants import LoopMode
-from ...utils.translations import trans
-from .qt_dims_slider import QtDimSliderWidget
+from napari._qt.widgets.qt_dims_slider import QtDimSliderWidget
+from napari.components.dims import Dims
+from napari.settings._constants import LoopMode
+from napari.utils.translations import trans
 
 
 class QtDims(QWidget):
diff --git a/napari/_qt/widgets/qt_dims_slider.py b/napari/_qt/widgets/qt_dims_slider.py
index d5adfcbf..6ec59e81 100644
--- a/napari/_qt/widgets/qt_dims_slider.py
+++ b/napari/_qt/widgets/qt_dims_slider.py
@@ -17,13 +17,13 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...settings import get_settings
-from ...settings._constants import LoopMode
-from ...utils.events.event_utils import connect_setattr_value
-from ...utils.translations import trans
-from ..dialogs.qt_modal import QtPopup
-from ..qthreading import _new_worker_qthread
-from .qt_scrollbar import ModifiedScrollBar
+from napari._qt.dialogs.qt_modal import QtPopup
+from napari._qt.qthreading import _new_worker_qthread
+from napari._qt.widgets.qt_scrollbar import ModifiedScrollBar
+from napari.settings import get_settings
+from napari.settings._constants import LoopMode
+from napari.utils.events.event_utils import connect_setattr_value
+from napari.utils.translations import trans
 
 
 class QtDimSliderWidget(QWidget):
diff --git a/napari/_qt/widgets/qt_dims_sorter.py b/napari/_qt/widgets/qt_dims_sorter.py
index 4e75b5af..923ebc71 100644
--- a/napari/_qt/widgets/qt_dims_sorter.py
+++ b/napari/_qt/widgets/qt_dims_sorter.py
@@ -3,14 +3,14 @@ from typing import TYPE_CHECKING, Tuple, Union
 import numpy as np
 from qtpy.QtWidgets import QGridLayout, QLabel, QWidget
 
-from ..._qt.containers import QtListView
-from ...components import Dims
-from ...utils.events import SelectableEventedList
-from ...utils.translations import trans
-from .qt_tooltip import QtToolTipLabel
+from napari._qt.containers import QtListView
+from napari._qt.widgets.qt_tooltip import QtToolTipLabel
+from napari.components import Dims
+from napari.utils.events import SelectableEventedList
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ...viewer import Viewer
+    from napari.viewer import Viewer
 
 
 class AxisModel:
diff --git a/napari/_qt/widgets/qt_extension2reader.py b/napari/_qt/widgets/qt_extension2reader.py
index e27f2fd9..458adc37 100644
--- a/napari/_qt/widgets/qt_extension2reader.py
+++ b/napari/_qt/widgets/qt_extension2reader.py
@@ -20,9 +20,8 @@ from napari.plugins.utils import (
     get_filename_patterns_for_reader,
     get_potential_readers,
 )
-
-from ...settings import get_settings
-from ...utils.translations import trans
+from napari.settings import get_settings
+from napari.utils.translations import trans
 
 
 class Extension2ReaderTable(QWidget):
diff --git a/napari/_qt/widgets/qt_highlight_preview.py b/napari/_qt/widgets/qt_highlight_preview.py
index 6f977182..aaa5ef19 100644
--- a/napari/_qt/widgets/qt_highlight_preview.py
+++ b/napari/_qt/widgets/qt_highlight_preview.py
@@ -11,7 +11,7 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils.translations import translator
+from napari.utils.translations import translator
 
 trans = translator.load()
 
diff --git a/napari/_qt/widgets/qt_keyboard_settings.py b/napari/_qt/widgets/qt_keyboard_settings.py
index 0588137f..cd4f652e 100644
--- a/napari/_qt/widgets/qt_keyboard_settings.py
+++ b/napari/_qt/widgets/qt_keyboard_settings.py
@@ -21,12 +21,12 @@ from qtpy.QtWidgets import (
 )
 from vispy.util import keys
 
-from ...layers import Image, Labels, Points, Shapes, Surface, Vectors
-from ...settings import get_settings
-from ...utils.action_manager import action_manager
-from ...utils.interactions import Shortcut
-from ...utils.translations import trans
-from ..widgets.qt_message_popup import WarnPopup
+from napari._qt.widgets.qt_message_popup import WarnPopup
+from napari.layers import Image, Labels, Points, Shapes, Surface, Vectors
+from napari.settings import get_settings
+from napari.utils.action_manager import action_manager
+from napari.utils.interactions import Shortcut
+from napari.utils.translations import trans
 
 # Dict used to format strings returned from converted key press events.
 # For example, the ShortcutTranslator returns 'Ctrl' instead of 'Control'.
diff --git a/napari/_qt/widgets/qt_message_popup.py b/napari/_qt/widgets/qt_message_popup.py
index 1c5462fb..ccd810c4 100644
--- a/napari/_qt/widgets/qt_message_popup.py
+++ b/napari/_qt/widgets/qt_message_popup.py
@@ -1,8 +1,8 @@
 from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QDialog, QLabel, QPushButton, QVBoxLayout
 
-from ...settings import get_settings
-from ..qt_resources import get_stylesheet
+from napari._qt.qt_resources import get_stylesheet
+from napari.settings import get_settings
 
 
 class WarnPopup(QDialog):
diff --git a/napari/_qt/widgets/qt_plugin_sorter.py b/napari/_qt/widgets/qt_plugin_sorter.py
index d204967f..2a014a48 100644
--- a/napari/_qt/widgets/qt_plugin_sorter.py
+++ b/napari/_qt/widgets/qt_plugin_sorter.py
@@ -22,11 +22,11 @@ from qtpy.QtWidgets import (
 )
 from superqt import QElidingLabel
 
-from ...plugins import plugin_manager as napari_plugin_manager
-from ...settings import get_settings
-from ...utils.translations import trans
-from ..utils import drag_with_pixmap
-from .qt_tooltip import QtToolTipLabel
+from napari._qt.utils import drag_with_pixmap
+from napari._qt.widgets.qt_tooltip import QtToolTipLabel
+from napari.plugins import plugin_manager as napari_plugin_manager
+from napari.settings import get_settings
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from napari_plugin_engine import PluginManager
diff --git a/napari/_qt/widgets/qt_progress_bar.py b/napari/_qt/widgets/qt_progress_bar.py
index 187e0247..be6fad92 100644
--- a/napari/_qt/widgets/qt_progress_bar.py
+++ b/napari/_qt/widgets/qt_progress_bar.py
@@ -11,7 +11,7 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils.progress import progress
+from napari.utils.progress import progress
 
 
 class QtLabeledProgressBar(QWidget):
diff --git a/napari/_qt/widgets/qt_range_slider_popup.py b/napari/_qt/widgets/qt_range_slider_popup.py
index 0db57924..2df85046 100644
--- a/napari/_qt/widgets/qt_range_slider_popup.py
+++ b/napari/_qt/widgets/qt_range_slider_popup.py
@@ -2,7 +2,7 @@ from qtpy.QtCore import Qt
 from qtpy.QtWidgets import QApplication, QHBoxLayout
 from superqt import QLabeledDoubleRangeSlider
 
-from ..dialogs.qt_modal import QtPopup
+from napari._qt.dialogs.qt_modal import QtPopup
 
 
 class QRangeSliderPopup(QtPopup):
diff --git a/napari/_qt/widgets/qt_size_preview.py b/napari/_qt/widgets/qt_size_preview.py
index 213a7fed..c75b48fd 100644
--- a/napari/_qt/widgets/qt_size_preview.py
+++ b/napari/_qt/widgets/qt_size_preview.py
@@ -13,7 +13,7 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 class QtFontSizePreview(QFrame):
diff --git a/napari/_qt/widgets/qt_splash_screen.py b/napari/_qt/widgets/qt_splash_screen.py
index 873278df..d4c7a80d 100644
--- a/napari/_qt/widgets/qt_splash_screen.py
+++ b/napari/_qt/widgets/qt_splash_screen.py
@@ -2,7 +2,7 @@ from qtpy.QtCore import Qt
 from qtpy.QtGui import QPixmap
 from qtpy.QtWidgets import QSplashScreen
 
-from ..qt_event_loop import NAPARI_ICON_PATH, get_app
+from napari._qt.qt_event_loop import NAPARI_ICON_PATH, get_app
 
 
 class NapariSplashScreen(QSplashScreen):
diff --git a/napari/_qt/widgets/qt_theme_sample.py b/napari/_qt/widgets/qt_theme_sample.py
index 89bae63a..e1e004c0 100644
--- a/napari/_qt/widgets/qt_theme_sample.py
+++ b/napari/_qt/widgets/qt_theme_sample.py
@@ -41,9 +41,9 @@ from qtpy.QtWidgets import (
 )
 from superqt import QRangeSlider
 
-from ...utils.io import imsave
-from ..qt_resources import get_stylesheet
-from ..utils import QImg2array
+from napari._qt.qt_resources import get_stylesheet
+from napari._qt.utils import QImg2array
+from napari.utils.io import imsave
 
 blurb = """
 <h3>Heading</h3>
@@ -156,8 +156,8 @@ class SampleWidget(QWidget):
 if __name__ == "__main__":
     import sys
 
-    from ...utils.theme import available_themes
-    from ..qt_event_loop import get_app
+    from napari._qt.qt_event_loop import get_app
+    from napari.utils.theme import available_themes
 
     themes = [sys.argv[1]] if len(sys.argv) > 1 else available_themes()
     app = get_app()
diff --git a/napari/_qt/widgets/qt_viewer_buttons.py b/napari/_qt/widgets/qt_viewer_buttons.py
index 9529f9f6..bb4aceb6 100644
--- a/napari/_qt/widgets/qt_viewer_buttons.py
+++ b/napari/_qt/widgets/qt_viewer_buttons.py
@@ -13,17 +13,17 @@ from qtpy.QtWidgets import (
     QVBoxLayout,
 )
 
-from ...utils.action_manager import action_manager
-from ...utils.interactions import Shortcut
-from ...utils.misc import in_ipython, in_jupyter
-from ...utils.translations import trans
-from ..dialogs.qt_modal import QtPopup
-from .qt_dims_sorter import QtDimsSorter
-from .qt_spinbox import QtSpinBox
-from .qt_tooltip import QtToolTipLabel
+from napari._qt.dialogs.qt_modal import QtPopup
+from napari._qt.widgets.qt_dims_sorter import QtDimsSorter
+from napari._qt.widgets.qt_spinbox import QtSpinBox
+from napari._qt.widgets.qt_tooltip import QtToolTipLabel
+from napari.utils.action_manager import action_manager
+from napari.utils.interactions import Shortcut
+from napari.utils.misc import in_ipython, in_jupyter
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ...viewer import ViewerModel
+    from napari.viewer import ViewerModel
 
 
 class QtLayerButtons(QFrame):
diff --git a/napari/_qt/widgets/qt_viewer_dock_widget.py b/napari/_qt/widgets/qt_viewer_dock_widget.py
index 839f1ca3..7a2a3df9 100644
--- a/napari/_qt/widgets/qt_viewer_dock_widget.py
+++ b/napari/_qt/widgets/qt_viewer_dock_widget.py
@@ -18,13 +18,13 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils.translations import trans
-from ..utils import combine_widgets, qt_signals_blocked
+from napari._qt.utils import combine_widgets, qt_signals_blocked
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from magicgui.widgets import Widget
 
-    from ..qt_viewer import QtViewer
+    from napari._qt.qt_viewer import QtViewer
 
 counter = count()
 _sentinel = object()
diff --git a/napari/_qt/widgets/qt_viewer_status_bar.py b/napari/_qt/widgets/qt_viewer_status_bar.py
index 77329521..25888943 100644
--- a/napari/_qt/widgets/qt_viewer_status_bar.py
+++ b/napari/_qt/widgets/qt_viewer_status_bar.py
@@ -11,11 +11,11 @@ from qtpy.QtWidgets import (
 )
 from superqt import QElidingLabel
 
-from ...utils.translations import trans
-from ..dialogs.qt_activity_dialog import ActivityToggleItem
+from napari._qt.dialogs.qt_activity_dialog import ActivityToggleItem
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..qt_main_window import _QtMainWindow
+    from napari._qt.qt_main_window import _QtMainWindow
 
 
 class ViewerStatusBar(QStatusBar):
diff --git a/napari/_qt/widgets/qt_welcome.py b/napari/_qt/widgets/qt_welcome.py
index d0f14c05..95734d1b 100644
--- a/napari/_qt/widgets/qt_welcome.py
+++ b/napari/_qt/widgets/qt_welcome.py
@@ -12,9 +12,9 @@ from qtpy.QtWidgets import (
     QWidget,
 )
 
-from ...utils.action_manager import action_manager
-from ...utils.interactions import Shortcut
-from ...utils.translations import trans
+from napari.utils.action_manager import action_manager
+from napari.utils.interactions import Shortcut
+from napari.utils.translations import trans
 
 
 class QtWelcomeLabel(QLabel):
diff --git a/napari/_vendor/darkdetect/__init__.py b/napari/_vendor/darkdetect/__init__.py
index a7976851..a0a910c8 100644
--- a/napari/_vendor/darkdetect/__init__.py
+++ b/napari/_vendor/darkdetect/__init__.py
@@ -25,20 +25,20 @@ def macos_supported_version():
 
 if sys.platform == "darwin":
     if macos_supported_version():
-        from ._mac_detect import *
+        from napari._vendor.darkdetect._mac_detect import *
     else:
-        from ._dummy import *
+        from napari._vendor.darkdetect._dummy import *
 elif sys.platform == "win32" and platform.release().isdigit() and int(platform.release()) >= 10:
     # Checks if running Windows 10 version 10.0.14393 (Anniversary Update) OR HIGHER. The getwindowsversion method returns a tuple.
     # The third item is the build number that we can use to check if the user has a new enough version of Windows.
     winver = int(platform.version().split('.')[2])
     if winver >= 14393:
-        from ._windows_detect import *
+        from napari._vendor.darkdetect._windows_detect import *
     else:
-        from ._dummy import *
+        from napari._vendor.darkdetect._dummy import *
 elif sys.platform == "linux":
-    from ._linux_detect import *
+    from napari._vendor.darkdetect._linux_detect import *
 else:
-    from ._dummy import *
+    from napari._vendor.darkdetect._dummy import *
 
 del sys, platform
diff --git a/napari/_vendor/experimental/cachetools/__init__.py b/napari/_vendor/experimental/cachetools/__init__.py
index 4e0a9c48..3bace5bb 100644
--- a/napari/_vendor/experimental/cachetools/__init__.py
+++ b/napari/_vendor/experimental/cachetools/__init__.py
@@ -1 +1 @@
-from .cachetools.lru import LRUCache
+from napari._vendor.experimental.cachetools.cachetools.lru import LRUCache
diff --git a/napari/_vendor/experimental/cachetools/cachetools/__init__.py b/napari/_vendor/experimental/cachetools/cachetools/__init__.py
index 51d8f7c8..a24f651b 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/__init__.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/__init__.py
@@ -1,11 +1,11 @@
 """Extensible memoizing collections and decorators."""
 
-from .cache import Cache
-from .decorators import cached, cachedmethod
-from .lfu import LFUCache
-from .lru import LRUCache
-from .rr import RRCache
-from .ttl import TTLCache
+from napari._vendor.experimental.cachetools.cachetools.cache import Cache
+from napari._vendor.experimental.cachetools.cachetools.decorators import cached, cachedmethod
+from napari._vendor.experimental.cachetools.cachetools.lfu import LFUCache
+from napari._vendor.experimental.cachetools.cachetools.lru import LRUCache
+from napari._vendor.experimental.cachetools.cachetools.rr import RRCache
+from napari._vendor.experimental.cachetools.cachetools.ttl import TTLCache
 
 __all__ = (
     'Cache',
diff --git a/napari/_vendor/experimental/cachetools/cachetools/cache.py b/napari/_vendor/experimental/cachetools/cachetools/cache.py
index 4354ca69..1f1f446e 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/cache.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/cache.py
@@ -1,4 +1,4 @@
-from .abc import DefaultMapping
+from napari._vendor.experimental.cachetools.cachetools.abc import DefaultMapping
 
 
 class _DefaultSize(object):
diff --git a/napari/_vendor/experimental/cachetools/cachetools/decorators.py b/napari/_vendor/experimental/cachetools/cachetools/decorators.py
index cbea9fcb..ec5683be 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/decorators.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/decorators.py
@@ -1,6 +1,6 @@
 import functools
 
-from .keys import hashkey
+from napari._vendor.experimental.cachetools.cachetools.keys import hashkey
 
 
 def cached(cache, key=hashkey, lock=None):
diff --git a/napari/_vendor/experimental/cachetools/cachetools/func.py b/napari/_vendor/experimental/cachetools/cachetools/func.py
index 5baf6de7..5d5ac1c9 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/func.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/func.py
@@ -11,11 +11,11 @@ try:
 except ImportError:  # pragma: no cover
     from dummy_threading import RLock
 
-from . import keys
-from .lfu import LFUCache
-from .lru import LRUCache
-from .rr import RRCache
-from .ttl import TTLCache
+from napari._vendor.experimental.cachetools.cachetools import keys
+from napari._vendor.experimental.cachetools.cachetools.lfu import LFUCache
+from napari._vendor.experimental.cachetools.cachetools.lru import LRUCache
+from napari._vendor.experimental.cachetools.cachetools.rr import RRCache
+from napari._vendor.experimental.cachetools.cachetools.ttl import TTLCache
 
 __all__ = ('lfu_cache', 'lru_cache', 'rr_cache', 'ttl_cache')
 
diff --git a/napari/_vendor/experimental/cachetools/cachetools/lfu.py b/napari/_vendor/experimental/cachetools/cachetools/lfu.py
index adb45ee2..5c809878 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/lfu.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/lfu.py
@@ -1,6 +1,6 @@
 import collections
 
-from .cache import Cache
+from napari._vendor.experimental.cachetools.cachetools.cache import Cache
 
 
 class LFUCache(Cache):
diff --git a/napari/_vendor/experimental/cachetools/cachetools/lru.py b/napari/_vendor/experimental/cachetools/cachetools/lru.py
index 7634f9cf..13812355 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/lru.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/lru.py
@@ -1,6 +1,6 @@
 import collections
 
-from .cache import Cache
+from napari._vendor.experimental.cachetools.cachetools.cache import Cache
 
 
 class LRUCache(Cache):
diff --git a/napari/_vendor/experimental/cachetools/cachetools/rr.py b/napari/_vendor/experimental/cachetools/cachetools/rr.py
index 30f38226..52656835 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/rr.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/rr.py
@@ -1,6 +1,6 @@
 import random
 
-from .cache import Cache
+from napari._vendor.experimental.cachetools.cachetools.cache import Cache
 
 
 # random.choice cannot be pickled in Python 2.7
diff --git a/napari/_vendor/experimental/cachetools/cachetools/ttl.py b/napari/_vendor/experimental/cachetools/cachetools/ttl.py
index 7822e8be..4c96b6c6 100644
--- a/napari/_vendor/experimental/cachetools/cachetools/ttl.py
+++ b/napari/_vendor/experimental/cachetools/cachetools/ttl.py
@@ -1,7 +1,7 @@
 import collections
 import time
 
-from .cache import Cache
+from napari._vendor.experimental.cachetools.cachetools.cache import Cache
 
 
 class _Link(object):
diff --git a/napari/_vendor/experimental/humanize/src/humanize/__init__.py b/napari/_vendor/experimental/humanize/src/humanize/__init__.py
index ee6856e3..1b75509a 100644
--- a/napari/_vendor/experimental/humanize/src/humanize/__init__.py
+++ b/napari/_vendor/experimental/humanize/src/humanize/__init__.py
@@ -1,8 +1,8 @@
 import pkg_resources
-from .filesize import naturalsize
-from .i18n import activate, deactivate
-from .number import apnumber, fractional, intcomma, intword, ordinal, scientific
-from .time import (
+from napari._vendor.experimental.humanize.src.humanize.filesize import naturalsize
+from napari._vendor.experimental.humanize.src.humanize.i18n import activate, deactivate
+from napari._vendor.experimental.humanize.src.humanize.number import apnumber, fractional, intcomma, intword, ordinal, scientific
+from napari._vendor.experimental.humanize.src.humanize.time import (
     naturaldate,
     naturalday,
     naturaldelta,
diff --git a/napari/_vendor/experimental/humanize/src/humanize/number.py b/napari/_vendor/experimental/humanize/src/humanize/number.py
index e108ebcf..6d8bbee4 100644
--- a/napari/_vendor/experimental/humanize/src/humanize/number.py
+++ b/napari/_vendor/experimental/humanize/src/humanize/number.py
@@ -5,9 +5,9 @@
 import re
 from fractions import Fraction
 
-from .i18n import gettext as _
-from .i18n import gettext_noop as N_
-from .i18n import pgettext as P_
+from napari._vendor.experimental.humanize.src.humanize.i18n import gettext as _
+from napari._vendor.experimental.humanize.src.humanize.i18n import gettext_noop as N_
+from napari._vendor.experimental.humanize.src.humanize.i18n import pgettext as P_
 
 
 def ordinal(value):
diff --git a/napari/_vendor/experimental/humanize/src/humanize/time.py b/napari/_vendor/experimental/humanize/src/humanize/time.py
index 18990b1f..2b0bf89f 100644
--- a/napari/_vendor/experimental/humanize/src/humanize/time.py
+++ b/napari/_vendor/experimental/humanize/src/humanize/time.py
@@ -8,8 +8,8 @@ import math
 from enum import Enum
 from functools import total_ordering
 
-from .i18n import gettext as _
-from .i18n import ngettext
+from napari._vendor.experimental.humanize.src.humanize.i18n import gettext as _
+from napari._vendor.experimental.humanize.src.humanize.i18n import ngettext
 
 __all__ = [
     "naturaldelta",
diff --git a/napari/_vendor/qt_json_builder/qt_jsonschema_form/__init__.py b/napari/_vendor/qt_json_builder/qt_jsonschema_form/__init__.py
index b9284ea8..182c01f3 100644
--- a/napari/_vendor/qt_json_builder/qt_jsonschema_form/__init__.py
+++ b/napari/_vendor/qt_json_builder/qt_jsonschema_form/__init__.py
@@ -1 +1 @@
-from .form import WidgetBuilder
+from napari._vendor.qt_json_builder.qt_jsonschema_form.form import WidgetBuilder
diff --git a/napari/_vendor/qt_json_builder/qt_jsonschema_form/form.py b/napari/_vendor/qt_json_builder/qt_jsonschema_form/form.py
index a26210c2..a279e84a 100644
--- a/napari/_vendor/qt_json_builder/qt_jsonschema_form/form.py
+++ b/napari/_vendor/qt_json_builder/qt_jsonschema_form/form.py
@@ -2,8 +2,8 @@ from copy import deepcopy
 
 from jsonschema.validators import validator_for
 
-from . import widgets
-from .defaults import compute_defaults
+from napari._vendor.qt_json_builder.qt_jsonschema_form import widgets
+from napari._vendor.qt_json_builder.qt_jsonschema_form.defaults import compute_defaults
 
 
 def get_widget_state(schema, state=None):
diff --git a/napari/_vendor/qt_json_builder/qt_jsonschema_form/widgets.py b/napari/_vendor/qt_json_builder/qt_jsonschema_form/widgets.py
index b3b7410e..9cae6c9c 100644
--- a/napari/_vendor/qt_json_builder/qt_jsonschema_form/widgets.py
+++ b/napari/_vendor/qt_json_builder/qt_jsonschema_form/widgets.py
@@ -3,20 +3,20 @@ from typing import Dict, List, Optional, TYPE_CHECKING, Tuple
 
 from qtpy import QtCore, QtGui, QtWidgets
 
-from ...._qt.widgets.qt_extension2reader import Extension2ReaderTable
-from ...._qt.widgets.qt_highlight_preview import QtHighlightSizePreviewWidget
-from ...._qt.widgets.qt_keyboard_settings import ShortcutEditor
+from napari._qt.widgets.qt_extension2reader import Extension2ReaderTable
+from napari._qt.widgets.qt_highlight_preview import QtHighlightSizePreviewWidget
+from napari._qt.widgets.qt_keyboard_settings import ShortcutEditor
 
-from .signal import Signal
-from .utils import is_concrete_schema, iter_layout_widgets, state_property
+from napari._vendor.qt_json_builder.qt_jsonschema_form.signal import Signal
+from napari._vendor.qt_json_builder.qt_jsonschema_form.utils import is_concrete_schema, iter_layout_widgets, state_property
 
-from ...._qt.widgets.qt_plugin_sorter import QtPluginSorter
+from napari._qt.widgets.qt_plugin_sorter import QtPluginSorter
 
-from ...._qt.widgets.qt_spinbox import QtSpinBox
+from napari._qt.widgets.qt_spinbox import QtSpinBox
 
 
 if TYPE_CHECKING:
-    from .form import WidgetBuilder
+    from napari._vendor.qt_json_builder.qt_jsonschema_form.form import WidgetBuilder
 
 
 class SchemaWidgetMixin:
diff --git a/napari/_vispy/__init__.py b/napari/_vispy/__init__.py
index 9f70bf57..a32d70dc 100644
--- a/napari/_vispy/__init__.py
+++ b/napari/_vispy/__init__.py
@@ -12,11 +12,11 @@ vispy_logger = logging.getLogger('vispy')
 vispy_logger.setLevel(logging.WARNING)
 
 
-from .camera import VispyCamera
-from .canvas import VispyCanvas
-from .overlays.axes import VispyAxesOverlay
-from .overlays.interaction_box import VispyInteractionBox
-from .overlays.scale_bar import VispyScaleBarOverlay
-from .overlays.text import VispyTextOverlay
-from .utils.quaternion import quaternion2euler
-from .utils.visual import create_vispy_layer
+from napari._vispy.camera import VispyCamera
+from napari._vispy.canvas import VispyCanvas
+from napari._vispy.overlays.axes import VispyAxesOverlay
+from napari._vispy.overlays.interaction_box import VispyInteractionBox
+from napari._vispy.overlays.scale_bar import VispyScaleBarOverlay
+from napari._vispy.overlays.text import VispyTextOverlay
+from napari._vispy.utils.quaternion import quaternion2euler
+from napari._vispy.utils.visual import create_vispy_layer
diff --git a/napari/_vispy/camera.py b/napari/_vispy/camera.py
index e16040e7..e90aa68a 100644
--- a/napari/_vispy/camera.py
+++ b/napari/_vispy/camera.py
@@ -1,7 +1,7 @@
 import numpy as np
 from vispy.scene import ArcballCamera, PanZoomCamera
 
-from .utils.quaternion import quaternion2euler
+from napari._vispy.utils.quaternion import quaternion2euler
 
 
 class VispyCamera:
diff --git a/napari/_vispy/canvas.py b/napari/_vispy/canvas.py
index faa62ea4..45cb303e 100644
--- a/napari/_vispy/canvas.py
+++ b/napari/_vispy/canvas.py
@@ -4,8 +4,8 @@ from weakref import WeakSet
 
 from vispy.scene import SceneCanvas, Widget
 
-from ..utils.colormaps.standardize_color import transform_color
-from .utils.gl import get_max_texture_sizes
+from napari._vispy.utils.gl import get_max_texture_sizes
+from napari.utils.colormaps.standardize_color import transform_color
 
 
 class VispyCanvas(SceneCanvas):
@@ -59,7 +59,7 @@ class VispyCanvas(SceneCanvas):
         self._set_theme_change(event.value)
 
     def _set_theme_change(self, theme: str):
-        from ..utils.theme import get_theme
+        from napari.utils.theme import get_theme
 
         # Note 1. store last requested theme color, in case we need to reuse it
         # when clearing the background_color_override, without needing to
diff --git a/napari/_vispy/experimental/texture_atlas.py b/napari/_vispy/experimental/texture_atlas.py
index e38b8c58..3095cc19 100644
--- a/napari/_vispy/experimental/texture_atlas.py
+++ b/napari/_vispy/experimental/texture_atlas.py
@@ -7,10 +7,10 @@ from typing import Callable, NamedTuple, Optional, Tuple
 import numpy as np
 from vispy.gloo import Texture2D
 
-from ...layers.image.experimental import OctreeChunk
-from ...types import ArrayLike
-from ...utils.translations import trans
-from ..utils.gl import fix_data_dtype
+from napari._vispy.utils.gl import fix_data_dtype
+from napari.layers.image.experimental import OctreeChunk
+from napari.types import ArrayLike
+from napari.utils.translations import trans
 
 # Two triangles which cover a [0..1, 0..1] quad.
 _QUAD = np.array(
diff --git a/napari/_vispy/experimental/tile_grid.py b/napari/_vispy/experimental/tile_grid.py
index 7289f9ee..255b9f57 100644
--- a/napari/_vispy/experimental/tile_grid.py
+++ b/napari/_vispy/experimental/tile_grid.py
@@ -11,7 +11,7 @@ from vispy.scene.node import Node
 from vispy.scene.visuals import Line
 
 if TYPE_CHECKING:
-    from ...layers.image.experimental import OctreeChunk
+    from napari.layers.image.experimental import OctreeChunk
 
 # Grid lines drawn with this width and color.
 GRID_WIDTH = 3
diff --git a/napari/_vispy/experimental/tile_set.py b/napari/_vispy/experimental/tile_set.py
index 4eb1fe2b..ef1329f7 100644
--- a/napari/_vispy/experimental/tile_set.py
+++ b/napari/_vispy/experimental/tile_set.py
@@ -4,8 +4,8 @@ TiledImageVisual uses this class to track the tiles it's drawing.
 """
 from typing import Dict, List, NamedTuple, Set
 
-from ...layers.image.experimental import OctreeChunk
-from .texture_atlas import AtlasTile
+from napari._vispy.experimental.texture_atlas import AtlasTile
+from napari.layers.image.experimental import OctreeChunk
 
 
 class TileData(NamedTuple):
diff --git a/napari/_vispy/experimental/tiled_image_visual.py b/napari/_vispy/experimental/tiled_image_visual.py
index 68d3fec3..4dcde6b4 100644
--- a/napari/_vispy/experimental/tiled_image_visual.py
+++ b/napari/_vispy/experimental/tiled_image_visual.py
@@ -16,11 +16,11 @@ import numpy as np
 from vispy.scene.visuals import Image
 from vispy.visuals.shaders import Function, FunctionChain
 
-from ...layers.image.experimental import OctreeChunk
-from ...types import ArrayLike
-from ...utils.translations import trans
-from .texture_atlas import TextureAtlas2D
-from .tile_set import TileSet
+from napari._vispy.experimental.texture_atlas import TextureAtlas2D
+from napari._vispy.experimental.tile_set import TileSet
+from napari.layers.image.experimental import OctreeChunk
+from napari.types import ArrayLike
+from napari.utils.translations import trans
 
 # Shape of she whole texture in tiles. Hardcode for now. We hope to make
 # TiledImageVisuals support multiple texture sizes and multiple tile
diff --git a/napari/_vispy/experimental/vispy_tiled_image_layer.py b/napari/_vispy/experimental/vispy_tiled_image_layer.py
index b32d82e6..ef2d2d1b 100644
--- a/napari/_vispy/experimental/vispy_tiled_image_layer.py
+++ b/napari/_vispy/experimental/vispy_tiled_image_layer.py
@@ -8,15 +8,15 @@ import logging
 from dataclasses import dataclass
 from typing import TYPE_CHECKING, List
 
-from ...utils.events import EmitterGroup
-from ...utils.perf import block_timer
-from ..layers.image import VispyImageLayer
-from .tile_grid import TileGrid
-from .tiled_image_visual import TiledImageVisual
+from napari._vispy.experimental.tile_grid import TileGrid
+from napari._vispy.experimental.tiled_image_visual import TiledImageVisual
+from napari._vispy.layers.image import VispyImageLayer
+from napari.utils.events import EmitterGroup
+from napari.utils.perf import block_timer
 
 if TYPE_CHECKING:
-    from ...layers.image.experimental import OctreeChunk
-    from ...layers.image.image import Image
+    from napari.layers.image.experimental import OctreeChunk
+    from napari.layers.image.image import Image
 
 
 LOGGER = logging.getLogger("napari.octree.visual")
diff --git a/napari/_vispy/layers/base.py b/napari/_vispy/layers/base.py
index cec0dae1..ccbb69b5 100644
--- a/napari/_vispy/layers/base.py
+++ b/napari/_vispy/layers/base.py
@@ -3,8 +3,8 @@ from abc import ABC, abstractmethod
 import numpy as np
 from vispy.visuals.transforms import MatrixTransform
 
-from ...utils.events import disconnect_events
-from ..utils.gl import BLENDING_MODES, get_max_texture_sizes
+from napari._vispy.utils.gl import BLENDING_MODES, get_max_texture_sizes
+from napari.utils.events import disconnect_events
 
 
 class VispyBaseLayer(ABC):
diff --git a/napari/_vispy/layers/image.py b/napari/_vispy/layers/image.py
index e1a9b52d..25d5cf7b 100644
--- a/napari/_vispy/layers/image.py
+++ b/napari/_vispy/layers/image.py
@@ -4,12 +4,12 @@ import numpy as np
 from vispy.color import Colormap as VispyColormap
 from vispy.scene.node import Node
 
-from ...layers.base._base_constants import Blending
-from ...utils.translations import trans
-from ..utils.gl import fix_data_dtype, get_gl_extensions
-from ..visuals.image import Image as ImageNode
-from ..visuals.volume import Volume as VolumeNode
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.utils.gl import fix_data_dtype, get_gl_extensions
+from napari._vispy.visuals.image import Image as ImageNode
+from napari._vispy.visuals.volume import Volume as VolumeNode
+from napari.layers.base._base_constants import Blending
+from napari.utils.translations import trans
 
 
 class ImageLayerNode:
diff --git a/napari/_vispy/layers/labels.py b/napari/_vispy/layers/labels.py
index 3be9c070..b32ec699 100644
--- a/napari/_vispy/layers/labels.py
+++ b/napari/_vispy/layers/labels.py
@@ -1,4 +1,4 @@
-from .image import VispyImageLayer
+from napari._vispy.layers.image import VispyImageLayer
 
 
 class VispyLabelsLayer(VispyImageLayer):
diff --git a/napari/_vispy/layers/points.py b/napari/_vispy/layers/points.py
index 084893e8..ae02f8dd 100644
--- a/napari/_vispy/layers/points.py
+++ b/napari/_vispy/layers/points.py
@@ -1,12 +1,12 @@
 import numpy as np
 
-from ...settings import get_settings
-from ...utils.colormaps.standardize_color import transform_color
-from ...utils.events import disconnect_events
-from ..utils.gl import BLENDING_MODES
-from ..utils.text import update_text
-from ..visuals.points import PointsVisual
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.utils.gl import BLENDING_MODES
+from napari._vispy.utils.text import update_text
+from napari._vispy.visuals.points import PointsVisual
+from napari.settings import get_settings
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.events import disconnect_events
 
 
 class VispyPointsLayer(VispyBaseLayer):
diff --git a/napari/_vispy/layers/shapes.py b/napari/_vispy/layers/shapes.py
index 5c48dfa5..9f2e35ec 100644
--- a/napari/_vispy/layers/shapes.py
+++ b/napari/_vispy/layers/shapes.py
@@ -1,11 +1,11 @@
 import numpy as np
 
-from ...settings import get_settings
-from ...utils.events import disconnect_events
-from ..utils.gl import BLENDING_MODES
-from ..utils.text import update_text
-from ..visuals.shapes import ShapesVisual
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.utils.gl import BLENDING_MODES
+from napari._vispy.utils.text import update_text
+from napari._vispy.visuals.shapes import ShapesVisual
+from napari.settings import get_settings
+from napari.utils.events import disconnect_events
 
 
 class VispyShapesLayer(VispyBaseLayer):
diff --git a/napari/_vispy/layers/surface.py b/napari/_vispy/layers/surface.py
index a532adb8..ceb584f1 100644
--- a/napari/_vispy/layers/surface.py
+++ b/napari/_vispy/layers/surface.py
@@ -2,8 +2,8 @@ import numpy as np
 from vispy.color import Colormap as VispyColormap
 from vispy.geometry import MeshData
 
-from ..visuals.surface import SurfaceVisual
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.visuals.surface import SurfaceVisual
 
 
 class VispySurfaceLayer(VispyBaseLayer):
diff --git a/napari/_vispy/layers/tracks.py b/napari/_vispy/layers/tracks.py
index 46473fba..a8ba88cb 100644
--- a/napari/_vispy/layers/tracks.py
+++ b/napari/_vispy/layers/tracks.py
@@ -1,5 +1,5 @@
-from ..visuals.tracks import TracksVisual
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.visuals.tracks import TracksVisual
 
 
 class VispyTracksLayer(VispyBaseLayer):
diff --git a/napari/_vispy/layers/vectors.py b/napari/_vispy/layers/vectors.py
index d424a2c7..7002a584 100644
--- a/napari/_vispy/layers/vectors.py
+++ b/napari/_vispy/layers/vectors.py
@@ -2,9 +2,9 @@ from copy import copy
 
 import numpy as np
 
-from ...layers.utils.layer_utils import segment_normal
-from ..visuals.vectors import VectorsVisual
-from .base import VispyBaseLayer
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.visuals.vectors import VectorsVisual
+from napari.layers.utils.layer_utils import segment_normal
 
 
 class VispyVectorsLayer(VispyBaseLayer):
diff --git a/napari/_vispy/overlays/axes.py b/napari/_vispy/overlays/axes.py
index 9d8af0e9..d7b93006 100644
--- a/napari/_vispy/overlays/axes.py
+++ b/napari/_vispy/overlays/axes.py
@@ -1,8 +1,8 @@
 import numpy as np
 
-from ...utils.theme import get_theme
-from ..visuals.axes import Axes
-from .base import VispySceneOverlay
+from napari._vispy.overlays.base import VispySceneOverlay
+from napari._vispy.visuals.axes import Axes
+from napari.utils.theme import get_theme
 
 
 class VispyAxesOverlay(VispySceneOverlay):
diff --git a/napari/_vispy/overlays/base.py b/napari/_vispy/overlays/base.py
index 16c3d079..728dacdb 100644
--- a/napari/_vispy/overlays/base.py
+++ b/napari/_vispy/overlays/base.py
@@ -1,8 +1,8 @@
 from vispy.visuals.transforms import MatrixTransform, STTransform
 
-from ...components._viewer_constants import CanvasPosition
-from ...utils.events import disconnect_events
-from ...utils.translations import trans
+from napari.components._viewer_constants import CanvasPosition
+from napari.utils.events import disconnect_events
+from napari.utils.translations import trans
 
 
 class VispyBaseOverlay:
diff --git a/napari/_vispy/overlays/interaction_box.py b/napari/_vispy/overlays/interaction_box.py
index 19c9796b..53a458b9 100644
--- a/napari/_vispy/overlays/interaction_box.py
+++ b/napari/_vispy/overlays/interaction_box.py
@@ -2,7 +2,7 @@ import numpy as np
 from vispy.color.color_array import ColorArray
 from vispy.scene.visuals import Compound, Line, Markers
 
-from ...components.overlays._interaction_box_constants import Box
+from napari.components.overlays._interaction_box_constants import Box
 
 
 class VispyInteractionBox:
diff --git a/napari/_vispy/overlays/scale_bar.py b/napari/_vispy/overlays/scale_bar.py
index e221b555..fffb8ad8 100644
--- a/napari/_vispy/overlays/scale_bar.py
+++ b/napari/_vispy/overlays/scale_bar.py
@@ -2,11 +2,11 @@ import bisect
 
 import numpy as np
 
-from ...utils._units import PREFERRED_VALUES, get_unit_registry
-from ...utils.colormaps.standardize_color import transform_color
-from ...utils.theme import get_theme
-from ..visuals.scale_bar import ScaleBar
-from .base import VispyCanvasOverlay
+from napari._vispy.overlays.base import VispyCanvasOverlay
+from napari._vispy.visuals.scale_bar import ScaleBar
+from napari.utils._units import PREFERRED_VALUES, get_unit_registry
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.theme import get_theme
 
 
 class VispyScaleBarOverlay(VispyCanvasOverlay):
diff --git a/napari/_vispy/overlays/text.py b/napari/_vispy/overlays/text.py
index 4536b464..40fe769a 100644
--- a/napari/_vispy/overlays/text.py
+++ b/napari/_vispy/overlays/text.py
@@ -1,7 +1,7 @@
 from vispy.scene.visuals import Text
 
-from ...components._viewer_constants import CanvasPosition
-from .base import VispyCanvasOverlay
+from napari._vispy.overlays.base import VispyCanvasOverlay
+from napari.components._viewer_constants import CanvasPosition
 
 
 class VispyTextOverlay(VispyCanvasOverlay):
diff --git a/napari/_vispy/utils/gl.py b/napari/_vispy/utils/gl.py
index 6623e8b3..4219aa59 100644
--- a/napari/_vispy/utils/gl.py
+++ b/napari/_vispy/utils/gl.py
@@ -9,7 +9,7 @@ from vispy.app import Canvas
 from vispy.gloo import gl
 from vispy.gloo.context import get_current_canvas
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 texture_dtypes = [
     np.dtype(np.uint8),
diff --git a/napari/_vispy/utils/visual.py b/napari/_vispy/utils/visual.py
index 5b84de47..427726f2 100644
--- a/napari/_vispy/utils/visual.py
+++ b/napari/_vispy/utils/visual.py
@@ -3,7 +3,15 @@ from typing import Tuple
 import numpy as np
 from vispy.scene.widgets.viewbox import ViewBox
 
-from ...layers import (
+from napari._vispy.layers.base import VispyBaseLayer
+from napari._vispy.layers.image import VispyImageLayer
+from napari._vispy.layers.labels import VispyLabelsLayer
+from napari._vispy.layers.points import VispyPointsLayer
+from napari._vispy.layers.shapes import VispyShapesLayer
+from napari._vispy.layers.surface import VispySurfaceLayer
+from napari._vispy.layers.tracks import VispyTracksLayer
+from napari._vispy.layers.vectors import VispyVectorsLayer
+from napari.layers import (
     Image,
     Labels,
     Layer,
@@ -13,16 +21,8 @@ from ...layers import (
     Tracks,
     Vectors,
 )
-from ...utils.config import async_octree
-from ...utils.translations import trans
-from ..layers.base import VispyBaseLayer
-from ..layers.image import VispyImageLayer
-from ..layers.labels import VispyLabelsLayer
-from ..layers.points import VispyPointsLayer
-from ..layers.shapes import VispyShapesLayer
-from ..layers.surface import VispySurfaceLayer
-from ..layers.tracks import VispyTracksLayer
-from ..layers.vectors import VispyVectorsLayer
+from napari.utils.config import async_octree
+from napari.utils.translations import trans
 
 layer_to_visual = {
     Image: VispyImageLayer,
@@ -36,8 +36,10 @@ layer_to_visual = {
 
 
 if async_octree:
-    from ...layers.image.experimental.octree_image import _OctreeImageBase
-    from ..experimental.vispy_tiled_image_layer import VispyTiledImageLayer
+    from napari._vispy.experimental.vispy_tiled_image_layer import (
+        VispyTiledImageLayer,
+    )
+    from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
     # Insert _OctreeImageBase in front so it gets picked over plain Image.
     new_mapping = {_OctreeImageBase: VispyTiledImageLayer}
diff --git a/napari/_vispy/visuals/axes.py b/napari/_vispy/visuals/axes.py
index 616cdc51..b2587411 100644
--- a/napari/_vispy/visuals/axes.py
+++ b/napari/_vispy/visuals/axes.py
@@ -1,9 +1,9 @@
 import numpy as np
 from vispy.scene.visuals import Compound, Line, Mesh, Text
 
-from ...layers.shapes._shapes_utils import triangulate_ellipse
-from ...utils.colormaps.standardize_color import transform_color
-from ...utils.translations import trans
+from napari.layers.shapes._shapes_utils import triangulate_ellipse
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.translations import trans
 
 
 def make_dashed_line(num_dashes, axis):
diff --git a/napari/_vispy/visuals/points.py b/napari/_vispy/visuals/points.py
index 60d1bf71..327249bf 100644
--- a/napari/_vispy/visuals/points.py
+++ b/napari/_vispy/visuals/points.py
@@ -1,7 +1,7 @@
 from vispy.scene.visuals import Compound, Line, Text
 
-from .clipping_planes_mixin import ClippingPlanesMixin
-from .markers import Markers
+from napari._vispy.visuals.clipping_planes_mixin import ClippingPlanesMixin
+from napari._vispy.visuals.markers import Markers
 
 
 class PointsVisual(ClippingPlanesMixin, Compound):
diff --git a/napari/_vispy/visuals/shapes.py b/napari/_vispy/visuals/shapes.py
index 107ca368..5edd6218 100644
--- a/napari/_vispy/visuals/shapes.py
+++ b/napari/_vispy/visuals/shapes.py
@@ -1,6 +1,6 @@
 from vispy.scene.visuals import Compound, Line, Markers, Mesh, Text
 
-from .clipping_planes_mixin import ClippingPlanesMixin
+from napari._vispy.visuals.clipping_planes_mixin import ClippingPlanesMixin
 
 
 class ShapesVisual(ClippingPlanesMixin, Compound):
diff --git a/napari/_vispy/visuals/surface.py b/napari/_vispy/visuals/surface.py
index daaefe57..3375a07e 100644
--- a/napari/_vispy/visuals/surface.py
+++ b/napari/_vispy/visuals/surface.py
@@ -1,7 +1,7 @@
 from vispy.scene.visuals import Mesh, MeshNormals
 from vispy.visuals.filters import WireframeFilter
 
-from .clipping_planes_mixin import ClippingPlanesMixin
+from napari._vispy.visuals.clipping_planes_mixin import ClippingPlanesMixin
 
 
 class SurfaceVisual(ClippingPlanesMixin, Mesh):
diff --git a/napari/_vispy/visuals/tracks.py b/napari/_vispy/visuals/tracks.py
index 0d09806d..d3273e3e 100644
--- a/napari/_vispy/visuals/tracks.py
+++ b/napari/_vispy/visuals/tracks.py
@@ -1,7 +1,7 @@
 from vispy.scene.visuals import Compound, Line, Text
 
-from ..filters.tracks import TracksFilter
-from .clipping_planes_mixin import ClippingPlanesMixin
+from napari._vispy.filters.tracks import TracksFilter
+from napari._vispy.visuals.clipping_planes_mixin import ClippingPlanesMixin
 
 
 class TracksVisual(ClippingPlanesMixin, Compound):
diff --git a/napari/_vispy/visuals/vectors.py b/napari/_vispy/visuals/vectors.py
index 656257f8..221d100c 100644
--- a/napari/_vispy/visuals/vectors.py
+++ b/napari/_vispy/visuals/vectors.py
@@ -1,6 +1,6 @@
 from vispy.scene.visuals import Mesh
 
-from .clipping_planes_mixin import ClippingPlanesMixin
+from napari._vispy.visuals.clipping_planes_mixin import ClippingPlanesMixin
 
 
 class VectorsVisual(ClippingPlanesMixin, Mesh):
diff --git a/napari/components/__init__.py b/napari/components/__init__.py
index e148efc8..c722c29e 100644
--- a/napari/components/__init__.py
+++ b/napari/components/__init__.py
@@ -14,15 +14,15 @@ ViewerModel
     layer-related controls.
 """
 
-from .camera import Camera
-from .dims import Dims
-from .layerlist import LayerList
+from napari.components.camera import Camera
+from napari.components.dims import Dims
+from napari.components.layerlist import LayerList
 
 # Note that importing _viewer_key_bindings is needed as the Viewer gets
 # decorated with keybindings during that process, but it is not directly needed
 # by our users and so is deleted below
-from . import _viewer_key_bindings  # isort:skip
-from .viewer_model import ViewerModel  # isort:skip
+from napari.components import _viewer_key_bindings  # isort:skip
+from napari.components.viewer_model import ViewerModel  # isort:skip
 
 del _viewer_key_bindings
 
diff --git a/napari/components/_viewer_key_bindings.py b/napari/components/_viewer_key_bindings.py
index 2c6d7272..a266b861 100644
--- a/napari/components/_viewer_key_bindings.py
+++ b/napari/components/_viewer_key_bindings.py
@@ -2,14 +2,14 @@ from __future__ import annotations
 
 from typing import TYPE_CHECKING
 
-from ..settings import get_settings
-from ..utils.action_manager import action_manager
-from ..utils.theme import available_themes
-from ..utils.translations import trans
-from .viewer_model import ViewerModel
+from napari.components.viewer_model import ViewerModel
+from napari.settings import get_settings
+from napari.utils.action_manager import action_manager
+from napari.utils.theme import available_themes
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..viewer import Viewer
+    from napari.viewer import Viewer
 
 
 def register_viewer_action(description):
diff --git a/napari/components/camera.py b/napari/components/camera.py
index 57293ac0..9b0d709d 100644
--- a/napari/components/camera.py
+++ b/napari/components/camera.py
@@ -4,9 +4,9 @@ import numpy as np
 from pydantic import validator
 from scipy.spatial.transform import Rotation as R
 
-from ..utils.events import EventedModel
-from ..utils.misc import ensure_n_tuple
-from ..utils.translations import trans
+from napari.utils.events import EventedModel
+from napari.utils.misc import ensure_n_tuple
+from napari.utils.translations import trans
 
 
 class Camera(EventedModel):
diff --git a/napari/components/cursor.py b/napari/components/cursor.py
index fa08a297..06a66d8f 100644
--- a/napari/components/cursor.py
+++ b/napari/components/cursor.py
@@ -1,7 +1,7 @@
 from typing import Optional, Tuple
 
-from ..utils.events import EventedModel
-from ._viewer_constants import CursorStyle
+from napari.components._viewer_constants import CursorStyle
+from napari.utils.events import EventedModel
 
 
 class Cursor(EventedModel):
diff --git a/napari/components/dims.py b/napari/components/dims.py
index 1016d30b..1277c620 100644
--- a/napari/components/dims.py
+++ b/napari/components/dims.py
@@ -5,9 +5,9 @@ from typing import Sequence, Tuple, Union
 import numpy as np
 from pydantic import root_validator, validator
 
-from ..utils.events import EventedModel
-from ..utils.misc import argsort, reorder_after_dim_reduction
-from ..utils.translations import trans
+from napari.utils.events import EventedModel
+from napari.utils.misc import argsort, reorder_after_dim_reduction
+from napari.utils.translations import trans
 
 
 class Dims(EventedModel):
diff --git a/napari/components/experimental/chunk/__init__.py b/napari/components/experimental/chunk/__init__.py
index 31632307..224b400d 100644
--- a/napari/components/experimental/chunk/__init__.py
+++ b/napari/components/experimental/chunk/__init__.py
@@ -1,6 +1,15 @@
 """chunk module"""
-from ._loader import chunk_loader, synchronous_loading, wait_for_async
-from ._request import ChunkLocation, ChunkRequest, LayerRef, OctreeLocation
+from napari.components.experimental.chunk._loader import (
+    chunk_loader,
+    synchronous_loading,
+    wait_for_async,
+)
+from napari.components.experimental.chunk._request import (
+    ChunkLocation,
+    ChunkRequest,
+    LayerRef,
+    OctreeLocation,
+)
 
 __all__ = [
     'ChunkLocation',
diff --git a/napari/components/experimental/chunk/_cache.py b/napari/components/experimental/chunk/_cache.py
index 89d88ce4..dbc3093e 100644
--- a/napari/components/experimental/chunk/_cache.py
+++ b/napari/components/experimental/chunk/_cache.py
@@ -5,11 +5,11 @@ from __future__ import annotations
 import logging
 from typing import TYPE_CHECKING, Dict, Optional
 
-from ...._vendor.experimental.cachetools import LRUCache
+from napari._vendor.experimental.cachetools import LRUCache
 
 if TYPE_CHECKING:
-    from ....types import ArrayLike
-    from ._request import ChunkRequest
+    from napari.components.experimental.chunk._request import ChunkRequest
+    from napari.types import ArrayLike
 
     # A ChunkRequest is just a dict of the arrays we need to load. We allow
     # loading multiple arrays in one request so the caller does not have to
diff --git a/napari/components/experimental/chunk/_commands/__init__.py b/napari/components/experimental/chunk/_commands/__init__.py
index 6595d18e..da352e06 100644
--- a/napari/components/experimental/chunk/_commands/__init__.py
+++ b/napari/components/experimental/chunk/_commands/__init__.py
@@ -1,3 +1,5 @@
 """Commands for napari's IPython console."""
 
-from ._loader import LoaderCommands
+from napari.components.experimental.chunk._commands._loader import (
+    LoaderCommands,
+)
diff --git a/napari/components/experimental/chunk/_commands/_loader.py b/napari/components/experimental/chunk/_commands/_loader.py
index 455fb0a2..16962fe1 100644
--- a/napari/components/experimental/chunk/_commands/_loader.py
+++ b/napari/components/experimental/chunk/_commands/_loader.py
@@ -2,14 +2,17 @@
 """
 from typing import List
 
-from ....._vendor.experimental.humanize.src.humanize import naturalsize
-from .....layers.base import Layer
-from .....layers.image import Image
-from .....utils.config import octree_config
-from .._info import LayerInfo, LoadType
-from .._loader import chunk_loader
-from ._tables import RowTable, print_property_table
-from ._utils import highlight
+from napari._vendor.experimental.humanize.src.humanize import naturalsize
+from napari.components.experimental.chunk._commands._tables import (
+    RowTable,
+    print_property_table,
+)
+from napari.components.experimental.chunk._commands._utils import highlight
+from napari.components.experimental.chunk._info import LayerInfo, LoadType
+from napari.components.experimental.chunk._loader import chunk_loader
+from napari.layers.base import Layer
+from napari.layers.image import Image
+from napari.utils.config import octree_config
 
 LOAD_TYPE_STR = {
     LoadType.AUTO: "auto",
diff --git a/napari/components/experimental/chunk/_commands/_tables.py b/napari/components/experimental/chunk/_commands/_tables.py
index 8637eaba..dd062a28 100644
--- a/napari/components/experimental/chunk/_commands/_tables.py
+++ b/napari/components/experimental/chunk/_commands/_tables.py
@@ -5,8 +5,8 @@ the IPython console window.
 """
 from typing import Any, List, Tuple, Union
 
-from .....utils.translations import trans
-from ._utils import highlight
+from napari.components.experimental.chunk._commands._utils import highlight
+from napari.utils.translations import trans
 
 
 def print_property_table(table: List[Tuple[str, Any]]) -> None:
diff --git a/napari/components/experimental/chunk/_delay_queue.py b/napari/components/experimental/chunk/_delay_queue.py
index 61f5ca9a..4c43f2df 100644
--- a/napari/components/experimental/chunk/_delay_queue.py
+++ b/napari/components/experimental/chunk/_delay_queue.py
@@ -9,12 +9,12 @@ import threading
 import time
 from typing import TYPE_CHECKING, Callable, List, NamedTuple, Optional
 
-from ....utils.perf import add_counter_event
+from napari.utils.perf import add_counter_event
 
 LOGGER = logging.getLogger("napari.loader")
 
 if TYPE_CHECKING:
-    from ._request import ChunkRequest
+    from napari.components.experimental.chunk._request import ChunkRequest
 
 
 class QueueEntry(NamedTuple):
diff --git a/napari/components/experimental/chunk/_info.py b/napari/components/experimental/chunk/_info.py
index a3c41fc7..2391b9b2 100644
--- a/napari/components/experimental/chunk/_info.py
+++ b/napari/components/experimental/chunk/_info.py
@@ -4,10 +4,13 @@ import logging
 import time
 from enum import Enum
 
-from ....components.experimental.monitor import monitor
-from ....layers.base import Layer
-from ._request import ChunkRequest, LayerRef
-from ._utils import StatWindow
+from napari.components.experimental.chunk._request import (
+    ChunkRequest,
+    LayerRef,
+)
+from napari.components.experimental.chunk._utils import StatWindow
+from napari.components.experimental.monitor import monitor
+from napari.layers.base import Layer
 
 LOGGER = logging.getLogger("napari.loader")
 
diff --git a/napari/components/experimental/chunk/_loader.py b/napari/components/experimental/chunk/_loader.py
index bc90fb47..04dcd071 100644
--- a/napari/components/experimental/chunk/_loader.py
+++ b/napari/components/experimental/chunk/_loader.py
@@ -9,12 +9,12 @@ from concurrent.futures import Future
 from contextlib import contextmanager
 from typing import Callable, Dict, List, Optional, Tuple
 
-from ....utils.config import octree_config
-from ....utils.events import EmitterGroup
-from ._cache import ChunkCache
-from ._info import LayerInfo, LoadType
-from ._pool_group import LoaderPoolGroup
-from ._request import ChunkRequest
+from napari.components.experimental.chunk._cache import ChunkCache
+from napari.components.experimental.chunk._info import LayerInfo, LoadType
+from napari.components.experimental.chunk._pool_group import LoaderPoolGroup
+from napari.components.experimental.chunk._request import ChunkRequest
+from napari.utils.config import octree_config
+from napari.utils.events import EmitterGroup
 
 LOGGER = logging.getLogger("napari.loader")
 
diff --git a/napari/components/experimental/chunk/_pool.py b/napari/components/experimental/chunk/_pool.py
index 033eea4c..99efde25 100644
--- a/napari/components/experimental/chunk/_pool.py
+++ b/napari/components/experimental/chunk/_pool.py
@@ -21,7 +21,7 @@ LOGGER = logging.getLogger("napari.loader")
 DoneCallback = Optional[Callable[[Future], None]]
 
 if TYPE_CHECKING:
-    from ._request import ChunkRequest
+    from napari.components.experimental.chunk._request import ChunkRequest
 
 
 class LoaderPool:
@@ -55,7 +55,9 @@ class LoaderPool:
     """
 
     def __init__(self, config: dict, on_done_loader: DoneCallback = None):
-        from ._delay_queue import DelayQueue
+        from napari.components.experimental.chunk._delay_queue import (
+            DelayQueue,
+        )
 
         self.config = config
         self._on_done_loader = on_done_loader
diff --git a/napari/components/experimental/chunk/_pool_group.py b/napari/components/experimental/chunk/_pool_group.py
index 837f004d..94b3d046 100644
--- a/napari/components/experimental/chunk/_pool_group.py
+++ b/napari/components/experimental/chunk/_pool_group.py
@@ -6,11 +6,14 @@ import bisect
 from functools import lru_cache
 from typing import TYPE_CHECKING, Callable, Dict, List
 
-from ....utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ._pool import DoneCallback, LoaderPool
-    from ._request import ChunkRequest
+    from napari.components.experimental.chunk._pool import (
+        DoneCallback,
+        LoaderPool,
+    )
+    from napari.components.experimental.chunk._request import ChunkRequest
 
 
 class LoaderPoolGroup:
@@ -45,7 +48,7 @@ class LoaderPoolGroup:
         Dict[int, LoaderPool]
             The loader to use for each priority
         """
-        from ._pool import LoaderPool
+        from napari.components.experimental.chunk._pool import LoaderPool
 
         configs = _get_loader_configs(octree_config)
 
diff --git a/napari/components/experimental/chunk/_request.py b/napari/components/experimental/chunk/_request.py
index fad2b598..9cde98d5 100644
--- a/napari/components/experimental/chunk/_request.py
+++ b/napari/components/experimental/chunk/_request.py
@@ -10,12 +10,12 @@ from typing import TYPE_CHECKING, Dict, NamedTuple, Optional, Tuple
 
 import numpy as np
 
-from ....utils.perf import PerfEvent, block_timer
+from napari.utils.perf import PerfEvent, block_timer
 
 LOGGER = logging.getLogger("napari.loader")
 
 if TYPE_CHECKING:
-    from ....types import ArrayLike
+    from napari.types import ArrayLike
 
 # We convert slices to tuple for hashing.
 SliceTuple = Tuple[Optional[int], Optional[int], Optional[int]]
diff --git a/napari/components/experimental/commands.py b/napari/components/experimental/commands.py
index 9cc8357e..7acafae2 100644
--- a/napari/components/experimental/commands.py
+++ b/napari/components/experimental/commands.py
@@ -1,6 +1,6 @@
 """ExperimentalNamespace and CommandProcessor classes.
 """
-from .chunk._commands._utils import highlight
+from napari.components.experimental.chunk._commands._utils import highlight
 
 HELP_STR = f"""
 {highlight("Available Commands:")}
@@ -25,7 +25,9 @@ class CommandProcessor:
     @property
     def loader(self):
         """The loader related commands."""
-        from .chunk._commands import LoaderCommands
+        from napari.components.experimental.chunk._commands import (
+            LoaderCommands,
+        )
 
         return LoaderCommands(self.layers)
 
diff --git a/napari/components/experimental/monitor/__init__.py b/napari/components/experimental/monitor/__init__.py
index 86dc500a..6168e42a 100644
--- a/napari/components/experimental/monitor/__init__.py
+++ b/napari/components/experimental/monitor/__init__.py
@@ -1,3 +1,3 @@
 """Monitor service."""
-from ._monitor import monitor
-from ._utils import numpy_dumps
+from napari.components.experimental.monitor._monitor import monitor
+from napari.components.experimental.monitor._utils import numpy_dumps
diff --git a/napari/components/experimental/monitor/_api.py b/napari/components/experimental/monitor/_api.py
index 264bd44b..1be9ae8d 100644
--- a/napari/components/experimental/monitor/_api.py
+++ b/napari/components/experimental/monitor/_api.py
@@ -6,7 +6,7 @@ from queue import Empty, Queue
 from threading import Event
 from typing import NamedTuple
 
-from ....utils.events import EmitterGroup
+from napari.utils.events import EmitterGroup
 
 LOGGER = logging.getLogger("napari.monitor")
 
diff --git a/napari/components/experimental/monitor/_monitor.py b/napari/components/experimental/monitor/_monitor.py
index 972988e6..7f924f33 100644
--- a/napari/components/experimental/monitor/_monitor.py
+++ b/napari/components/experimental/monitor/_monitor.py
@@ -13,7 +13,7 @@ import sys
 from pathlib import Path
 from typing import Optional
 
-from ....utils.translations import trans
+from napari.utils.translations import trans
 
 LOGGER = logging.getLogger("napari.monitor")
 
@@ -176,8 +176,10 @@ class Monitor:
 
         # Late imports so no multiprocessing modules are even
         # imported unless we are going to start the service.
-        from ._api import MonitorApi
-        from ._service import MonitorService
+        from napari.components.experimental.monitor._api import MonitorApi
+        from napari.components.experimental.monitor._service import (
+            MonitorService,
+        )
 
         # Create the API first. It will register our callbacks, then
         # we start the manager that will serve those callbacks.
diff --git a/napari/components/experimental/monitor/_service.py b/napari/components/experimental/monitor/_service.py
index 2d18ac97..b670dd94 100644
--- a/napari/components/experimental/monitor/_service.py
+++ b/napari/components/experimental/monitor/_service.py
@@ -98,7 +98,7 @@ import os
 import subprocess
 from multiprocessing.managers import SharedMemoryManager
 
-from ._utils import base64_encoded_json
+from napari.components.experimental.monitor._utils import base64_encoded_json
 
 LOGGER = logging.getLogger("napari.monitor")
 
diff --git a/napari/components/experimental/remote/__init__.py b/napari/components/experimental/remote/__init__.py
index 2ae26652..0e5ddb51 100644
--- a/napari/components/experimental/remote/__init__.py
+++ b/napari/components/experimental/remote/__init__.py
@@ -1 +1 @@
-from ._manager import RemoteManager
+from napari.components.experimental.remote._manager import RemoteManager
diff --git a/napari/components/experimental/remote/_commands.py b/napari/components/experimental/remote/_commands.py
index 8a11b215..62c2e1c9 100644
--- a/napari/components/experimental/remote/_commands.py
+++ b/napari/components/experimental/remote/_commands.py
@@ -3,8 +3,8 @@
 import json
 import logging
 
-from ....layers.image.experimental.octree_image import _OctreeImageBase
-from ...layerlist import LayerList
+from napari.components.layerlist import LayerList
+from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
 LOGGER = logging.getLogger("napari.monitor")
 
diff --git a/napari/components/experimental/remote/_manager.py b/napari/components/experimental/remote/_manager.py
index b59bef75..15b2d569 100644
--- a/napari/components/experimental/remote/_manager.py
+++ b/napari/components/experimental/remote/_manager.py
@@ -2,10 +2,10 @@
 """
 import logging
 
-from ....utils.events import Event
-from ...layerlist import LayerList
-from ._commands import RemoteCommands
-from ._messages import RemoteMessages
+from napari.components.experimental.remote._commands import RemoteCommands
+from napari.components.experimental.remote._messages import RemoteMessages
+from napari.components.layerlist import LayerList
+from napari.utils.events import Event
 
 LOGGER = logging.getLogger("napari.monitor")
 
diff --git a/napari/components/experimental/remote/_messages.py b/napari/components/experimental/remote/_messages.py
index 0d38d99c..f5041434 100644
--- a/napari/components/experimental/remote/_messages.py
+++ b/napari/components/experimental/remote/_messages.py
@@ -6,9 +6,9 @@ import logging
 import time
 from typing import Dict
 
-from ....layers.image.experimental.octree_image import _OctreeImageBase
-from ...layerlist import LayerList
-from ..monitor import monitor
+from napari.components.experimental.monitor import monitor
+from napari.components.layerlist import LayerList
+from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
 LOGGER = logging.getLogger("napari.monitor")
 
diff --git a/napari/components/grid.py b/napari/components/grid.py
index 1d649376..28d4dd34 100644
--- a/napari/components/grid.py
+++ b/napari/components/grid.py
@@ -2,8 +2,8 @@ from typing import Tuple
 
 import numpy as np
 
-from ..settings._application import GridHeight, GridStride, GridWidth
-from ..utils.events import EventedModel
+from napari.settings._application import GridHeight, GridStride, GridWidth
+from napari.utils.events import EventedModel
 
 
 class GridCanvas(EventedModel):
diff --git a/napari/components/layerlist.py b/napari/components/layerlist.py
index 3a9daf43..dd345cba 100644
--- a/napari/components/layerlist.py
+++ b/napari/components/layerlist.py
@@ -6,11 +6,11 @@ from typing import TYPE_CHECKING, Iterable, List, Optional, Tuple, Union
 
 import numpy as np
 
-from ..layers import Layer
-from ..layers.image.image import _ImageBase
-from ..utils.events.containers import SelectableEventedList
-from ..utils.naming import inc_name_count
-from ..utils.translations import trans
+from napari.layers import Layer
+from napari.layers.image.image import _ImageBase
+from napari.utils.events.containers import SelectableEventedList
+from napari.utils.naming import inc_name_count
+from napari.utils.translations import trans
 
 Extent = namedtuple('Extent', 'data world step')
 
@@ -67,8 +67,8 @@ class LayerList(SelectableEventedList[Layer]):
         # Ideally, the app should be aware of the layerlist, but not vice versa.
         # This could probably be done by having the layerlist emit events that the app
         # connects to, then the `_ctx` object would live on the app, (not here)
-        from .._app_model.context import create_context
-        from .._app_model.context._layerlist_context import (
+        from napari._app_model.context import create_context
+        from napari._app_model.context._layerlist_context import (
             LayerListContextKeys,
         )
 
@@ -371,7 +371,7 @@ class LayerList(SelectableEventedList[Layer]):
         # adding this method here allows us to emit an event when
         # layers in this group are linked/unlinked.  Which is necessary
         # for updating context
-        from ..layers.utils import _link_layers
+        from napari.layers.utils import _link_layers
 
         if layers is not None:
             layers = [self[x] if isinstance(x, str) else x for x in layers]  # type: ignore
@@ -456,7 +456,7 @@ class LayerList(SelectableEventedList[Layer]):
         list of str
             File paths of any files that were written.
         """
-        from ..plugins.io import save_layers
+        from napari.plugins.io import save_layers
 
         layers = (
             [x for x in self if x in self.selection]
diff --git a/napari/components/overlays/__init__.py b/napari/components/overlays/__init__.py
index 05f9c9bf..66edf5e0 100644
--- a/napari/components/overlays/__init__.py
+++ b/napari/components/overlays/__init__.py
@@ -1,5 +1,9 @@
-from .axes import AxesOverlay
-from .base import BaseOverlay, CanvasOverlay, SceneOverlay
-from .overlays import Overlays
-from .scale_bar import ScaleBarOverlay
-from .text import TextOverlay
+from napari.components.overlays.axes import AxesOverlay
+from napari.components.overlays.base import (
+    BaseOverlay,
+    CanvasOverlay,
+    SceneOverlay,
+)
+from napari.components.overlays.overlays import Overlays
+from napari.components.overlays.scale_bar import ScaleBarOverlay
+from napari.components.overlays.text import TextOverlay
diff --git a/napari/components/overlays/_interaction_box_mouse_bindings.py b/napari/components/overlays/_interaction_box_mouse_bindings.py
index b42c5085..cff255f0 100644
--- a/napari/components/overlays/_interaction_box_mouse_bindings.py
+++ b/napari/components/overlays/_interaction_box_mouse_bindings.py
@@ -3,11 +3,11 @@ from weakref import ref
 
 import numpy as np
 
-from ...layers.utils.layer_utils import dims_displayed_world_to_layer
-from ...utils.action_manager import action_manager
-from ...utils.transforms import Affine
-from ...utils.translations import trans
-from ._interaction_box_constants import Box
+from napari.components.overlays._interaction_box_constants import Box
+from napari.layers.utils.layer_utils import dims_displayed_world_to_layer
+from napari.utils.action_manager import action_manager
+from napari.utils.transforms import Affine
+from napari.utils.translations import trans
 
 
 def inside_boxes(boxes):
diff --git a/napari/components/overlays/axes.py b/napari/components/overlays/axes.py
index 84b9857c..f55e715b 100644
--- a/napari/components/overlays/axes.py
+++ b/napari/components/overlays/axes.py
@@ -1,4 +1,4 @@
-from .base import SceneOverlay
+from napari.components.overlays.base import SceneOverlay
 
 
 class AxesOverlay(SceneOverlay):
diff --git a/napari/components/overlays/base.py b/napari/components/overlays/base.py
index e02dc7b1..4575bfca 100644
--- a/napari/components/overlays/base.py
+++ b/napari/components/overlays/base.py
@@ -1,5 +1,5 @@
-from ...utils.events import EventedModel
-from .._viewer_constants import CanvasPosition
+from napari.components._viewer_constants import CanvasPosition
+from napari.utils.events import EventedModel
 
 
 class BaseOverlay(EventedModel):
diff --git a/napari/components/overlays/interaction_box.py b/napari/components/overlays/interaction_box.py
index fbe9be19..062b13ac 100644
--- a/napari/components/overlays/interaction_box.py
+++ b/napari/components/overlays/interaction_box.py
@@ -1,8 +1,8 @@
 import numpy as np
 
-from ...utils.events import EventedModel
-from ...utils.events.custom_types import Array
-from ...utils.transforms import Affine
+from napari.utils.events import EventedModel
+from napari.utils.events.custom_types import Array
+from napari.utils.transforms import Affine
 
 
 class InteractionBox(EventedModel):
diff --git a/napari/components/overlays/overlays.py b/napari/components/overlays/overlays.py
index e5be4806..ee82342b 100644
--- a/napari/components/overlays/overlays.py
+++ b/napari/components/overlays/overlays.py
@@ -1,7 +1,7 @@
 from pydantic import Field
 
-from ...utils.events import EventedModel
-from .interaction_box import InteractionBox
+from napari.components.overlays.interaction_box import InteractionBox
+from napari.utils.events import EventedModel
 
 
 class Overlays(EventedModel):
diff --git a/napari/components/overlays/scale_bar.py b/napari/components/overlays/scale_bar.py
index 84a1b7c4..9f8c8021 100644
--- a/napari/components/overlays/scale_bar.py
+++ b/napari/components/overlays/scale_bar.py
@@ -1,8 +1,8 @@
 """Scale bar model."""
 from typing import Optional
 
-from ...utils.color import ColorValue
-from .base import CanvasOverlay
+from napari.components.overlays.base import CanvasOverlay
+from napari.utils.color import ColorValue
 
 
 class ScaleBarOverlay(CanvasOverlay):
diff --git a/napari/components/overlays/text.py b/napari/components/overlays/text.py
index 878f54a0..0926408c 100644
--- a/napari/components/overlays/text.py
+++ b/napari/components/overlays/text.py
@@ -1,8 +1,7 @@
 """Text label model."""
+from napari.components.overlays.base import CanvasOverlay
 from napari.utils.color import ColorValue
 
-from .base import CanvasOverlay
-
 
 class TextOverlay(CanvasOverlay):
     """Label model to display arbitrary text in the canvas
diff --git a/napari/components/tooltip.py b/napari/components/tooltip.py
index cbcce6e0..376a5ce4 100644
--- a/napari/components/tooltip.py
+++ b/napari/components/tooltip.py
@@ -1,4 +1,4 @@
-from ..utils.events import EventedModel
+from napari.utils.events import EventedModel
 
 
 class Tooltip(EventedModel):
diff --git a/napari/components/viewer_model.py b/napari/components/viewer_model.py
index 8a25ecf9..46159fdc 100644
--- a/napari/components/viewer_model.py
+++ b/napari/components/viewer_model.py
@@ -22,41 +22,46 @@ from typing import (
 import numpy as np
 from pydantic import Extra, Field, validator
 
-from .. import layers
-from ..errors import (
+from napari import layers
+from napari.components._viewer_mouse_bindings import dims_scroll
+from napari.components.camera import Camera
+from napari.components.cursor import Cursor
+from napari.components.dims import Dims
+from napari.components.grid import GridCanvas
+from napari.components.layerlist import LayerList
+from napari.components.overlays import (
+    AxesOverlay,
+    Overlays,
+    ScaleBarOverlay,
+    TextOverlay,
+)
+from napari.components.tooltip import Tooltip
+from napari.errors import (
     MultipleReaderError,
     NoAvailableReaderError,
     ReaderPluginError,
 )
-from ..layers import Image, Labels, Layer, Points, Shapes
-from ..layers._source import layer_source
-from ..layers.image._image_utils import guess_labels
-from ..layers.labels._labels_key_bindings import labels_fun_to_mode
-from ..layers.points._points_key_bindings import points_fun_to_mode
-from ..layers.shapes._shapes_key_bindings import shapes_fun_to_mode
-from ..layers.utils.stack_utils import split_channels
-from ..plugins.utils import get_potential_readers, get_preferred_reader
-from ..settings import get_settings
-from ..utils._register import create_func as create_add_method
-from ..utils.action_manager import action_manager
-from ..utils.colormaps import ensure_colormap
-from ..utils.events import Event, EventedModel, disconnect_events
-from ..utils.events.event import WarningEmitter
-from ..utils.key_bindings import KeymapProvider
-from ..utils.migrations import rename_argument
-from ..utils.misc import is_sequence
-from ..utils.mouse_bindings import MousemapProvider
-from ..utils.progress import progress
-from ..utils.theme import available_themes
-from ..utils.translations import trans
-from ._viewer_mouse_bindings import dims_scroll
-from .camera import Camera
-from .cursor import Cursor
-from .dims import Dims
-from .grid import GridCanvas
-from .layerlist import LayerList
-from .overlays import AxesOverlay, Overlays, ScaleBarOverlay, TextOverlay
-from .tooltip import Tooltip
+from napari.layers import Image, Labels, Layer, Points, Shapes
+from napari.layers._source import layer_source
+from napari.layers.image._image_utils import guess_labels
+from napari.layers.labels._labels_key_bindings import labels_fun_to_mode
+from napari.layers.points._points_key_bindings import points_fun_to_mode
+from napari.layers.shapes._shapes_key_bindings import shapes_fun_to_mode
+from napari.layers.utils.stack_utils import split_channels
+from napari.plugins.utils import get_potential_readers, get_preferred_reader
+from napari.settings import get_settings
+from napari.utils._register import create_func as create_add_method
+from napari.utils.action_manager import action_manager
+from napari.utils.colormaps import ensure_colormap
+from napari.utils.events import Event, EventedModel, disconnect_events
+from napari.utils.events.event import WarningEmitter
+from napari.utils.key_bindings import KeymapProvider
+from napari.utils.migrations import rename_argument
+from napari.utils.misc import is_sequence
+from napari.utils.mouse_bindings import MousemapProvider
+from napari.utils.progress import progress
+from napari.utils.theme import available_themes
+from napari.utils.translations import trans
 
 DEFAULT_THEME = 'dark'
 EXCLUDE_DICT = {
@@ -71,7 +76,7 @@ EXCLUDE_DICT = {
 EXCLUDE_JSON = EXCLUDE_DICT.union({'layers', 'active_layer'})
 
 if TYPE_CHECKING:
-    from ..types import FullLayerData, LayerData
+    from napari.types import FullLayerData, LayerData
 
 PathLike = Union[str, Path]
 PathOrPaths = Union[PathLike, Sequence[PathLike]]
@@ -146,7 +151,7 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
 
     def __init__(self, title='napari', ndisplay=2, order=(), axis_labels=()):
         # max_depth=0 means don't look for parent contexts.
-        from .._app_model.context import create_context
+        from napari._app_model.context import create_context
 
         # FIXME: just like the LayerList, this object should ideally be created
         # elsewhere.  The app should know about the ViewerModel, but not vice versa.
@@ -463,7 +468,9 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
 
         For example run "viewer.experimental.cmds.loader.help".
         """
-        from .experimental.commands import ExperimentalNamespace
+        from napari.components.experimental.commands import (
+            ExperimentalNamespace,
+        )
 
         return ExperimentalNamespace(self.layers)
 
@@ -867,7 +874,7 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
         KeyError
             If `plugin` does not provide a sample named `sample`.
         """
-        from ..plugins import _npe2, plugin_manager
+        from napari.plugins import _npe2, plugin_manager
 
         # try with npe2
         data, available = _npe2.get_sample_data(plugin, sample)
@@ -1200,7 +1207,7 @@ class ViewerModel(KeymapProvider, MousemapProvider, EventedModel):
         List[Layer]
             A list of any layers that were added to the viewer.
         """
-        from ..plugins.io import read_data_with_plugins
+        from napari.plugins.io import read_data_with_plugins
 
         assert stack is not None
         assert isinstance(paths, list)
diff --git a/napari/errors/__init__.py b/napari/errors/__init__.py
index bca7cb77..1346d140 100644
--- a/napari/errors/__init__.py
+++ b/napari/errors/__init__.py
@@ -1,4 +1,4 @@
-from .reader_errors import (
+from napari.errors.reader_errors import (
     MultipleReaderError,
     NoAvailableReaderError,
     ReaderPluginError,
diff --git a/napari/experimental/__init__.py b/napari/experimental/__init__.py
index d7259b69..ec911f77 100644
--- a/napari/experimental/__init__.py
+++ b/napari/experimental/__init__.py
@@ -1,5 +1,8 @@
-from ..components.experimental.chunk import chunk_loader, synchronous_loading
-from ..layers.utils._link_layers import (
+from napari.components.experimental.chunk import (
+    chunk_loader,
+    synchronous_loading,
+)
+from napari.layers.utils._link_layers import (
     layers_linked,
     link_layers,
     unlink_layers,
diff --git a/napari/layers/__init__.py b/napari/layers/__init__.py
index 2250e80d..fef699d8 100644
--- a/napari/layers/__init__.py
+++ b/napari/layers/__init__.py
@@ -7,15 +7,15 @@ to the super constructor.
 import inspect as _inspect
 from importlib import import_module as _imp
 
-from ..utils.misc import all_subclasses as _all_subcls
-from .base import Layer
-from .image import Image
-from .labels import Labels
-from .points import Points
-from .shapes import Shapes
-from .surface import Surface
-from .tracks import Tracks
-from .vectors import Vectors
+from napari.layers.base import Layer
+from napari.layers.image import Image
+from napari.layers.labels import Labels
+from napari.layers.points import Points
+from napari.layers.shapes import Shapes
+from napari.layers.surface import Surface
+from napari.layers.tracks import Tracks
+from napari.layers.vectors import Vectors
+from napari.utils.misc import all_subclasses as _all_subcls
 
 # isabstact check is to exclude _ImageBase class
 NAMES = {
diff --git a/napari/layers/_data_protocols.py b/napari/layers/_data_protocols.py
index fef8470e..a95037d3 100644
--- a/napari/layers/_data_protocols.py
+++ b/napari/layers/_data_protocols.py
@@ -11,7 +11,7 @@ from typing import (
     runtime_checkable,
 )
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 _OBJ_NAMES = set(dir(Protocol))
 _OBJ_NAMES.update({'__annotations__', '__dict__', '__weakref__'})
@@ -19,7 +19,7 @@ _OBJ_NAMES.update({'__annotations__', '__dict__', '__weakref__'})
 if TYPE_CHECKING:
     from enum import Enum
 
-    from ..types import DTypeLike
+    from napari.types import DTypeLike
 
     # https://github.com/python/typing/issues/684#issuecomment-548203158
     class ellipsis(Enum):
diff --git a/napari/layers/_layer_actions.py b/napari/layers/_layer_actions.py
index 8e1b2095..874cfd46 100644
--- a/napari/layers/_layer_actions.py
+++ b/napari/layers/_layer_actions.py
@@ -9,14 +9,14 @@ from typing import TYPE_CHECKING, List, cast
 
 import numpy as np
 
-from ..utils.translations import trans
-from . import Image, Labels, Layer
-from ._source import layer_source
-from .utils import stack_utils
-from .utils._link_layers import get_linked_layers
+from napari.layers import Image, Labels, Layer
+from napari.layers._source import layer_source
+from napari.layers.utils import stack_utils
+from napari.layers.utils._link_layers import get_linked_layers
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ..components import LayerList
+    from napari.components import LayerList
 
 
 def _duplicate_layer(ll: LayerList, *, name: str = ''):
@@ -48,7 +48,7 @@ def _split_rgb(ll: LayerList):
 
 
 def _convert(ll: LayerList, type_: str):
-    from ..layers import Shapes
+    from napari.layers import Shapes
 
     for lay in list(ll.selection):
         idx = ll.index(lay)
diff --git a/napari/layers/_multiscale_data.py b/napari/layers/_multiscale_data.py
index 8f0570fe..018bc942 100644
--- a/napari/layers/_multiscale_data.py
+++ b/napari/layers/_multiscale_data.py
@@ -4,8 +4,8 @@ from typing import List, Sequence, Tuple, Union
 
 import numpy as np
 
-from ..utils.translations import trans
-from ._data_protocols import LayerDataProtocol, assert_protocol
+from napari.layers._data_protocols import LayerDataProtocol, assert_protocol
+from napari.utils.translations import trans
 
 
 # note: this also implements `LayerDataProtocol`, but we don't need to inherit.
diff --git a/napari/layers/_source.py b/napari/layers/_source.py
index 14cd65c8..fac010ac 100644
--- a/napari/layers/_source.py
+++ b/napari/layers/_source.py
@@ -8,7 +8,7 @@ from typing import Optional, Tuple
 from magicgui.widgets import FunctionGui
 from pydantic import BaseModel, validator
 
-from .base.base import Layer
+from napari.layers.base.base import Layer
 
 
 class Source(BaseModel):
diff --git a/napari/layers/base/__init__.py b/napari/layers/base/__init__.py
index 5bbf5b48..83bc1f8c 100644
--- a/napari/layers/base/__init__.py
+++ b/napari/layers/base/__init__.py
@@ -1 +1 @@
-from .base import Layer, no_op
+from napari.layers.base.base import Layer, no_op
diff --git a/napari/layers/base/_base_constants.py b/napari/layers/base/_base_constants.py
index 010726f2..09a79e45 100644
--- a/napari/layers/base/_base_constants.py
+++ b/napari/layers/base/_base_constants.py
@@ -1,8 +1,8 @@
 from collections import OrderedDict
 from enum import auto
 
-from ...utils.misc import StringEnum
-from ...utils.translations import trans
+from napari.utils.misc import StringEnum
+from napari.utils.translations import trans
 
 
 class Blending(StringEnum):
diff --git a/napari/layers/base/base.py b/napari/layers/base/base.py
index e3517f4a..f8ff295f 100644
--- a/napari/layers/base/base.py
+++ b/napari/layers/base/base.py
@@ -13,35 +13,37 @@ import magicgui as mgui
 import numpy as np
 from npe2 import plugin_manager as pm
 
-from ...utils._dask_utils import configure_dask
-from ...utils._magicgui import (
-    add_layer_to_viewer,
-    add_layers_to_viewer,
-    get_layers,
+from napari.layers.base._base_constants import Blending
+from napari.layers.utils._slice_input import _SliceInput
+from napari.layers.utils.interactivity_utils import (
+    drag_data_to_projected_distance,
 )
-from ...utils.events import EmitterGroup, Event
-from ...utils.events.event import WarningEmitter
-from ...utils.geometry import (
-    find_front_back_face,
-    intersect_line_with_axis_aligned_bounding_box_3d,
-)
-from ...utils.key_bindings import KeymapProvider
-from ...utils.mouse_bindings import MousemapProvider
-from ...utils.naming import magic_name
-from ...utils.status_messages import generate_layer_coords_status
-from ...utils.transforms import Affine, CompositeAffine, TransformChain
-from ...utils.translations import trans
-from ..utils._slice_input import _SliceInput
-from ..utils.interactivity_utils import drag_data_to_projected_distance
-from ..utils.layer_utils import (
+from napari.layers.utils.layer_utils import (
     coerce_affine,
     compute_multiscale_level_and_corners,
     convert_to_uint8,
     dims_displayed_world_to_layer,
     get_extent_world,
 )
-from ..utils.plane import ClippingPlane, ClippingPlaneList
-from ._base_constants import Blending
+from napari.layers.utils.plane import ClippingPlane, ClippingPlaneList
+from napari.utils._dask_utils import configure_dask
+from napari.utils._magicgui import (
+    add_layer_to_viewer,
+    add_layers_to_viewer,
+    get_layers,
+)
+from napari.utils.events import EmitterGroup, Event
+from napari.utils.events.event import WarningEmitter
+from napari.utils.geometry import (
+    find_front_back_face,
+    intersect_line_with_axis_aligned_bounding_box_3d,
+)
+from napari.utils.key_bindings import KeymapProvider
+from napari.utils.mouse_bindings import MousemapProvider
+from napari.utils.naming import magic_name
+from napari.utils.status_messages import generate_layer_coords_status
+from napari.utils.transforms import Affine, CompositeAffine, TransformChain
+from napari.utils.translations import trans
 
 Extent = namedtuple('Extent', 'data world step')
 
@@ -247,7 +249,7 @@ class Layer(KeymapProvider, MousemapProvider, ABC):
             )
 
         # Needs to be imported here to avoid circular import in _source
-        from .._source import current_source
+        from napari.layers._source import current_source
 
         self._source = current_source()
         self.dask_optimized_slicing = configure_dask(data, cache)
@@ -1682,7 +1684,7 @@ class Layer(KeymapProvider, MousemapProvider, ABC):
         list of str
             File paths of any files that were written.
         """
-        from ...plugins.io import save_layers
+        from napari.plugins.io import save_layers
 
         return save_layers(path, [self], plugin=plugin)
 
@@ -1742,8 +1744,8 @@ class Layer(KeymapProvider, MousemapProvider, ABC):
         >>> Layer.create(*data)
 
         """
-        from ... import layers
-        from ..image._image_utils import guess_labels
+        from napari import layers
+        from napari.layers.image._image_utils import guess_labels
 
         layer_type = (layer_type or '').lower()
 
diff --git a/napari/layers/image/__init__.py b/napari/layers/image/__init__.py
index 964ad81d..cc35b9a0 100644
--- a/napari/layers/image/__init__.py
+++ b/napari/layers/image/__init__.py
@@ -1,5 +1,5 @@
-from . import _image_key_bindings
-from .image import Image
+from napari.layers.image import _image_key_bindings
+from napari.layers.image.image import Image
 
 # Note that importing _image_key_bindings is needed as the Image layer gets
 # decorated with keybindings during that process, but it is not directly needed
diff --git a/napari/layers/image/_image_constants.py b/napari/layers/image/_image_constants.py
index 6fe46233..c1975b9c 100644
--- a/napari/layers/image/_image_constants.py
+++ b/napari/layers/image/_image_constants.py
@@ -1,8 +1,8 @@
 from collections import OrderedDict
 from enum import auto
 
-from ...utils.misc import StringEnum
-from ...utils.translations import trans
+from napari.utils.misc import StringEnum
+from napari.utils.translations import trans
 
 
 class Interpolation(StringEnum):
diff --git a/napari/layers/image/_image_key_bindings.py b/napari/layers/image/_image_key_bindings.py
index 2ecd0a93..ed801ded 100644
--- a/napari/layers/image/_image_key_bindings.py
+++ b/napari/layers/image/_image_key_bindings.py
@@ -1,14 +1,13 @@
 from __future__ import annotations
 
 import napari
-
-from ...layers.utils.interactivity_utils import (
+from napari.layers.image._image_constants import Mode
+from napari.layers.image.image import Image
+from napari.layers.utils.interactivity_utils import (
     orient_plane_normal_around_cursor,
 )
-from ...layers.utils.layer_utils import register_layer_action
-from ...utils.translations import trans
-from ._image_constants import Mode
-from .image import Image
+from napari.layers.utils.layer_utils import register_layer_action
+from napari.utils.translations import trans
 
 
 def register_image_action(description: str, repeatable: bool = False):
diff --git a/napari/layers/image/_image_loader.py b/napari/layers/image/_image_loader.py
index 89512046..00da7523 100644
--- a/napari/layers/image/_image_loader.py
+++ b/napari/layers/image/_image_loader.py
@@ -1,6 +1,6 @@
 """ImageLoader class.
 """
-from ._image_slice_data import ImageSliceData
+from napari.layers.image._image_slice_data import ImageSliceData
 
 
 class ImageLoader:
diff --git a/napari/layers/image/_image_mouse_bindings.py b/napari/layers/image/_image_mouse_bindings.py
index 1e757b5f..428bdd91 100644
--- a/napari/layers/image/_image_mouse_bindings.py
+++ b/napari/layers/image/_image_mouse_bindings.py
@@ -4,14 +4,14 @@ from typing import TYPE_CHECKING
 
 import numpy as np
 
-from ...utils.geometry import (
+from napari.utils.geometry import (
     clamp_point_to_bounding_box,
     point_in_bounding_box,
 )
 
 if TYPE_CHECKING:
-    from ...utils.events import Event
-    from .image import Image
+    from napari.layers.image.image import Image
+    from napari.utils.events import Event
 
 
 def move_plane_along_normal(layer: Image, event: Event):
diff --git a/napari/layers/image/_image_slice.py b/napari/layers/image/_image_slice.py
index 14a9d495..40f8827e 100644
--- a/napari/layers/image/_image_slice.py
+++ b/napari/layers/image/_image_slice.py
@@ -7,15 +7,15 @@ from typing import TYPE_CHECKING, Callable
 
 import numpy as np
 
-from ...utils import config
-from ._image_loader import ImageLoader
-from ._image_slice_data import ImageSliceData
-from ._image_view import ImageView
+from napari.layers.image._image_loader import ImageLoader
+from napari.layers.image._image_slice_data import ImageSliceData
+from napari.layers.image._image_view import ImageView
+from napari.utils import config
 
 LOGGER = logging.getLogger("napari.loader")
 
 if TYPE_CHECKING:
-    from ...types import ArrayLike
+    from napari.types import ArrayLike
 
 
 def _create_loader_class() -> ImageLoader:
@@ -27,7 +27,9 @@ def _create_loader_class() -> ImageLoader:
         Return ImageLoader for sync or ChunkImageLoader for async.
     """
     if config.async_loading:
-        from .experimental._chunked_image_loader import ChunkedImageLoader
+        from napari.layers.image.experimental._chunked_image_loader import (
+            ChunkedImageLoader,
+        )
 
         return ChunkedImageLoader()
     else:
diff --git a/napari/layers/image/_image_slice_data.py b/napari/layers/image/_image_slice_data.py
index b04a862d..c96065aa 100644
--- a/napari/layers/image/_image_slice_data.py
+++ b/napari/layers/image/_image_slice_data.py
@@ -6,10 +6,10 @@ from typing import TYPE_CHECKING, Optional, Tuple
 
 import numpy as np
 
-from ..base import Layer
+from napari.layers.base import Layer
 
 if TYPE_CHECKING:
-    from ...types import ArrayLike
+    from napari.types import ArrayLike
 
 
 class ImageSliceData:
diff --git a/napari/layers/image/_image_utils.py b/napari/layers/image/_image_utils.py
index 99530f16..aeb0e2f3 100644
--- a/napari/layers/image/_image_utils.py
+++ b/napari/layers/image/_image_utils.py
@@ -4,9 +4,9 @@ from typing import Tuple
 
 import numpy as np
 
-from ...utils.translations import trans
-from .._data_protocols import LayerDataProtocol
-from .._multiscale_data import MultiScaleData
+from napari.layers._data_protocols import LayerDataProtocol
+from napari.layers._multiscale_data import MultiScaleData
+from napari.utils.translations import trans
 
 
 def guess_rgb(shape):
diff --git a/napari/layers/image/_image_view.py b/napari/layers/image/_image_view.py
index 2828fab9..9464fb2e 100644
--- a/napari/layers/image/_image_view.py
+++ b/napari/layers/image/_image_view.py
@@ -5,7 +5,7 @@ from __future__ import annotations
 from typing import TYPE_CHECKING
 
 if TYPE_CHECKING:
-    from ...types import ArrayLike, Callable
+    from napari.types import ArrayLike, Callable
 
 
 class ImageView:
diff --git a/napari/layers/image/experimental/__init__.py b/napari/layers/image/experimental/__init__.py
index 6d872eed..8641f236 100644
--- a/napari/layers/image/experimental/__init__.py
+++ b/napari/layers/image/experimental/__init__.py
@@ -1,5 +1,10 @@
 """layers.image.experimental
 """
-from .octree_chunk import OctreeChunk, OctreeChunkGeom
-from .octree_intersection import OctreeIntersection
-from .octree_level import OctreeLevel
+from napari.layers.image.experimental.octree_chunk import (
+    OctreeChunk,
+    OctreeChunkGeom,
+)
+from napari.layers.image.experimental.octree_intersection import (
+    OctreeIntersection,
+)
+from napari.layers.image.experimental.octree_level import OctreeLevel
diff --git a/napari/layers/image/experimental/_chunk_set.py b/napari/layers/image/experimental/_chunk_set.py
index d6fda840..4b276425 100644
--- a/napari/layers/image/experimental/_chunk_set.py
+++ b/napari/layers/image/experimental/_chunk_set.py
@@ -7,8 +7,8 @@ from __future__ import annotations
 from typing import TYPE_CHECKING, Dict, List, Set
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk._request import OctreeLocation
-    from .octree_chunk import OctreeChunk
+    from napari.components.experimental.chunk._request import OctreeLocation
+    from napari.layers.image.experimental.octree_chunk import OctreeChunk
 
 
 class ChunkSet:
diff --git a/napari/layers/image/experimental/_chunked_image_loader.py b/napari/layers/image/experimental/_chunked_image_loader.py
index f897fe7e..c46d8940 100644
--- a/napari/layers/image/experimental/_chunked_image_loader.py
+++ b/napari/layers/image/experimental/_chunked_image_loader.py
@@ -5,9 +5,11 @@ This is for pre-Octree Image class only.
 import logging
 from typing import Optional
 
-from .._image_loader import ImageLoader
-from ._chunked_slice_data import ChunkedSliceData
-from ._image_location import ImageLocation
+from napari.layers.image._image_loader import ImageLoader
+from napari.layers.image.experimental._chunked_slice_data import (
+    ChunkedSliceData,
+)
+from napari.layers.image.experimental._image_location import ImageLocation
 
 LOGGER = logging.getLogger("napari.loader")
 
diff --git a/napari/layers/image/experimental/_chunked_slice_data.py b/napari/layers/image/experimental/_chunked_slice_data.py
index 550ff025..233a5f08 100644
--- a/napari/layers/image/experimental/_chunked_slice_data.py
+++ b/napari/layers/image/experimental/_chunked_slice_data.py
@@ -7,15 +7,15 @@ from __future__ import annotations
 import logging
 from typing import TYPE_CHECKING, Optional
 
-from ....components.experimental.chunk import ChunkRequest, chunk_loader
-from ...base import Layer
-from .._image_slice_data import ImageSliceData
-from ._image_location import ImageLocation
+from napari.components.experimental.chunk import ChunkRequest, chunk_loader
+from napari.layers.base import Layer
+from napari.layers.image._image_slice_data import ImageSliceData
+from napari.layers.image.experimental._image_location import ImageLocation
 
 LOGGER = logging.getLogger("napari.loader")
 
 if TYPE_CHECKING:
-    from ....types import ArrayLike
+    from napari.types import ArrayLike
 
 
 class ChunkedSliceData(ImageSliceData):
diff --git a/napari/layers/image/experimental/_image_location.py b/napari/layers/image/experimental/_image_location.py
index dafbdeb4..e454dc48 100644
--- a/napari/layers/image/experimental/_image_location.py
+++ b/napari/layers/image/experimental/_image_location.py
@@ -6,8 +6,8 @@ the chunk we are requesting and once it's loaded.
 """
 import numpy as np
 
-from ....components.experimental.chunk import ChunkLocation, LayerRef
-from ....layers import Layer
+from napari.components.experimental.chunk import ChunkLocation, LayerRef
+from napari.layers import Layer
 
 
 def get_data_id(data) -> int:
diff --git a/napari/layers/image/experimental/_octree_loader.py b/napari/layers/image/experimental/_octree_loader.py
index eab73805..0f35daf0 100644
--- a/napari/layers/image/experimental/_octree_loader.py
+++ b/napari/layers/image/experimental/_octree_loader.py
@@ -7,16 +7,16 @@ from __future__ import annotations
 import logging
 from typing import TYPE_CHECKING, List, Set
 
-from ._chunk_set import ChunkSet
-from .octree import Octree
+from napari.layers.image.experimental._chunk_set import ChunkSet
+from napari.layers.image.experimental.octree import Octree
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk import (
+    from napari.components.experimental.chunk import (
         ChunkRequest,
         LayerRef,
         OctreeLocation,
     )
-    from .octree_chunk import OctreeChunk
+    from napari.layers.image.experimental.octree_chunk import OctreeChunk
 
 
 LOGGER = logging.getLogger("napari.octree.loader")
@@ -376,7 +376,7 @@ class OctreeLoader:
         # Mark that this chunk is being loaded.
         octree_chunk.loading = True
 
-        from ....components.experimental.chunk import (
+        from napari.components.experimental.chunk import (
             ChunkRequest,
             chunk_loader,
         )
@@ -418,7 +418,7 @@ class OctreeLoader:
             The set of chunks the loader can see.
         """
 
-        from ....components.experimental.chunk import chunk_loader
+        from napari.components.experimental.chunk import chunk_loader
 
         def _should_cancel(chunk_request: ChunkRequest) -> bool:
             """Cancel if we are no longer seeing this location."""
diff --git a/napari/layers/image/experimental/_octree_slice.py b/napari/layers/image/experimental/_octree_slice.py
index 947874f4..1a7621b2 100644
--- a/napari/layers/image/experimental/_octree_slice.py
+++ b/napari/layers/image/experimental/_octree_slice.py
@@ -10,22 +10,28 @@ from typing import TYPE_CHECKING, Optional
 
 import numpy as np
 
-from ....utils.translations import trans
-from ._octree_loader import OctreeLoader
-from .octree import Octree
-from .octree_intersection import OctreeIntersection, OctreeView
-from .octree_level import OctreeLevel, OctreeLevelInfo
-from .octree_util import OctreeMetadata
+from napari.layers.image.experimental._octree_loader import OctreeLoader
+from napari.layers.image.experimental.octree import Octree
+from napari.layers.image.experimental.octree_intersection import (
+    OctreeIntersection,
+    OctreeView,
+)
+from napari.layers.image.experimental.octree_level import (
+    OctreeLevel,
+    OctreeLevelInfo,
+)
+from napari.layers.image.experimental.octree_util import OctreeMetadata
+from napari.utils.translations import trans
 
 LOGGER = logging.getLogger("napari.octree.slice")
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk import (
+    from napari.components.experimental.chunk import (
         ChunkRequest,
         LayerRef,
         OctreeLocation,
     )
-    from .octree_chunk import OctreeChunk
+    from napari.layers.image.experimental.octree_chunk import OctreeChunk
 
 
 class OctreeSlice:
diff --git a/napari/layers/image/experimental/octree.py b/napari/layers/image/experimental/octree.py
index c4d2ca97..5f2da7bb 100644
--- a/napari/layers/image/experimental/octree.py
+++ b/napari/layers/image/experimental/octree.py
@@ -6,17 +6,22 @@ import logging
 import math
 from typing import TYPE_CHECKING, List, Optional
 
-from ....utils.perf import block_timer
-from ....utils.translations import trans
-from .octree_level import OctreeLevel, log_levels
-from .octree_tile_builder import create_downsampled_levels
-from .octree_util import OctreeMetadata
+from napari.layers.image.experimental.octree_level import (
+    OctreeLevel,
+    log_levels,
+)
+from napari.layers.image.experimental.octree_tile_builder import (
+    create_downsampled_levels,
+)
+from napari.layers.image.experimental.octree_util import OctreeMetadata
+from napari.utils.perf import block_timer
+from napari.utils.translations import trans
 
 LOGGER = logging.getLogger("napari.octree")
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk._request import OctreeLocation
-    from .octree_chunk import OctreeChunk
+    from napari.components.experimental.chunk._request import OctreeLocation
+    from napari.layers.image.experimental.octree_chunk import OctreeChunk
 
 
 class Octree:
diff --git a/napari/layers/image/experimental/octree_chunk.py b/napari/layers/image/experimental/octree_chunk.py
index a6b99f2c..489056f0 100644
--- a/napari/layers/image/experimental/octree_chunk.py
+++ b/napari/layers/image/experimental/octree_chunk.py
@@ -8,8 +8,8 @@ from typing import TYPE_CHECKING, List, NamedTuple
 import numpy as np
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk._request import OctreeLocation
-    from ....types import ArrayLike
+    from napari.components.experimental.chunk._request import OctreeLocation
+    from napari.types import ArrayLike
 
 LOGGER = logging.getLogger("napari.octree")
 
diff --git a/napari/layers/image/experimental/octree_image.py b/napari/layers/image/experimental/octree_image.py
index 96d29869..5c1188df 100644
--- a/napari/layers/image/experimental/octree_image.py
+++ b/napari/layers/image/experimental/octree_image.py
@@ -10,17 +10,25 @@ from typing import TYPE_CHECKING, List, Set
 
 import numpy as np
 
-from ....utils.events import Event
-from ....utils.translations import trans
-from ..image import _ImageBase
-from ._octree_slice import OctreeSlice, OctreeView
-from .octree_chunk import OctreeChunk
-from .octree_intersection import OctreeIntersection
-from .octree_level import OctreeLevelInfo
-from .octree_util import OctreeDisplayOptions, OctreeMetadata
+from napari.layers.image.experimental._octree_slice import (
+    OctreeSlice,
+    OctreeView,
+)
+from napari.layers.image.experimental.octree_chunk import OctreeChunk
+from napari.layers.image.experimental.octree_intersection import (
+    OctreeIntersection,
+)
+from napari.layers.image.experimental.octree_level import OctreeLevelInfo
+from napari.layers.image.experimental.octree_util import (
+    OctreeDisplayOptions,
+    OctreeMetadata,
+)
+from napari.layers.image.image import _ImageBase
+from napari.utils.events import Event
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk import ChunkRequest
+    from napari.components.experimental.chunk import ChunkRequest
 
 LOGGER = logging.getLogger("napari.octree.image")
 
@@ -418,7 +426,7 @@ class _OctreeImageBase(_ImageBase):
         logic in Image._set_view_slice goes away entirely.
         """
         # Consider non-multiscale data as just having a single level
-        from ....components.experimental.chunk import LayerRef
+        from napari.components.experimental.chunk import LayerRef
 
         multilevel_data = self.data if self.multiscale else [self.data]
 
diff --git a/napari/layers/image/experimental/octree_intersection.py b/napari/layers/image/experimental/octree_intersection.py
index a19560d3..c097004f 100644
--- a/napari/layers/image/experimental/octree_intersection.py
+++ b/napari/layers/image/experimental/octree_intersection.py
@@ -4,9 +4,12 @@ from typing import List, NamedTuple, Tuple
 
 import numpy as np
 
-from .octree_chunk import OctreeChunk
-from .octree_level import OctreeLevel
-from .octree_util import OctreeDisplayOptions, spiral_index
+from napari.layers.image.experimental.octree_chunk import OctreeChunk
+from napari.layers.image.experimental.octree_level import OctreeLevel
+from napari.layers.image.experimental.octree_util import (
+    OctreeDisplayOptions,
+    spiral_index,
+)
 
 MAX_NUM_CHUNKS = 81
 
diff --git a/napari/layers/image/experimental/octree_level.py b/napari/layers/image/experimental/octree_level.py
index cc354dc2..babefcb9 100644
--- a/napari/layers/image/experimental/octree_level.py
+++ b/napari/layers/image/experimental/octree_level.py
@@ -8,13 +8,16 @@ from typing import TYPE_CHECKING, Dict, List, Optional
 
 import numpy as np
 
-from .octree_chunk import OctreeChunk, OctreeChunkGeom
-from .octree_util import OctreeMetadata
+from napari.layers.image.experimental.octree_chunk import (
+    OctreeChunk,
+    OctreeChunkGeom,
+)
+from napari.layers.image.experimental.octree_util import OctreeMetadata
 
 LOGGER = logging.getLogger("napari.octree")
 
 if TYPE_CHECKING:
-    from ....types import ArrayLike
+    from napari.types import ArrayLike
 
 
 class OctreeLevelInfo:
@@ -156,7 +159,9 @@ class OctreeLevel:
         meta = self.info.meta
         layer_ref = meta.layer_ref
 
-        from ....components.experimental.chunk._request import OctreeLocation
+        from napari.components.experimental.chunk._request import (
+            OctreeLocation,
+        )
 
         location = OctreeLocation(
             layer_ref, self.slice_id, level_index, row, col
@@ -226,7 +231,7 @@ def log_levels(levels: List[OctreeLevel], start_level: int = 0) -> None:
     start_level : int
         Start the indexing at this number, shift the indexes up.
     """
-    from ...._vendor.experimental.humanize.src.humanize import intword
+    from napari._vendor.experimental.humanize.src.humanize import intword
 
     def _dim_str(dim: tuple) -> None:
         return f"({dim[0]}, {dim[1]}) = {intword(dim[0] * dim[1])}"
diff --git a/napari/layers/image/experimental/octree_tile_builder.py b/napari/layers/image/experimental/octree_tile_builder.py
index 8e9ab7c1..bd030444 100644
--- a/napari/layers/image/experimental/octree_tile_builder.py
+++ b/napari/layers/image/experimental/octree_tile_builder.py
@@ -9,8 +9,8 @@ import dask.array as da
 import numpy as np
 from scipy import ndimage as ndi
 
-from ....utils.perf import block_timer
-from .octree_util import NormalNoise
+from napari.layers.image.experimental.octree_util import NormalNoise
+from napari.utils.perf import block_timer
 
 LOGGER = logging.getLogger("napari.octree")
 
diff --git a/napari/layers/image/experimental/octree_util.py b/napari/layers/image/experimental/octree_util.py
index 1033c70c..62dce590 100644
--- a/napari/layers/image/experimental/octree_util.py
+++ b/napari/layers/image/experimental/octree_util.py
@@ -7,10 +7,10 @@ from typing import TYPE_CHECKING, NamedTuple
 
 import numpy as np
 
-from ....utils.config import octree_config
+from napari.utils.config import octree_config
 
 if TYPE_CHECKING:
-    from ....components.experimental.chunk import LayerRef
+    from napari.components.experimental.chunk import LayerRef
 
 
 def _get_tile_size() -> int:
diff --git a/napari/layers/image/image.py b/napari/layers/image/image.py
index 7d3a3a9c..1bc2bc0e 100644
--- a/napari/layers/image/image.py
+++ b/napari/layers/image/image.py
@@ -9,40 +9,40 @@ from typing import TYPE_CHECKING, List, Sequence, Tuple, Union
 import numpy as np
 from scipy import ndimage as ndi
 
-from ...utils import config
-from ...utils._dtype import get_dtype_limits, normalize_dtype
-from ...utils.colormaps import AVAILABLE_COLORMAPS
-from ...utils.events import Event
-from ...utils.events.event import WarningEmitter
-from ...utils.events.event_utils import connect_no_arg
-from ...utils.migrations import rename_argument
-from ...utils.misc import reorder_after_dim_reduction
-from ...utils.naming import magic_name
-from ...utils.translations import trans
-from .._data_protocols import LayerDataProtocol
-from .._multiscale_data import MultiScaleData
-from ..base import Layer, no_op
-from ..intensity_mixin import IntensityVisualizationMixin
-from ..utils.layer_utils import calc_data_range
-from ..utils.plane import SlicingPlane
-from ._image_constants import (
+from napari.layers._data_protocols import LayerDataProtocol
+from napari.layers._multiscale_data import MultiScaleData
+from napari.layers.base import Layer, no_op
+from napari.layers.image._image_constants import (
     ImageRendering,
     Interpolation,
     Mode,
     VolumeDepiction,
 )
-from ._image_mouse_bindings import (
+from napari.layers.image._image_mouse_bindings import (
     move_plane_along_normal as plane_drag_callback,
 )
-from ._image_mouse_bindings import (
+from napari.layers.image._image_mouse_bindings import (
     set_plane_position as plane_double_click_callback,
 )
-from ._image_slice import ImageSlice
-from ._image_slice_data import ImageSliceData
-from ._image_utils import guess_multiscale, guess_rgb
+from napari.layers.image._image_slice import ImageSlice
+from napari.layers.image._image_slice_data import ImageSliceData
+from napari.layers.image._image_utils import guess_multiscale, guess_rgb
+from napari.layers.intensity_mixin import IntensityVisualizationMixin
+from napari.layers.utils.layer_utils import calc_data_range
+from napari.layers.utils.plane import SlicingPlane
+from napari.utils import config
+from napari.utils._dtype import get_dtype_limits, normalize_dtype
+from napari.utils.colormaps import AVAILABLE_COLORMAPS
+from napari.utils.events import Event
+from napari.utils.events.event import WarningEmitter
+from napari.utils.events.event_utils import connect_no_arg
+from napari.utils.migrations import rename_argument
+from napari.utils.misc import reorder_after_dim_reduction
+from napari.utils.naming import magic_name
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ...components.experimental.chunk import ChunkRequest
+    from napari.components.experimental.chunk import ChunkRequest
 
 
 # It is important to contain at least one abstractmethod to properly exclude this class
@@ -839,7 +839,9 @@ class _ImageBase(IntensityVisualizationMixin, Layer):
     def _SliceDataClass(self):
         # Use special ChunkedSlideData for async.
         if config.async_loading:
-            from .experimental._chunked_slice_data import ChunkedSliceData
+            from napari.layers.image.experimental._chunked_slice_data import (
+                ChunkedSliceData,
+            )
 
             return ChunkedSliceData
         return ImageSliceData
@@ -1103,7 +1105,7 @@ class Image(_ImageBase):
 
 
 if config.async_octree:
-    from ..image.experimental.octree_image import _OctreeImageBase
+    from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
     class Image(Image, _OctreeImageBase):
         pass
diff --git a/napari/layers/intensity_mixin.py b/napari/layers/intensity_mixin.py
index a22b89fd..8ed317dc 100644
--- a/napari/layers/intensity_mixin.py
+++ b/napari/layers/intensity_mixin.py
@@ -2,16 +2,16 @@ from typing import TYPE_CHECKING
 
 import numpy as np
 
-from ..utils._dtype import normalize_dtype
-from ..utils.colormaps import ensure_colormap
-from ..utils.events import Event
-from ..utils.status_messages import format_float
-from ..utils.validators import _validate_increasing, validate_n_seq
+from napari.utils._dtype import normalize_dtype
+from napari.utils.colormaps import ensure_colormap
+from napari.utils.events import Event
+from napari.utils.status_messages import format_float
+from napari.utils.validators import _validate_increasing, validate_n_seq
 
 validate_2_tuple = validate_n_seq(2)
 
 if TYPE_CHECKING:
-    from .image.image import Image
+    from napari.layers.image.image import Image
 
 
 class IntensityVisualizationMixin:
diff --git a/napari/layers/labels/__init__.py b/napari/layers/labels/__init__.py
index c227709a..069ed094 100644
--- a/napari/layers/labels/__init__.py
+++ b/napari/layers/labels/__init__.py
@@ -1,5 +1,5 @@
-from . import _labels_key_bindings
-from .labels import Labels
+from napari.layers.labels import _labels_key_bindings
+from napari.layers.labels.labels import Labels
 
 # Note that importing _labels_key_bindings is needed as the Labels layer gets
 # decorated with keybindings during that process, but it is not directly needed
diff --git a/napari/layers/labels/_labels_constants.py b/napari/layers/labels/_labels_constants.py
index f201f208..850048fa 100644
--- a/napari/layers/labels/_labels_constants.py
+++ b/napari/layers/labels/_labels_constants.py
@@ -2,8 +2,8 @@ import sys
 from collections import OrderedDict
 from enum import auto
 
-from ...utils.misc import StringEnum
-from ...utils.translations import trans
+from napari.utils.misc import StringEnum
+from napari.utils.translations import trans
 
 
 class Mode(StringEnum):
diff --git a/napari/layers/labels/_labels_key_bindings.py b/napari/layers/labels/_labels_key_bindings.py
index 10a9c06c..7e1afd2b 100644
--- a/napari/layers/labels/_labels_key_bindings.py
+++ b/napari/layers/labels/_labels_key_bindings.py
@@ -1,12 +1,12 @@
 import numpy as np
 
-from ...layers.utils.layer_utils import (
+from napari.layers.labels._labels_constants import Mode
+from napari.layers.labels.labels import Labels
+from napari.layers.utils.layer_utils import (
     register_layer_action,
     register_layer_attr_action,
 )
-from ...utils.translations import trans
-from ._labels_constants import Mode
-from .labels import Labels
+from napari.utils.translations import trans
 
 MIN_BRUSH_SIZE = 1
 MAX_BRUSH_SIZE = 40
diff --git a/napari/layers/labels/_labels_mouse_bindings.py b/napari/layers/labels/_labels_mouse_bindings.py
index dd85dda5..99089e0f 100644
--- a/napari/layers/labels/_labels_mouse_bindings.py
+++ b/napari/layers/labels/_labels_mouse_bindings.py
@@ -1,5 +1,5 @@
-from ._labels_constants import Mode
-from ._labels_utils import mouse_event_to_labels_coordinate
+from napari.layers.labels._labels_constants import Mode
+from napari.layers.labels._labels_utils import mouse_event_to_labels_coordinate
 
 
 def draw(layer, event):
diff --git a/napari/layers/labels/labels.py b/napari/layers/labels/labels.py
index 512606e8..390f9f92 100644
--- a/napari/layers/labels/labels.py
+++ b/napari/layers/labels/labels.py
@@ -7,33 +7,36 @@ import numpy as np
 import pandas as pd
 from scipy import ndimage as ndi
 
-from napari.utils.misc import _is_array_type
-
-from ...utils import config
-from ...utils._dtype import normalize_dtype
-from ...utils.colormaps import (
-    color_dict_to_colormap,
-    label_colormap,
-    low_discrepancy_image,
+from napari.layers.base import no_op
+from napari.layers.image._image_utils import guess_multiscale
+from napari.layers.image.image import _ImageBase
+from napari.layers.labels._labels_constants import (
+    LabelColorMode,
+    LabelsRendering,
+    Mode,
 )
-from ...utils.events import Event
-from ...utils.events.custom_types import Array
-from ...utils.geometry import clamp_point_to_bounding_box
-from ...utils.naming import magic_name
-from ...utils.status_messages import generate_layer_coords_status
-from ...utils.translations import trans
-from ..base import no_op
-from ..image._image_utils import guess_multiscale
-from ..image.image import _ImageBase
-from ..utils.color_transformations import transform_color
-from ..utils.layer_utils import _FeatureTable
-from ._labels_constants import LabelColorMode, LabelsRendering, Mode
-from ._labels_mouse_bindings import draw, pick
-from ._labels_utils import (
+from napari.layers.labels._labels_mouse_bindings import draw, pick
+from napari.layers.labels._labels_utils import (
     indices_in_shape,
     interpolate_coordinates,
     sphere_indices,
 )
+from napari.layers.utils.color_transformations import transform_color
+from napari.layers.utils.layer_utils import _FeatureTable
+from napari.utils import config
+from napari.utils._dtype import normalize_dtype
+from napari.utils.colormaps import (
+    color_dict_to_colormap,
+    label_colormap,
+    low_discrepancy_image,
+)
+from napari.utils.events import Event
+from napari.utils.events.custom_types import Array
+from napari.utils.geometry import clamp_point_to_bounding_box
+from napari.utils.misc import _is_array_type
+from napari.utils.naming import magic_name
+from napari.utils.status_messages import generate_layer_coords_status
+from napari.utils.translations import trans
 
 
 class Labels(_ImageBase):
@@ -1497,7 +1500,7 @@ class Labels(_ImageBase):
 
 
 if config.async_octree:
-    from ..image.experimental.octree_image import _OctreeImageBase
+    from napari.layers.image.experimental.octree_image import _OctreeImageBase
 
     class Labels(Labels, _OctreeImageBase):
         pass
diff --git a/napari/layers/points/__init__.py b/napari/layers/points/__init__.py
index a23610b0..9a1e27a5 100644
--- a/napari/layers/points/__init__.py
+++ b/napari/layers/points/__init__.py
@@ -1,5 +1,5 @@
-from . import _points_key_bindings
-from .points import Points
+from napari.layers.points import _points_key_bindings
+from napari.layers.points.points import Points
 
 # Note that importing _points_key_bindings is needed as the Points layer gets
 # decorated with keybindings during that process, but it is not directly needed
diff --git a/napari/layers/points/_points_constants.py b/napari/layers/points/_points_constants.py
index 0a8a1249..5be66891 100644
--- a/napari/layers/points/_points_constants.py
+++ b/napari/layers/points/_points_constants.py
@@ -1,8 +1,8 @@
 from collections import OrderedDict
 from enum import Enum, auto
 
-from ...utils.misc import StringEnum
-from ...utils.translations import trans
+from napari.utils.misc import StringEnum
+from napari.utils.translations import trans
 
 
 class ColorMode(StringEnum):
diff --git a/napari/layers/points/_points_key_bindings.py b/napari/layers/points/_points_key_bindings.py
index b6e3906c..1995d131 100644
--- a/napari/layers/points/_points_key_bindings.py
+++ b/napari/layers/points/_points_key_bindings.py
@@ -1,14 +1,14 @@
 from __future__ import annotations
 
-from napari.utils.notifications import show_info
 
-from ...layers.utils.layer_utils import (
+from napari.layers.points._points_constants import Mode
+from napari.layers.points.points import Points
+from napari.layers.utils.layer_utils import (
     register_layer_action,
     register_layer_attr_action,
 )
-from ...utils.translations import trans
-from ._points_constants import Mode
-from .points import Points
+from napari.utils.notifications import show_info
+from napari.utils.translations import trans
 
 
 def register_points_action(description: str, repeatable: bool = False):
diff --git a/napari/layers/points/_points_mouse_bindings.py b/napari/layers/points/_points_mouse_bindings.py
index 98930efe..d39291f1 100644
--- a/napari/layers/points/_points_mouse_bindings.py
+++ b/napari/layers/points/_points_mouse_bindings.py
@@ -1,6 +1,6 @@
 import numpy as np
 
-from ._points_utils import _points_in_box_3d, points_in_box
+from napari.layers.points._points_utils import _points_in_box_3d, points_in_box
 
 
 def select(layer, event):
diff --git a/napari/layers/points/_points_utils.py b/napari/layers/points/_points_utils.py
index a2d7bd0a..d8c912e5 100644
--- a/napari/layers/points/_points_utils.py
+++ b/napari/layers/points/_points_utils.py
@@ -2,8 +2,8 @@ from typing import List, Optional, Tuple
 
 import numpy as np
 
-from ...utils.geometry import project_points_onto_plane
-from ...utils.translations import trans
+from napari.utils.geometry import project_points_onto_plane
+from napari.utils.translations import trans
 
 
 def _create_box_from_corners_3d(
diff --git a/napari/layers/points/points.py b/napari/layers/points/points.py
index 5f5805ab..13dd9f39 100644
--- a/napari/layers/points/points.py
+++ b/napari/layers/points/points.py
@@ -8,33 +8,40 @@ import numpy as np
 import pandas as pd
 from scipy.stats import gmean
 
-from ...utils.colormaps import Colormap, ValidColormapArg
-from ...utils.colormaps.standardize_color import hex_to_name, rgb_to_hex
-from ...utils.events import Event
-from ...utils.events.custom_types import Array
-from ...utils.geometry import project_points_onto_plane, rotate_points
-from ...utils.status_messages import generate_layer_coords_status
-from ...utils.transforms import Affine
-from ...utils.translations import trans
-from ..base import Layer, no_op
-from ..utils._color_manager_constants import ColorMode
-from ..utils.color_manager import ColorManager
-from ..utils.color_transformations import ColorType
-from ..utils.interactivity_utils import displayed_plane_from_nd_line_segment
-from ..utils.layer_utils import (
-    _features_to_properties,
-    _FeatureTable,
-    _unique_element,
+from napari.layers.base import Layer, no_op
+from napari.layers.points._points_constants import (
+    SYMBOL_ALIAS,
+    Mode,
+    Shading,
+    Symbol,
 )
-from ..utils.text_manager import TextManager
-from ._points_constants import SYMBOL_ALIAS, Mode, Shading, Symbol
-from ._points_mouse_bindings import add, highlight, select
-from ._points_utils import (
+from napari.layers.points._points_mouse_bindings import add, highlight, select
+from napari.layers.points._points_utils import (
     _create_box_from_corners_3d,
     create_box,
     fix_data_points,
     points_to_squares,
 )
+from napari.layers.utils._color_manager_constants import ColorMode
+from napari.layers.utils.color_manager import ColorManager
+from napari.layers.utils.color_transformations import ColorType
+from napari.layers.utils.interactivity_utils import (
+    displayed_plane_from_nd_line_segment,
+)
+from napari.layers.utils.layer_utils import (
+    _features_to_properties,
+    _FeatureTable,
+    _unique_element,
+)
+from napari.layers.utils.text_manager import TextManager
+from napari.utils.colormaps import Colormap, ValidColormapArg
+from napari.utils.colormaps.standardize_color import hex_to_name, rgb_to_hex
+from napari.utils.events import Event
+from napari.utils.events.custom_types import Array
+from napari.utils.geometry import project_points_onto_plane, rotate_points
+from napari.utils.status_messages import generate_layer_coords_status
+from napari.utils.transforms import Affine
+from napari.utils.translations import trans
 
 DEFAULT_COLOR_CYCLE = np.array([[1, 0, 1, 1], [0, 1, 0, 1]])
 
diff --git a/napari/layers/shapes/__init__.py b/napari/layers/shapes/__init__.py
index accaee50..d39aa73d 100644
--- a/napari/layers/shapes/__init__.py
+++ b/napari/layers/shapes/__init__.py
@@ -1,5 +1,5 @@
-from . import _shapes_key_bindings
-from .shapes import Shapes
+from napari.layers.shapes import _shapes_key_bindings
+from napari.layers.shapes.shapes import Shapes
 
 # Note that importing _shapes_key_bindings is needed as the Shapes layer gets
 # decorated with keybindings during that process, but it is not directly needed
diff --git a/napari/layers/shapes/_shape_list.py b/napari/layers/shapes/_shape_list.py
index 5e6c0054..396bba2c 100644
--- a/napari/layers/shapes/_shape_list.py
+++ b/napari/layers/shapes/_shape_list.py
@@ -3,16 +3,16 @@ from typing import Sequence, Union
 
 import numpy as np
 
-from ...utils.geometry import (
+from napari.layers.shapes._mesh import Mesh
+from napari.layers.shapes._shapes_constants import ShapeType, shape_classes
+from napari.layers.shapes._shapes_models import Line, Path, Shape
+from napari.layers.shapes._shapes_utils import triangles_intersect_box
+from napari.utils.geometry import (
     inside_triangles,
     intersect_line_with_triangles,
     line_in_triangles_3d,
 )
-from ...utils.translations import trans
-from ._mesh import Mesh
-from ._shapes_constants import ShapeType, shape_classes
-from ._shapes_models import Line, Path, Shape
-from ._shapes_utils import triangles_intersect_box
+from napari.utils.translations import trans
 
 
 class ShapeList:
diff --git a/napari/layers/shapes/_shapes_constants.py b/napari/layers/shapes/_shapes_constants.py
index 87cda1b6..cd05dcd9 100644
--- a/napari/layers/shapes/_shapes_constants.py
+++ b/napari/layers/shapes/_shapes_constants.py
@@ -1,8 +1,14 @@
 import sys
 from enum import auto
 
-from ...utils.misc import StringEnum
-from ._shapes_models import Ellipse, Line, Path, Polygon, Rectangle
+from napari.layers.shapes._shapes_models import (
+    Ellipse,
+    Line,
+    Path,
+    Polygon,
+    Rectangle,
+)
+from napari.utils.misc import StringEnum
 
 
 class Mode(StringEnum):
diff --git a/napari/layers/shapes/_shapes_key_bindings.py b/napari/layers/shapes/_shapes_key_bindings.py
index f09a2ff2..23150e0d 100644
--- a/napari/layers/shapes/_shapes_key_bindings.py
+++ b/napari/layers/shapes/_shapes_key_bindings.py
@@ -1,13 +1,13 @@
 import numpy as np
 
-from ...layers.utils.layer_utils import (
+from napari.layers.shapes._shapes_constants import Box, Mode
+from napari.layers.shapes._shapes_mouse_bindings import _move
+from napari.layers.shapes.shapes import Shapes
+from napari.layers.utils.layer_utils import (
     register_layer_action,
     register_layer_attr_action,
 )
-from ...utils.translations import trans
-from ._shapes_constants import Box, Mode
-from ._shapes_mouse_bindings import _move
-from .shapes import Shapes
+from napari.utils.translations import trans
 
 
 @Shapes.bind_key('Space')
diff --git a/napari/layers/shapes/_shapes_models/__init__.py b/napari/layers/shapes/_shapes_models/__init__.py
index 4608daaa..1691b24f 100644
--- a/napari/layers/shapes/_shapes_models/__init__.py
+++ b/napari/layers/shapes/_shapes_models/__init__.py
@@ -1,6 +1,6 @@
-from .ellipse import Ellipse
-from .line import Line
-from .path import Path
-from .polygon import Polygon
-from .rectangle import Rectangle
-from .shape import Shape
+from napari.layers.shapes._shapes_models.ellipse import Ellipse
+from napari.layers.shapes._shapes_models.line import Line
+from napari.layers.shapes._shapes_models.path import Path
+from napari.layers.shapes._shapes_models.polygon import Polygon
+from napari.layers.shapes._shapes_models.rectangle import Rectangle
+from napari.layers.shapes._shapes_models.shape import Shape
diff --git a/napari/layers/shapes/_shapes_models/_polgyon_base.py b/napari/layers/shapes/_shapes_models/_polgyon_base.py
index 6e1b35d8..4fb3dd05 100644
--- a/napari/layers/shapes/_shapes_models/_polgyon_base.py
+++ b/napari/layers/shapes/_shapes_models/_polgyon_base.py
@@ -1,8 +1,8 @@
 import numpy as np
 
-from ....utils.translations import trans
-from .._shapes_utils import create_box
-from .shape import Shape
+from napari.layers.shapes._shapes_models.shape import Shape
+from napari.layers.shapes._shapes_utils import create_box
+from napari.utils.translations import trans
 
 
 class PolygonBase(Shape):
diff --git a/napari/layers/shapes/_shapes_models/ellipse.py b/napari/layers/shapes/_shapes_models/ellipse.py
index 064d1505..cc19865a 100644
--- a/napari/layers/shapes/_shapes_models/ellipse.py
+++ b/napari/layers/shapes/_shapes_models/ellipse.py
@@ -1,13 +1,13 @@
 import numpy as np
 
-from ....utils.translations import trans
-from .._shapes_utils import (
+from napari.layers.shapes._shapes_models.shape import Shape
+from napari.layers.shapes._shapes_utils import (
     center_radii_to_corners,
     rectangle_to_box,
     triangulate_edge,
     triangulate_ellipse,
 )
-from .shape import Shape
+from napari.utils.translations import trans
 
 
 class Ellipse(Shape):
diff --git a/napari/layers/shapes/_shapes_models/line.py b/napari/layers/shapes/_shapes_models/line.py
index 961d7af2..d572b3d6 100644
--- a/napari/layers/shapes/_shapes_models/line.py
+++ b/napari/layers/shapes/_shapes_models/line.py
@@ -1,8 +1,8 @@
 import numpy as np
 
-from ....utils.translations import trans
-from .._shapes_utils import create_box
-from .shape import Shape
+from napari.layers.shapes._shapes_models.shape import Shape
+from napari.layers.shapes._shapes_utils import create_box
+from napari.utils.translations import trans
 
 
 class Line(Shape):
diff --git a/napari/layers/shapes/_shapes_models/path.py b/napari/layers/shapes/_shapes_models/path.py
index 729c569e..bafe2c3c 100644
--- a/napari/layers/shapes/_shapes_models/path.py
+++ b/napari/layers/shapes/_shapes_models/path.py
@@ -1,4 +1,4 @@
-from ._polgyon_base import PolygonBase
+from napari.layers.shapes._shapes_models._polgyon_base import PolygonBase
 
 
 class Path(PolygonBase):
diff --git a/napari/layers/shapes/_shapes_models/polygon.py b/napari/layers/shapes/_shapes_models/polygon.py
index 3c5ab209..d3962d2b 100644
--- a/napari/layers/shapes/_shapes_models/polygon.py
+++ b/napari/layers/shapes/_shapes_models/polygon.py
@@ -1,4 +1,4 @@
-from ._polgyon_base import PolygonBase
+from napari.layers.shapes._shapes_models._polgyon_base import PolygonBase
 
 
 class Polygon(PolygonBase):
diff --git a/napari/layers/shapes/_shapes_models/rectangle.py b/napari/layers/shapes/_shapes_models/rectangle.py
index cb194b1d..31c9c993 100644
--- a/napari/layers/shapes/_shapes_models/rectangle.py
+++ b/napari/layers/shapes/_shapes_models/rectangle.py
@@ -1,8 +1,8 @@
 import numpy as np
 
-from ....utils.translations import trans
-from .._shapes_utils import find_corners, rectangle_to_box
-from .shape import Shape
+from napari.layers.shapes._shapes_models.shape import Shape
+from napari.layers.shapes._shapes_utils import find_corners, rectangle_to_box
+from napari.utils.translations import trans
 
 
 class Rectangle(Shape):
diff --git a/napari/layers/shapes/_shapes_models/shape.py b/napari/layers/shapes/_shapes_models/shape.py
index c330efaf..c51e88ba 100644
--- a/napari/layers/shapes/_shapes_models/shape.py
+++ b/napari/layers/shapes/_shapes_models/shape.py
@@ -2,15 +2,15 @@ from abc import ABC, abstractmethod
 
 import numpy as np
 
-from ....utils.misc import argsort
-from ....utils.translations import trans
-from .._shapes_utils import (
+from napari.layers.shapes._shapes_utils import (
     is_collinear,
     path_to_mask,
     poly_to_mask,
     triangulate_edge,
     triangulate_face,
 )
+from napari.utils.misc import argsort
+from napari.utils.translations import trans
 
 
 class Shape(ABC):
diff --git a/napari/layers/shapes/_shapes_mouse_bindings.py b/napari/layers/shapes/_shapes_mouse_bindings.py
index 52fe2955..c342b308 100644
--- a/napari/layers/shapes/_shapes_mouse_bindings.py
+++ b/napari/layers/shapes/_shapes_mouse_bindings.py
@@ -2,9 +2,15 @@ from copy import copy
 
 import numpy as np
 
-from ._shapes_constants import Box, Mode
-from ._shapes_models import Ellipse, Line, Path, Polygon, Rectangle
-from ._shapes_utils import point_to_lines
+from napari.layers.shapes._shapes_constants import Box, Mode
+from napari.layers.shapes._shapes_models import (
+    Ellipse,
+    Line,
+    Path,
+    Polygon,
+    Rectangle,
+)
+from napari.layers.shapes._shapes_utils import point_to_lines
 
 
 def highlight(layer, event):
diff --git a/napari/layers/shapes/_shapes_utils.py b/napari/layers/shapes/_shapes_utils.py
index 762e81b7..4b705f29 100644
--- a/napari/layers/shapes/_shapes_utils.py
+++ b/napari/layers/shapes/_shapes_utils.py
@@ -5,8 +5,8 @@ from skimage.draw import line, polygon2mask
 from vispy.geometry import PolygonData
 from vispy.visuals.tube import _frenet_frames
 
-from ...utils.translations import trans
-from ..utils.layer_utils import segment_normal
+from napari.layers.utils.layer_utils import segment_normal
+from napari.utils.translations import trans
 
 try:
     # see https://github.com/vispy/vispy/issues/1029
diff --git a/napari/layers/shapes/shapes.py b/napari/layers/shapes/shapes.py
index 7322adee..20c42b8e 100644
--- a/napari/layers/shapes/shapes.py
+++ b/napari/layers/shapes/shapes.py
@@ -8,30 +8,16 @@ import numpy as np
 import pandas as pd
 from vispy.color import get_color_names
 
-from ...utils.colormaps import Colormap, ValidColormapArg, ensure_colormap
-from ...utils.colormaps.colormap_utils import ColorType
-from ...utils.colormaps.standardize_color import (
-    hex_to_name,
-    rgb_to_hex,
-    transform_color,
+from napari.layers.base import Layer, no_op
+from napari.layers.shapes._shape_list import ShapeList
+from napari.layers.shapes._shapes_constants import (
+    Box,
+    ColorMode,
+    Mode,
+    ShapeType,
+    shape_classes,
 )
-from ...utils.events import Event
-from ...utils.events.custom_types import Array
-from ...utils.misc import ensure_iterable
-from ...utils.translations import trans
-from ..base import Layer, no_op
-from ..utils.color_manager_utils import guess_continuous, map_property
-from ..utils.color_transformations import (
-    normalize_and_broadcast_colors,
-    transform_color_cycle,
-    transform_color_with_defaults,
-)
-from ..utils.interactivity_utils import nd_line_segment_to_displayed_data_ray
-from ..utils.layer_utils import _FeatureTable, _unique_element
-from ..utils.text_manager import TextManager
-from ._shape_list import ShapeList
-from ._shapes_constants import Box, ColorMode, Mode, ShapeType, shape_classes
-from ._shapes_mouse_bindings import (
+from napari.layers.shapes._shapes_mouse_bindings import (
     add_ellipse,
     add_line,
     add_path_polygon,
@@ -43,7 +29,7 @@ from ._shapes_mouse_bindings import (
     vertex_insert,
     vertex_remove,
 )
-from ._shapes_utils import (
+from napari.layers.shapes._shapes_utils import (
     create_box,
     extract_shape_type,
     get_default_shape_type,
@@ -51,6 +37,31 @@ from ._shapes_utils import (
     number_of_shapes,
     validate_num_vertices,
 )
+from napari.layers.utils.color_manager_utils import (
+    guess_continuous,
+    map_property,
+)
+from napari.layers.utils.color_transformations import (
+    normalize_and_broadcast_colors,
+    transform_color_cycle,
+    transform_color_with_defaults,
+)
+from napari.layers.utils.interactivity_utils import (
+    nd_line_segment_to_displayed_data_ray,
+)
+from napari.layers.utils.layer_utils import _FeatureTable, _unique_element
+from napari.layers.utils.text_manager import TextManager
+from napari.utils.colormaps import Colormap, ValidColormapArg, ensure_colormap
+from napari.utils.colormaps.colormap_utils import ColorType
+from napari.utils.colormaps.standardize_color import (
+    hex_to_name,
+    rgb_to_hex,
+    transform_color,
+)
+from napari.utils.events import Event
+from napari.utils.events.custom_types import Array
+from napari.utils.misc import ensure_iterable
+from napari.utils.translations import trans
 
 DEFAULT_COLOR_CYCLE = np.array([[1, 0, 1, 1], [0, 1, 0, 1]])
 
diff --git a/napari/layers/surface/__init__.py b/napari/layers/surface/__init__.py
index 34deae79..3a1f9c49 100644
--- a/napari/layers/surface/__init__.py
+++ b/napari/layers/surface/__init__.py
@@ -1 +1 @@
-from .surface import Surface
+from napari.layers.surface.surface import Surface
diff --git a/napari/layers/surface/_surface_constants.py b/napari/layers/surface/_surface_constants.py
index 970dc4ed..a23c9247 100644
--- a/napari/layers/surface/_surface_constants.py
+++ b/napari/layers/surface/_surface_constants.py
@@ -1,7 +1,7 @@
 from enum import auto
 
-from ...utils.misc import StringEnum
-from ...utils.translations import trans
+from napari.utils.misc import StringEnum
+from napari.utils.translations import trans
 
 
 class Shading(StringEnum):
diff --git a/napari/layers/surface/normals.py b/napari/layers/surface/normals.py
index 688bcf80..b1217bfc 100644
--- a/napari/layers/surface/normals.py
+++ b/napari/layers/surface/normals.py
@@ -3,8 +3,7 @@ from enum import Enum, auto
 from pydantic import Field
 
 from napari.utils.color import ColorValue
-
-from ...utils.events import EventedModel
+from napari.utils.events import EventedModel
 
 
 class NormalMode(Enum):
diff --git a/napari/layers/surface/surface.py b/napari/layers/surface/surface.py
index 284ab7b6..a9dca015 100644
--- a/napari/layers/surface/surface.py
+++ b/napari/layers/surface/surface.py
@@ -3,18 +3,22 @@ from typing import List, Tuple, Union
 
 import numpy as np
 
-from ...utils.colormaps import AVAILABLE_COLORMAPS
-from ...utils.events import Event
-from ...utils.geometry import find_nearest_triangle_intersection
-from ...utils.translations import trans
-from ..base import Layer
-from ..intensity_mixin import IntensityVisualizationMixin
-from ..utils.interactivity_utils import nd_line_segment_to_displayed_data_ray
-from ..utils.layer_utils import calc_data_range
-from ._surface_constants import Shading
-from ._surface_utils import calculate_barycentric_coordinates
-from .normals import SurfaceNormals
-from .wireframe import SurfaceWireframe
+from napari.layers.base import Layer
+from napari.layers.intensity_mixin import IntensityVisualizationMixin
+from napari.layers.surface._surface_constants import Shading
+from napari.layers.surface._surface_utils import (
+    calculate_barycentric_coordinates,
+)
+from napari.layers.surface.normals import SurfaceNormals
+from napari.layers.surface.wireframe import SurfaceWireframe
+from napari.layers.utils.interactivity_utils import (
+    nd_line_segment_to_displayed_data_ray,
+)
+from napari.layers.utils.layer_utils import calc_data_range
+from napari.utils.colormaps import AVAILABLE_COLORMAPS
+from napari.utils.events import Event
+from napari.utils.geometry import find_nearest_triangle_intersection
+from napari.utils.translations import trans
 
 
 # Mixin must come before Layer
diff --git a/napari/layers/surface/wireframe.py b/napari/layers/surface/wireframe.py
index 244cfc11..c1ea989b 100644
--- a/napari/layers/surface/wireframe.py
+++ b/napari/layers/surface/wireframe.py
@@ -1,6 +1,5 @@
 from napari.utils.color import ColorValue
-
-from ...utils.events import EventedModel
+from napari.utils.events import EventedModel
 
 
 class SurfaceWireframe(EventedModel):
diff --git a/napari/layers/tracks/__init__.py b/napari/layers/tracks/__init__.py
index 1169bd13..944768f3 100644
--- a/napari/layers/tracks/__init__.py
+++ b/napari/layers/tracks/__init__.py
@@ -1 +1 @@
-from .tracks import Tracks
+from napari.layers.tracks.tracks import Tracks
diff --git a/napari/layers/tracks/_track_utils.py b/napari/layers/tracks/_track_utils.py
index 5cb41b8f..3c8ffb5d 100644
--- a/napari/layers/tracks/_track_utils.py
+++ b/napari/layers/tracks/_track_utils.py
@@ -5,9 +5,9 @@ import pandas as pd
 from scipy.sparse import coo_matrix
 from scipy.spatial import cKDTree
 
-from ...utils.events.custom_types import Array
-from ...utils.translations import trans
-from ..utils.layer_utils import _FeatureTable
+from napari.layers.utils.layer_utils import _FeatureTable
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 
 def connex(vertices: np.ndarray) -> list:
diff --git a/napari/layers/tracks/tracks.py b/napari/layers/tracks/tracks.py
index 15eb42a6..64cfb7e5 100644
--- a/napari/layers/tracks/tracks.py
+++ b/napari/layers/tracks/tracks.py
@@ -8,11 +8,11 @@ from warnings import warn
 import numpy as np
 import pandas as pd
 
-from ...utils.colormaps import AVAILABLE_COLORMAPS, Colormap
-from ...utils.events import Event
-from ...utils.translations import trans
-from ..base import Layer
-from ._track_utils import TrackManager
+from napari.layers.base import Layer
+from napari.layers.tracks._track_utils import TrackManager
+from napari.utils.colormaps import AVAILABLE_COLORMAPS, Colormap
+from napari.utils.events import Event
+from napari.utils.translations import trans
 
 
 class Tracks(Layer):
diff --git a/napari/layers/utils/_link_layers.py b/napari/layers/utils/_link_layers.py
index 50f3d82d..2aeba204 100644
--- a/napari/layers/utils/_link_layers.py
+++ b/napari/layers/utils/_link_layers.py
@@ -9,8 +9,8 @@ from weakref import ReferenceType, ref
 if TYPE_CHECKING:
     from napari.layers import Layer
 
-from ...utils.events.event import WarningEmitter
-from ...utils.translations import trans
+from napari.utils.events.event import WarningEmitter
+from napari.utils.translations import trans
 
 #: Record of already linked layers... to avoid duplicating callbacks
 #  in the form of {(id(layer1), id(layer2), attribute_name) -> callback}
@@ -84,7 +84,7 @@ def link_layers(
     >>> link_layers(viewer.layers)  # doctest: +SKIP
     """
 
-    from ...utils.misc import pick_equality_operator
+    from napari.utils.misc import pick_equality_operator
 
     valid_attrs = _get_common_evented_attributes(layers)
 
diff --git a/napari/layers/utils/_text_constants.py b/napari/layers/utils/_text_constants.py
index 89c38da1..589421eb 100644
--- a/napari/layers/utils/_text_constants.py
+++ b/napari/layers/utils/_text_constants.py
@@ -1,6 +1,6 @@
 from enum import auto
 
-from ...utils.misc import StringEnum
+from napari.utils.misc import StringEnum
 
 
 class Anchor(StringEnum):
diff --git a/napari/layers/utils/_text_utils.py b/napari/layers/utils/_text_utils.py
index 2604f371..4dc8bfe2 100644
--- a/napari/layers/utils/_text_utils.py
+++ b/napari/layers/utils/_text_utils.py
@@ -2,8 +2,8 @@ from typing import Tuple, Union
 
 import numpy as np
 
-from ...utils.translations import trans
-from ._text_constants import Anchor
+from napari.layers.utils._text_constants import Anchor
+from napari.utils.translations import trans
 
 
 def get_text_anchors(
diff --git a/napari/layers/utils/color_encoding.py b/napari/layers/utils/color_encoding.py
index db79b420..a8af87fa 100644
--- a/napari/layers/utils/color_encoding.py
+++ b/napari/layers/utils/color_encoding.py
@@ -11,19 +11,18 @@ from typing import (
 import numpy as np
 from pydantic import Field, parse_obj_as, validator
 
-from napari.utils.color import ColorArray, ColorValue
-
-from ...utils import Colormap
-from ...utils.colormaps import ValidColormapArg, ensure_colormap
-from ...utils.colormaps.categorical_colormap import CategoricalColormap
-from ...utils.translations import trans
-from .color_transformations import ColorType
-from .style_encoding import (
+from napari.layers.utils.color_transformations import ColorType
+from napari.layers.utils.style_encoding import (
     StyleEncoding,
     _ConstantStyleEncoding,
     _DerivedStyleEncoding,
     _ManualStyleEncoding,
 )
+from napari.utils import Colormap
+from napari.utils.color import ColorArray, ColorValue
+from napari.utils.colormaps import ValidColormapArg, ensure_colormap
+from napari.utils.colormaps.categorical_colormap import CategoricalColormap
+from napari.utils.translations import trans
 
 """The default color to use, which may also be used a safe fallback color."""
 DEFAULT_COLOR = ColorValue.validate('cyan')
diff --git a/napari/layers/utils/color_manager.py b/napari/layers/utils/color_manager.py
index 09c95220..bb3e7a0c 100644
--- a/napari/layers/utils/color_manager.py
+++ b/napari/layers/utils/color_manager.py
@@ -5,24 +5,24 @@ from typing import Any, Dict, Optional, Tuple, Union
 import numpy as np
 from pydantic import Field, root_validator, validator
 
-from ...utils.colormaps import Colormap
-from ...utils.colormaps.categorical_colormap import CategoricalColormap
-from ...utils.colormaps.colormap_utils import ColorType, ensure_colormap
-from ...utils.events import EventedModel
-from ...utils.events.custom_types import Array
-from ...utils.translations import trans
-from ._color_manager_constants import ColorMode
-from .color_manager_utils import (
+from napari.layers.utils._color_manager_constants import ColorMode
+from napari.layers.utils.color_manager_utils import (
     _validate_colormap_mode,
     _validate_cycle_mode,
     guess_continuous,
     is_color_mapped,
 )
-from .color_transformations import (
+from napari.layers.utils.color_transformations import (
     normalize_and_broadcast_colors,
     transform_color,
     transform_color_with_defaults,
 )
+from napari.utils.colormaps import Colormap
+from napari.utils.colormaps.categorical_colormap import CategoricalColormap
+from napari.utils.colormaps.colormap_utils import ColorType, ensure_colormap
+from napari.utils.events import EventedModel
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 
 @dataclass
diff --git a/napari/layers/utils/color_manager_utils.py b/napari/layers/utils/color_manager_utils.py
index 2f774ed8..4021e20f 100644
--- a/napari/layers/utils/color_manager_utils.py
+++ b/napari/layers/utils/color_manager_utils.py
@@ -2,8 +2,8 @@ from typing import Any, Dict, Tuple, Union
 
 import numpy as np
 
-from ...utils.colormaps import Colormap
-from ...utils.translations import trans
+from napari.utils.colormaps import Colormap
+from napari.utils.translations import trans
 
 
 def guess_continuous(property: np.ndarray) -> bool:
diff --git a/napari/layers/utils/color_transformations.py b/napari/layers/utils/color_transformations.py
index 5e3749cb..8676419a 100644
--- a/napari/layers/utils/color_transformations.py
+++ b/napari/layers/utils/color_transformations.py
@@ -9,9 +9,9 @@ from typing import Union
 
 import numpy as np
 
-from ...utils.colormaps.colormap_utils import ColorType
-from ...utils.colormaps.standardize_color import transform_color
-from ...utils.translations import trans
+from napari.utils.colormaps.colormap_utils import ColorType
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.translations import trans
 
 
 def transform_color_with_defaults(
diff --git a/napari/layers/utils/interactivity_utils.py b/napari/layers/utils/interactivity_utils.py
index c035e116..356965de 100644
--- a/napari/layers/utils/interactivity_utils.py
+++ b/napari/layers/utils/interactivity_utils.py
@@ -4,10 +4,13 @@ from typing import TYPE_CHECKING, List, Tuple, Union
 
 import numpy as np
 
-from ...utils.geometry import point_in_bounding_box, project_points_onto_plane
+from napari.utils.geometry import (
+    point_in_bounding_box,
+    project_points_onto_plane,
+)
 
 if TYPE_CHECKING:
-    from ..image.image import Image
+    from napari.layers.image.image import Image
 
 
 def displayed_plane_from_nd_line_segment(
@@ -110,8 +113,7 @@ def orient_plane_normal_around_cursor(layer: Image, plane_normal: tuple):
     """
     # avoid circular imports
     import napari
-
-    from ..image._image_constants import VolumeDepiction
+    from napari.layers.image._image_constants import VolumeDepiction
 
     viewer = napari.viewer.current_viewer()
 
diff --git a/napari/layers/utils/layer_utils.py b/napari/layers/utils/layer_utils.py
index 7a5ce9aa..46dc0772 100644
--- a/napari/layers/utils/layer_utils.py
+++ b/napari/layers/utils/layer_utils.py
@@ -9,10 +9,10 @@ import dask
 import numpy as np
 import pandas as pd
 
-from ...utils.action_manager import action_manager
-from ...utils.events.custom_types import Array
-from ...utils.transforms import Affine
-from ...utils.translations import trans
+from napari.utils.action_manager import action_manager
+from napari.utils.events.custom_types import Array
+from napari.utils.transforms import Affine
+from napari.utils.translations import trans
 
 
 def register_layer_action(
diff --git a/napari/layers/utils/plane.py b/napari/layers/utils/plane.py
index 0ed85ff2..d31dedab 100644
--- a/napari/layers/utils/plane.py
+++ b/napari/layers/utils/plane.py
@@ -3,9 +3,9 @@ from typing import Tuple
 import numpy as np
 from pydantic import validator
 
-from ...utils.events import EventedModel, SelectableEventedList
-from ...utils.geometry import intersect_line_with_plane_3d
-from ...utils.translations import trans
+from napari.utils.events import EventedModel, SelectableEventedList
+from napari.utils.geometry import intersect_line_with_plane_3d
+from napari.utils.translations import trans
 
 
 class Plane(EventedModel):
diff --git a/napari/layers/utils/stack_utils.py b/napari/layers/utils/stack_utils.py
index f05dd559..8729e04a 100644
--- a/napari/layers/utils/stack_utils.py
+++ b/napari/layers/utils/stack_utils.py
@@ -5,14 +5,14 @@ from typing import TYPE_CHECKING, List
 
 import numpy as np
 
-from ...layers import Image
-from ...layers.image._image_utils import guess_multiscale
-from ...utils.colormaps import CYMRGB, MAGENTA_GREEN, Colormap
-from ...utils.misc import ensure_iterable, ensure_sequence_of_iterables
-from ...utils.translations import trans
+from napari.layers import Image
+from napari.layers.image._image_utils import guess_multiscale
+from napari.utils.colormaps import CYMRGB, MAGENTA_GREEN, Colormap
+from napari.utils.misc import ensure_iterable, ensure_sequence_of_iterables
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from ...types import FullLayerData
+    from napari.types import FullLayerData
 
 
 def slice_from_axis(array, *, axis, element):
diff --git a/napari/layers/utils/string_encoding.py b/napari/layers/utils/string_encoding.py
index ed3909f7..bc4a9033 100644
--- a/napari/layers/utils/string_encoding.py
+++ b/napari/layers/utils/string_encoding.py
@@ -12,14 +12,14 @@ from typing import (
 import numpy as np
 from pydantic import parse_obj_as
 
-from ...utils.events.custom_types import Array
-from ...utils.translations import trans
-from .style_encoding import (
+from napari.layers.utils.style_encoding import (
     StyleEncoding,
     _ConstantStyleEncoding,
     _DerivedStyleEncoding,
     _ManualStyleEncoding,
 )
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 """A scalar array that represents one string value."""
 StringValue = Array[str, ()]
diff --git a/napari/layers/utils/style_encoding.py b/napari/layers/utils/style_encoding.py
index ce7b94b3..8249c767 100644
--- a/napari/layers/utils/style_encoding.py
+++ b/napari/layers/utils/style_encoding.py
@@ -12,8 +12,8 @@ from typing import (
 
 import numpy as np
 
-from ...utils.events import EventedModel
-from ...utils.translations import trans
+from napari.utils.events import EventedModel
+from napari.utils.translations import trans
 
 IndicesType = Union[range, List[int], np.ndarray]
 
diff --git a/napari/layers/utils/text_manager.py b/napari/layers/utils/text_manager.py
index 69ad0c01..b95e44b0 100644
--- a/napari/layers/utils/text_manager.py
+++ b/napari/layers/utils/text_manager.py
@@ -6,20 +6,24 @@ import numpy as np
 import pandas as pd
 from pydantic import PositiveInt, validator
 
-from ...utils.events import Event, EventedModel
-from ...utils.events.custom_types import Array
-from ...utils.translations import trans
-from ..base._base_constants import Blending
-from ._text_constants import Anchor
-from ._text_utils import get_text_anchors
-from .color_encoding import ColorArray, ColorEncoding, ConstantColorEncoding
-from .layer_utils import _validate_features
-from .string_encoding import (
+from napari.layers.base._base_constants import Blending
+from napari.layers.utils._text_constants import Anchor
+from napari.layers.utils._text_utils import get_text_anchors
+from napari.layers.utils.color_encoding import (
+    ColorArray,
+    ColorEncoding,
+    ConstantColorEncoding,
+)
+from napari.layers.utils.layer_utils import _validate_features
+from napari.layers.utils.string_encoding import (
     ConstantStringEncoding,
     StringArray,
     StringEncoding,
 )
-from .style_encoding import _get_style_values
+from napari.layers.utils.style_encoding import _get_style_values
+from napari.utils.events import Event, EventedModel
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 
 class TextManager(EventedModel):
diff --git a/napari/layers/vectors/__init__.py b/napari/layers/vectors/__init__.py
index a866744f..20661e1c 100644
--- a/napari/layers/vectors/__init__.py
+++ b/napari/layers/vectors/__init__.py
@@ -1 +1 @@
-from .vectors import Vectors
+from napari.layers.vectors.vectors import Vectors
diff --git a/napari/layers/vectors/_vector_utils.py b/napari/layers/vectors/_vector_utils.py
index 1f8fc444..3f654dfb 100644
--- a/napari/layers/vectors/_vector_utils.py
+++ b/napari/layers/vectors/_vector_utils.py
@@ -2,7 +2,7 @@ from typing import Optional, Tuple
 
 import numpy as np
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 def convert_image_to_coordinates(vectors):
diff --git a/napari/layers/vectors/vectors.py b/napari/layers/vectors/vectors.py
index 7a875ef9..098208c0 100644
--- a/napari/layers/vectors/vectors.py
+++ b/napari/layers/vectors/vectors.py
@@ -5,16 +5,16 @@ from typing import Dict, List, Tuple, Union
 import numpy as np
 import pandas as pd
 
-from ...utils.colormaps import Colormap, ValidColormapArg
-from ...utils.events import Event
-from ...utils.events.custom_types import Array
-from ...utils.translations import trans
-from ..base import Layer
-from ..utils._color_manager_constants import ColorMode
-from ..utils.color_manager import ColorManager
-from ..utils.color_transformations import ColorType
-from ..utils.layer_utils import _FeatureTable
-from ._vector_utils import fix_data_vectors
+from napari.layers.base import Layer
+from napari.layers.utils._color_manager_constants import ColorMode
+from napari.layers.utils.color_manager import ColorManager
+from napari.layers.utils.color_transformations import ColorType
+from napari.layers.utils.layer_utils import _FeatureTable
+from napari.layers.vectors._vector_utils import fix_data_vectors
+from napari.utils.colormaps import Colormap, ValidColormapArg
+from napari.utils.events import Event
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 
 class Vectors(Layer):
diff --git a/napari/plugins/__init__.py b/napari/plugins/__init__.py
index 4e754d41..86a9a026 100644
--- a/napari/plugins/__init__.py
+++ b/napari/plugins/__init__.py
@@ -4,9 +4,9 @@ from npe2 import PackageMetadata
 from npe2 import PluginManager as _PluginManager
 from npe2 import PluginManifest
 
-from ..settings import get_settings
-from . import _npe2
-from ._plugin_manager import NapariPluginManager
+from napari.plugins import _npe2
+from napari.plugins._plugin_manager import NapariPluginManager
+from napari.settings import get_settings
 
 __all__ = ("plugin_manager", "menu_item_template")
 
diff --git a/napari/plugins/_npe2.py b/napari/plugins/_npe2.py
index 14428f50..ff06406c 100644
--- a/napari/plugins/_npe2.py
+++ b/napari/plugins/_npe2.py
@@ -19,7 +19,7 @@ from npe2 import io_utils
 from npe2 import plugin_manager as pm
 from npe2.manifest import contributions
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from app_model import Action
@@ -29,8 +29,8 @@ if TYPE_CHECKING:
     from npe2.types import LayerData, SampleDataCreator, WidgetCreator
     from qtpy.QtWidgets import QMenu
 
-    from ..layers import Layer
-    from ..types import SampleDict
+    from napari.layers import Layer
+    from napari.types import SampleDict
 
 
 class _FakeHookimpl:
@@ -292,8 +292,8 @@ def on_plugin_enablement_change(enabled: Set[str], disabled: Set[str]):
     'Disabled' means the plugin remains installed, but it cannot be activated,
     and its contributions will not be indexed
     """
-    from .. import Viewer
-    from ..settings import get_settings
+    from napari import Viewer
+    from napari.settings import get_settings
 
     plugin_settings = get_settings().plugins
     to_disable = set(plugin_settings.disabled_plugins)
@@ -333,7 +333,7 @@ def _register_manifest_actions(manifest: PluginManifest) -> None:
     This is called when a plugin is registered or enabled and it adds the
     plugin's menus and submenus to the app model registry.
     """
-    from .._app_model import get_app
+    from napari._app_model import get_app
 
     app = get_app()
     actions, submenus = _npe2_manifest_to_actions(manifest)
@@ -350,7 +350,7 @@ def _npe2_manifest_to_actions(
     """Gather actions and submenus from a npe2 manifest, export app_model types."""
     from app_model.types import Action, MenuRule
 
-    from .._app_model.constants._menus import is_menu_contributable
+    from napari._app_model.constants._menus import is_menu_contributable
 
     cmds: DefaultDict[str, List[MenuRule]] = DefaultDict(list)
     submenus: List[Tuple[str, SubmenuItem]] = []
diff --git a/napari/plugins/_plugin_manager.py b/napari/plugins/_plugin_manager.py
index a050c4d9..9542b637 100644
--- a/napari/plugins/_plugin_manager.py
+++ b/napari/plugins/_plugin_manager.py
@@ -23,14 +23,14 @@ from napari_plugin_engine.hooks import HookCaller
 from pydantic import ValidationError
 from typing_extensions import TypedDict
 
-from ..settings import get_settings
-from ..types import AugmentedWidget, LayerData, SampleDict, WidgetCallable
-from ..utils._appdirs import user_site_packages
-from ..utils.events import EmitterGroup, EventedSet
-from ..utils.misc import camel_to_spaces, running_as_bundled_app
-from ..utils.theme import Theme, register_theme, unregister_theme
-from ..utils.translations import trans
-from . import hook_specifications
+from napari.plugins import hook_specifications
+from napari.settings import get_settings
+from napari.types import AugmentedWidget, LayerData, SampleDict, WidgetCallable
+from napari.utils._appdirs import user_site_packages
+from napari.utils.events import EmitterGroup, EventedSet
+from napari.utils.misc import camel_to_spaces, running_as_bundled_app
+from napari.utils.theme import Theme, register_theme, unregister_theme
+from napari.utils.translations import trans
 
 
 class PluginHookOption(TypedDict):
@@ -99,7 +99,7 @@ class NapariPluginManager(PluginManager):
 
     def _initialize(self):
         with self.discovery_blocked():
-            from ..settings import get_settings
+            from napari.settings import get_settings
 
             # dicts to store maps from extension -> plugin_name
             plugin_settings = get_settings().plugins
@@ -648,7 +648,7 @@ class NapariPluginManager(PluginManager):
         extensions : Union[str, Iterable[str]]
             Name(s) of extensions to always write with `reader`
         """
-        from ..settings import get_settings
+        from napari.settings import get_settings
 
         self._assign_plugin_to_extensions(reader, extensions, type_='reader')
         extension2readers = get_settings().plugins.extension2reader
@@ -673,7 +673,7 @@ class NapariPluginManager(PluginManager):
         extensions : Union[str, Iterable[str]]
             Name(s) of extensions to always write with `writer`
         """
-        from ..settings import get_settings
+        from napari.settings import get_settings
 
         self._assign_plugin_to_extensions(writer, extensions, type_='writer')
         get_settings().plugins.extension2writer = self._extension2writer
diff --git a/napari/plugins/exceptions.py b/napari/plugins/exceptions.py
index e9979de0..48f9bc5a 100644
--- a/napari/plugins/exceptions.py
+++ b/napari/plugins/exceptions.py
@@ -1,6 +1,6 @@
 from napari_plugin_engine import PluginError, standard_metadata
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 
 def format_exceptions(
@@ -27,8 +27,7 @@ def format_exceptions(
         return ''
 
     from napari import __version__
-
-    from ..utils._tracebacks import get_tb_formatter
+    from napari.utils._tracebacks import get_tb_formatter
 
     format_exc_info = get_tb_formatter()
 
diff --git a/napari/plugins/hook_specifications.py b/napari/plugins/hook_specifications.py
index ba9bb5e9..1004cb62 100644
--- a/napari/plugins/hook_specifications.py
+++ b/napari/plugins/hook_specifications.py
@@ -40,7 +40,7 @@ from typing import Any, Dict, List, Optional, Tuple, Union
 
 from napari_plugin_engine import napari_hook_specification
 
-from ..types import (
+from napari.types import (
     AugmentedWidget,
     ReaderFunction,
     SampleData,
diff --git a/napari/plugins/hub.py b/napari/plugins/hub.py
index 988e0397..3daea10a 100644
--- a/napari/plugins/hub.py
+++ b/napari/plugins/hub.py
@@ -10,7 +10,7 @@ from urllib import error, request
 
 from npe2 import PackageMetadata
 
-from .utils import normalized_name
+from napari.plugins.utils import normalized_name
 
 NAPARI_HUB_PLUGINS = 'https://api.napari-hub.org/plugins'
 ANACONDA_ORG = 'https://api.anaconda.org/package/{channel}/{package_name}'
diff --git a/napari/plugins/io.py b/napari/plugins/io.py
index 12f95917..9adcc82c 100644
--- a/napari/plugins/io.py
+++ b/napari/plugins/io.py
@@ -8,11 +8,11 @@ from typing import TYPE_CHECKING, Any, List, Optional, Sequence, Tuple
 
 from napari_plugin_engine import HookImplementation, PluginCallError
 
-from ..layers import Layer
-from ..types import LayerData
-from ..utils.misc import abspath_or_url
-from ..utils.translations import trans
-from . import _npe2, plugin_manager
+from napari.layers import Layer
+from napari.plugins import _npe2, plugin_manager
+from napari.types import LayerData
+from napari.utils.misc import abspath_or_url
+from napari.utils.translations import trans
 
 logger = getLogger(__name__)
 if TYPE_CHECKING:
diff --git a/napari/plugins/pypi.py b/napari/plugins/pypi.py
index 082fe44f..452a4ae7 100644
--- a/napari/plugins/pypi.py
+++ b/napari/plugins/pypi.py
@@ -10,7 +10,7 @@ from urllib.request import Request, urlopen
 
 from npe2 import PackageMetadata
 
-from .utils import normalized_name
+from napari.plugins.utils import normalized_name
 
 PyPIname = str
 
@@ -21,8 +21,7 @@ def _user_agent() -> str:
     import platform
 
     from napari import __version__
-
-    from ..utils import misc
+    from napari.utils import misc
 
     if misc.running_as_bundled_app():
         env = 'briefcase'
diff --git a/napari/plugins/utils.py b/napari/plugins/utils.py
index 64b1533a..b5ac5187 100644
--- a/napari/plugins/utils.py
+++ b/napari/plugins/utils.py
@@ -9,10 +9,9 @@ from typing import Dict, Iterable, List, Optional, Set, Tuple, Union
 
 from npe2 import PluginManifest
 
+from napari.plugins import _npe2, plugin_manager
 from napari.settings import get_settings
 
-from . import _npe2, plugin_manager
-
 
 class MatchFlag(IntFlag):
     NONE = 0
diff --git a/napari/qt/__init__.py b/napari/qt/__init__.py
index b6133145..3deeb36c 100644
--- a/napari/qt/__init__.py
+++ b/napari/qt/__init__.py
@@ -1,10 +1,10 @@
-from .._qt.qt_event_loop import get_app, run
-from .._qt.qt_main_window import Window
-from .._qt.qt_resources import get_current_stylesheet, get_stylesheet
-from .._qt.qt_viewer import QtViewer
-from .._qt.widgets.qt_tooltip import QtToolTipLabel
-from .._qt.widgets.qt_viewer_buttons import QtStateButton, QtViewerButtons
-from .threading import create_worker, thread_worker
+from napari._qt.qt_event_loop import get_app, run
+from napari._qt.qt_main_window import Window
+from napari._qt.qt_resources import get_current_stylesheet, get_stylesheet
+from napari._qt.qt_viewer import QtViewer
+from napari._qt.widgets.qt_tooltip import QtToolTipLabel
+from napari._qt.widgets.qt_viewer_buttons import QtStateButton, QtViewerButtons
+from napari.qt.threading import create_worker, thread_worker
 
 __all__ = (
     'create_worker',
diff --git a/napari/qt/progress.py b/napari/qt/progress.py
index b144854c..46a57732 100644
--- a/napari/qt/progress.py
+++ b/napari/qt/progress.py
@@ -1,6 +1,6 @@
 import warnings
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 warnings.warn(
     trans._(
@@ -11,6 +11,6 @@ warnings.warn(
     stacklevel=3,
 )
 
-from ..utils import progrange, progress  # noqa
+from napari.utils import progrange, progress  # noqa
 
 __all__ = ('progress', 'progrange')
diff --git a/napari/qt/threading.py b/napari/qt/threading.py
index a8b4179d..b327f82d 100644
--- a/napari/qt/threading.py
+++ b/napari/qt/threading.py
@@ -4,7 +4,7 @@ from superqt.utils._qthreading import (
     WorkerBaseSignals,
 )
 
-from .._qt.qthreading import (
+from napari._qt.qthreading import (
     FunctionWorker,
     GeneratorWorker,
     create_worker,
diff --git a/napari/resources/__init__.py b/napari/resources/__init__.py
index 2b97f872..684be763 100644
--- a/napari/resources/__init__.py
+++ b/napari/resources/__init__.py
@@ -1,7 +1,12 @@
 from typing import List, Optional
 
-from ..utils.translations import trans
-from ._icons import ICON_PATH, ICONS, get_colorized_svg, get_icon_path
+from napari.resources._icons import (
+    ICON_PATH,
+    ICONS,
+    get_colorized_svg,
+    get_icon_path,
+)
+from napari.utils.translations import trans
 
 __all__ = ['get_colorized_svg', 'get_icon_path', 'ICON_PATH', 'ICONS']
 
diff --git a/napari/resources/_icons.py b/napari/resources/_icons.py
index b1451239..a51dff1b 100644
--- a/napari/resources/_icons.py
+++ b/napari/resources/_icons.py
@@ -121,7 +121,7 @@ def generate_colorized_svgs(
         clrkey = color
         svg_stem = Path(path).stem
         if isinstance(color, tuple):
-            from ..utils.theme import get_theme
+            from napari.utils.theme import get_theme
 
             clrkey, theme_key = color
             theme_key = theme_override.get(svg_stem, theme_key)
diff --git a/napari/settings/__init__.py b/napari/settings/__init__.py
index 92058c30..b3f0f701 100644
--- a/napari/settings/__init__.py
+++ b/napari/settings/__init__.py
@@ -1,9 +1,12 @@
 from pathlib import Path
 from typing import Any, Optional, Union, cast
 
-from ..utils.translations import trans
-from ._base import _NOT_SET
-from ._napari_settings import CURRENT_SCHEMA_VERSION, NapariSettings
+from napari.settings._base import _NOT_SET
+from napari.settings._napari_settings import (
+    CURRENT_SCHEMA_VERSION,
+    NapariSettings,
+)
+from napari.utils.translations import trans
 
 __all__ = ['NapariSettings', 'get_settings', 'CURRENT_SCHEMA_VERSION']
 
diff --git a/napari/settings/_appearance.py b/napari/settings/_appearance.py
index a768037c..fec05d02 100644
--- a/napari/settings/_appearance.py
+++ b/napari/settings/_appearance.py
@@ -1,9 +1,9 @@
 from pydantic import Field
 
-from ..utils.events.evented_model import EventedModel
-from ..utils.theme import available_themes
-from ..utils.translations import trans
-from ._fields import Theme
+from napari.settings._fields import Theme
+from napari.utils.events.evented_model import EventedModel
+from napari.utils.theme import available_themes
+from napari.utils.translations import trans
 
 
 class AppearanceSettings(EventedModel):
diff --git a/napari/settings/_application.py b/napari/settings/_application.py
index a37b0f81..aebe17ba 100644
--- a/napari/settings/_application.py
+++ b/napari/settings/_application.py
@@ -4,13 +4,13 @@ from typing import List, Optional, Tuple
 
 from pydantic import Field, validator
 
-from ..utils._base import _DEFAULT_LOCALE
-from ..utils.events.custom_types import conint
-from ..utils.events.evented_model import EventedModel
-from ..utils.notifications import NotificationSeverity
-from ..utils.translations import trans
-from ._constants import LoopMode
-from ._fields import Language
+from napari.settings._constants import LoopMode
+from napari.settings._fields import Language
+from napari.utils._base import _DEFAULT_LOCALE
+from napari.utils.events.custom_types import conint
+from napari.utils.events.evented_model import EventedModel
+from napari.utils.notifications import NotificationSeverity
+from napari.utils.translations import trans
 
 GridStride = conint(ge=-50, le=50, ne=0)
 GridWidth = conint(ge=-1, ne=0)
diff --git a/napari/settings/_base.py b/napari/settings/_base.py
index cb1a6176..9cda7c5f 100644
--- a/napari/settings/_base.py
+++ b/napari/settings/_base.py
@@ -12,10 +12,10 @@ from pydantic import BaseModel, BaseSettings, ValidationError
 from pydantic.env_settings import SettingsError
 from pydantic.error_wrappers import display_errors
 
-from ..utils.events import EmitterGroup, EventedModel
-from ..utils.misc import deep_update
-from ..utils.translations import trans
-from ._yaml import PydanticYamlMixin
+from napari.settings._yaml import PydanticYamlMixin
+from napari.utils.events import EmitterGroup, EventedModel
+from napari.utils.misc import deep_update
+from napari.utils.translations import trans
 
 _logger = logging.getLogger(__name__)
 
@@ -24,7 +24,7 @@ if TYPE_CHECKING:
 
     from pydantic.env_settings import EnvSettingsSource, SettingsSourceCallable
 
-    from ..utils.events import Event
+    from napari.utils.events import Event
 
     IntStr = Union[int, str]
     AbstractSetIntStr = AbstractSet[IntStr]
diff --git a/napari/settings/_constants.py b/napari/settings/_constants.py
index 184c2263..28c4dd19 100644
--- a/napari/settings/_constants.py
+++ b/napari/settings/_constants.py
@@ -1,6 +1,6 @@
 from enum import auto
 
-from ..utils.misc import StringEnum
+from napari.utils.misc import StringEnum
 
 
 class LoopMode(StringEnum):
diff --git a/napari/settings/_experimental.py b/napari/settings/_experimental.py
index 582b7e3d..dfd2c631 100644
--- a/napari/settings/_experimental.py
+++ b/napari/settings/_experimental.py
@@ -2,8 +2,8 @@ from typing import Union
 
 from pydantic import Field
 
-from ..utils.translations import trans
-from ._base import EventedSettings
+from napari.settings._base import EventedSettings
+from napari.utils.translations import trans
 
 
 # this class inherits from EventedSettings instead of EventedModel because
diff --git a/napari/settings/_fields.py b/napari/settings/_fields.py
index b638bf2b..b5fcab1a 100644
--- a/napari/settings/_fields.py
+++ b/napari/settings/_fields.py
@@ -3,8 +3,8 @@ from dataclasses import dataclass
 from functools import total_ordering
 from typing import Any, Dict, Optional, SupportsInt, Tuple, Union
 
-from ..utils.theme import available_themes
-from ..utils.translations import _load_language, get_language_packs, trans
+from napari.utils.theme import available_themes
+from napari.utils.translations import _load_language, get_language_packs, trans
 
 
 class Theme(str):
diff --git a/napari/settings/_migrations.py b/napari/settings/_migrations.py
index 4b600447..d4233372 100644
--- a/napari/settings/_migrations.py
+++ b/napari/settings/_migrations.py
@@ -5,10 +5,10 @@ from contextlib import contextmanager
 from importlib.metadata import distributions
 from typing import TYPE_CHECKING, Callable, List, NamedTuple
 
-from ._fields import Version
+from napari.settings._fields import Version
 
 if TYPE_CHECKING:
-    from ._napari_settings import NapariSettings
+    from napari.settings._napari_settings import NapariSettings
 
 _MIGRATORS: List[Migrator] = []
 MigratorF = Callable[['NapariSettings'], None]
diff --git a/napari/settings/_napari_settings.py b/napari/settings/_napari_settings.py
index c54bb70c..1775201c 100644
--- a/napari/settings/_napari_settings.py
+++ b/napari/settings/_napari_settings.py
@@ -4,15 +4,19 @@ from typing import Any, Optional
 
 from pydantic import Field
 
-from ..utils._base import _DEFAULT_CONFIG_PATH
-from ..utils.translations import trans
-from ._appearance import AppearanceSettings
-from ._application import ApplicationSettings
-from ._base import _NOT_SET, EventedConfigFileSettings, _remove_empty_dicts
-from ._experimental import ExperimentalSettings
-from ._fields import Version
-from ._plugins import PluginsSettings
-from ._shortcuts import ShortcutsSettings
+from napari.settings._appearance import AppearanceSettings
+from napari.settings._application import ApplicationSettings
+from napari.settings._base import (
+    _NOT_SET,
+    EventedConfigFileSettings,
+    _remove_empty_dicts,
+)
+from napari.settings._experimental import ExperimentalSettings
+from napari.settings._fields import Version
+from napari.settings._plugins import PluginsSettings
+from napari.settings._shortcuts import ShortcutsSettings
+from napari.utils._base import _DEFAULT_CONFIG_PATH
+from napari.utils.translations import trans
 
 _CFG_PATH = os.getenv('NAPARI_CONFIG', _DEFAULT_CONFIG_PATH)
 
@@ -101,7 +105,7 @@ class NapariSettings(EventedConfigFileSettings):
 
     def _maybe_migrate(self):
         if self.schema_version < CURRENT_SCHEMA_VERSION:
-            from ._migrations import do_migrations
+            from napari.settings._migrations import do_migrations
 
             do_migrations(self)
 
diff --git a/napari/settings/_plugins.py b/napari/settings/_plugins.py
index 4942e52e..1ff18e64 100644
--- a/napari/settings/_plugins.py
+++ b/napari/settings/_plugins.py
@@ -4,9 +4,12 @@ from typing import Dict, List, Set
 from pydantic import Field
 from typing_extensions import TypedDict
 
-from ..utils.misc import running_as_bundled_app, running_as_constructor_app
-from ..utils.translations import trans
-from ._base import EventedSettings
+from napari.settings._base import EventedSettings
+from napari.utils.misc import (
+    running_as_bundled_app,
+    running_as_constructor_app,
+)
+from napari.utils.translations import trans
 
 
 class PluginHookOption(TypedDict):
diff --git a/napari/settings/_shortcuts.py b/napari/settings/_shortcuts.py
index 7685a203..8ee7304b 100644
--- a/napari/settings/_shortcuts.py
+++ b/napari/settings/_shortcuts.py
@@ -2,9 +2,9 @@ from typing import Dict, List
 
 from pydantic import Field, validator
 
-from ..utils.events.evented_model import EventedModel
-from ..utils.shortcuts import default_shortcuts
-from ..utils.translations import trans
+from napari.utils.events.evented_model import EventedModel
+from napari.utils.shortcuts import default_shortcuts
+from napari.utils.translations import trans
 
 
 class ShortcutsSettings(EventedModel):
diff --git a/napari/settings/_yaml.py b/napari/settings/_yaml.py
index 14da3981..f82d018c 100644
--- a/napari/settings/_yaml.py
+++ b/napari/settings/_yaml.py
@@ -6,7 +6,7 @@ from typing import TYPE_CHECKING, Type
 from pydantic import BaseModel
 from yaml import SafeDumper, dump_all
 
-from ._fields import Version
+from napari.settings._fields import Version
 
 if TYPE_CHECKING:
     from collections.abc import Mapping
diff --git a/napari/types.py b/napari/types.py
index 0a237a8a..c227b8f1 100644
--- a/napari/types.py
+++ b/napari/types.py
@@ -161,7 +161,7 @@ def _register_types_with_magicgui():
 
     from magicgui import register_type
 
-    from .utils import _magicgui as _mgui
+    from napari.utils import _magicgui as _mgui
 
     for _type in (LayerDataTuple, List[LayerDataTuple]):
         register_type(
diff --git a/napari/utils/__init__.py b/napari/utils/__init__.py
index e8e4b041..56c1fcc9 100644
--- a/napari/utils/__init__.py
+++ b/napari/utils/__init__.py
@@ -1,5 +1,5 @@
-from ._dask_utils import resize_dask_cache
-from .colormaps import Colormap
-from .info import citation_text, sys_info
-from .notebook_display import nbscreenshot
-from .progress import progrange, progress
+from napari.utils._dask_utils import resize_dask_cache
+from napari.utils.colormaps import Colormap
+from napari.utils.info import citation_text, sys_info
+from napari.utils.notebook_display import nbscreenshot
+from napari.utils.progress import progrange, progress
diff --git a/napari/utils/_magicgui.py b/napari/utils/_magicgui.py
index f7a0507d..c899968b 100644
--- a/napari/utils/_magicgui.py
+++ b/napari/utils/_magicgui.py
@@ -17,7 +17,7 @@ from typing import TYPE_CHECKING, Any, List, Optional, Tuple, Type
 
 from typing_extensions import get_args
 
-from ..utils._proxies import PublicOnlyProxy
+from napari.utils._proxies import PublicOnlyProxy
 
 if TYPE_CHECKING:
     from concurrent.futures import Future
@@ -25,9 +25,9 @@ if TYPE_CHECKING:
     from magicgui.widgets import FunctionGui
     from magicgui.widgets._bases import CategoricalWidget
 
-    from .._qt.qthreading import FunctionWorker
-    from ..layers import Layer
-    from ..viewer import Viewer
+    from napari._qt.qthreading import FunctionWorker
+    from napari.layers import Layer
+    from napari.viewer import Viewer
 
 
 def add_layer_data_to_viewer(gui: FunctionGui, result: Any, return_type: Type):
@@ -58,7 +58,9 @@ def add_layer_data_to_viewer(gui: FunctionGui, result: Any, return_type: Type):
     ...     return np.random.rand(256, 256)
 
     """
-    from .._app_model.injection._processors import _add_layer_data_to_viewer
+    from napari._app_model.injection._processors import (
+        _add_layer_data_to_viewer,
+    )
 
     if result is not None and (viewer := find_viewer_ancestor(gui)):
         _add_layer_data_to_viewer(
@@ -102,7 +104,7 @@ def add_layer_data_tuples_to_viewer(gui, result, return_type):
     ...     return [(np.ones((10,10)), {'name': 'hi'})]
 
     """
-    from .._app_model.injection._processors import (
+    from napari._app_model.injection._processors import (
         _add_layer_data_tuples_to_viewer,
     )
 
@@ -188,7 +190,7 @@ def add_future_data(gui, future: Future, return_type, _from_tuple=True):
         (only for internal use). True if the future returns `LayerDataTuple`,
         False if it returns one of the `LayerData` types.
     """
-    from .._app_model.injection._processors import _add_future_data
+    from napari._app_model.injection._processors import _add_future_data
 
     if viewer := find_viewer_ancestor(gui):
         _add_future_data(
@@ -217,7 +219,7 @@ def find_viewer_ancestor(widget) -> Optional[Viewer]:
     viewer : napari.Viewer or None
         Viewer ancestor if it exists, else `napari.current_viewer()`
     """
-    from .._qt.widgets.qt_viewer_dock_widget import QtViewerDockWidget
+    from napari._qt.widgets.qt_viewer_dock_widget import QtViewerDockWidget
 
     # magicgui v0.2.0 widgets are no longer QWidget subclasses, but the native
     # widget is available at widget.native
@@ -302,7 +304,7 @@ def get_layers_data(gui: CategoricalWidget) -> List[Tuple[str, Any]]:
     ...     return data.mean()
 
     """
-    from .. import layers
+    from napari import layers
 
     if not (viewer := find_viewer_ancestor(gui.native)):
         return ()
@@ -385,7 +387,7 @@ def add_layers_to_viewer(gui, result: Any, return_type: List[Layer]) -> None:
     ...     return napari.layers.Image(np.random.rand(64, 64))
 
     """
-    from .._app_model.injection._processors import _add_layer_to_viewer
+    from napari._app_model.injection._processors import _add_layer_to_viewer
 
     viewer = find_viewer_ancestor(gui)
     if not viewer:
diff --git a/napari/utils/_octree.py b/napari/utils/_octree.py
index 0ed872c0..da37105d 100644
--- a/napari/utils/_octree.py
+++ b/napari/utils/_octree.py
@@ -8,8 +8,8 @@ import logging
 from pathlib import Path
 from typing import Optional
 
-from ..settings import get_settings
-from ..utils.translations import trans
+from napari.settings import get_settings
+from napari.utils.translations import trans
 
 LOGGER = logging.getLogger("napari.loader")
 DEFAULT_OCTREE_CONFIG = {
diff --git a/napari/utils/_proxies.py b/napari/utils/_proxies.py
index 8aa3834f..e7ac4ca5 100644
--- a/napari/utils/_proxies.py
+++ b/napari/utils/_proxies.py
@@ -5,8 +5,8 @@ from typing import Any, Callable, Generic, TypeVar, Union
 
 import wrapt
 
-from ..utils import misc
-from ..utils.translations import trans
+from napari.utils import misc
+from napari.utils.translations import trans
 
 _T = TypeVar("_T")
 
diff --git a/napari/utils/_register.py b/napari/utils/_register.py
index d3160cd5..52a2ec88 100644
--- a/napari/utils/_register.py
+++ b/napari/utils/_register.py
@@ -1,8 +1,8 @@
 import sys
 from inspect import Parameter, getdoc, signature
 
-from .misc import camel_to_snake
-from .translations import trans
+from napari.utils.misc import camel_to_snake
+from napari.utils.translations import trans
 
 template = """def {name}{signature}:
     kwargs = locals()
@@ -66,7 +66,7 @@ def create_func(cls, name=None, doc=None, filename: str = '<string>'):
 
 
 def _register(cls, *, name=None, doc=None):
-    from ..components import ViewerModel
+    from napari.components import ViewerModel
 
     func = create_func(cls, name=name, doc=doc)
     setattr(ViewerModel, func.__name__, func)
diff --git a/napari/utils/_tests/test_action_manager.py b/napari/utils/_tests/test_action_manager.py
index cbb39694..b86a5e40 100644
--- a/napari/utils/_tests/test_action_manager.py
+++ b/napari/utils/_tests/test_action_manager.py
@@ -3,7 +3,7 @@ This module test some of the behavior of action manager.
 """
 import pytest
 
-from ..action_manager import ActionManager
+from napari.utils.action_manager import ActionManager
 
 
 @pytest.fixture
diff --git a/napari/utils/_tests/test_interactions.py b/napari/utils/_tests/test_interactions.py
index dbc46d15..0178e384 100644
--- a/napari/utils/_tests/test_interactions.py
+++ b/napari/utils/_tests/test_interactions.py
@@ -1,6 +1,6 @@
 import pytest
 
-from ..interactions import Shortcut
+from napari.utils.interactions import Shortcut
 
 
 @pytest.mark.parametrize(
diff --git a/napari/utils/_tests/test_key_bindings.py b/napari/utils/_tests/test_key_bindings.py
index c4de584e..f3700e37 100644
--- a/napari/utils/_tests/test_key_bindings.py
+++ b/napari/utils/_tests/test_key_bindings.py
@@ -5,8 +5,8 @@ from unittest.mock import patch
 
 import pytest
 
-from .. import key_bindings
-from ..key_bindings import (
+from napari.utils import key_bindings
+from napari.utils.key_bindings import (
     KeymapHandler,
     KeymapProvider,
     _bind_keymap,
diff --git a/napari/utils/_tests/test_validators.py b/napari/utils/_tests/test_validators.py
index 362db131..8dc46050 100644
--- a/napari/utils/_tests/test_validators.py
+++ b/napari/utils/_tests/test_validators.py
@@ -1,6 +1,6 @@
 import pytest
 
-from .. import validators
+from napari.utils import validators
 
 
 def test_sequence_validator():
diff --git a/napari/utils/_tracebacks.py b/napari/utils/_tracebacks.py
index b7319284..815b9634 100644
--- a/napari/utils/_tracebacks.py
+++ b/napari/utils/_tracebacks.py
@@ -3,7 +3,7 @@ from typing import Callable, Dict, Generator
 
 import numpy as np
 
-from ..types import ExcInfo
+from napari.types import ExcInfo
 
 
 def get_tb_formatter() -> Callable[[ExcInfo, bool, str], str]:
diff --git a/napari/utils/action_manager.py b/napari/utils/action_manager.py
index 7b025ce0..1c44c193 100644
--- a/napari/utils/action_manager.py
+++ b/napari/utils/action_manager.py
@@ -7,15 +7,15 @@ from functools import cached_property
 from inspect import isgeneratorfunction
 from typing import TYPE_CHECKING, Any, Callable, Dict, List, Optional
 
-from ..utils.events import EmitterGroup
-from .interactions import Shortcut
-from .translations import trans
+from napari.utils.events import EmitterGroup
+from napari.utils.interactions import Shortcut
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from concurrent.futures import Future
     from typing import Protocol
 
-    from .key_bindings import KeymapProvider
+    from napari.utils.key_bindings import KeymapProvider
 
     class SignalInstance(Protocol):
         def connect(self, callback: Callable) -> None:
@@ -48,7 +48,7 @@ class Action:
         layer into the commands.  See :func:`inject_napari_dependencies` for
         details.
         """
-        from .._app_model import get_app
+        from napari._app_model import get_app
 
         return get_app().injection_store.inject(self.command)
 
diff --git a/napari/utils/colormaps/__init__.py b/napari/utils/colormaps/__init__.py
index d88c94c1..a9ac2b10 100644
--- a/napari/utils/colormaps/__init__.py
+++ b/napari/utils/colormaps/__init__.py
@@ -1,6 +1,6 @@
-from .colorbars import make_colorbar
-from .colormap import Colormap
-from .colormap_utils import (
+from napari.utils.colormaps.colorbars import make_colorbar
+from napari.utils.colormaps.colormap import Colormap
+from napari.utils.colormaps.colormap_utils import (
     ALL_COLORMAPS,
     AVAILABLE_COLORMAPS,
     CYMRGB,
diff --git a/napari/utils/colormaps/_tests/test_categorical_colormap_utils.py b/napari/utils/colormaps/_tests/test_categorical_colormap_utils.py
index 9e8a7d28..0d166be2 100644
--- a/napari/utils/colormaps/_tests/test_categorical_colormap_utils.py
+++ b/napari/utils/colormaps/_tests/test_categorical_colormap_utils.py
@@ -2,7 +2,10 @@ from itertools import cycle
 
 import numpy as np
 
-from ..categorical_colormap_utils import ColorCycle, compare_colormap_dicts
+from napari.utils.colormaps.categorical_colormap_utils import (
+    ColorCycle,
+    compare_colormap_dicts,
+)
 
 
 def test_color_cycle():
diff --git a/napari/utils/colormaps/bop_colors.py b/napari/utils/colormaps/bop_colors.py
index 954dac8e..101e477e 100644
--- a/napari/utils/colormaps/bop_colors.py
+++ b/napari/utils/colormaps/bop_colors.py
@@ -3,7 +3,7 @@ from https://github.com/cleterrier/ChrisLUTs. To make it compatible with napari'
 colormap classes, all the values in the colormap are normalized (divide by 255).
 """
 
-from ..translations import trans
+from napari.utils.translations import trans
 
 bop_blue = [
     [0.0, 0.0, 0.0],
diff --git a/napari/utils/colormaps/categorical_colormap.py b/napari/utils/colormaps/categorical_colormap.py
index cc92283f..2a9746f3 100644
--- a/napari/utils/colormaps/categorical_colormap.py
+++ b/napari/utils/colormaps/categorical_colormap.py
@@ -3,11 +3,13 @@ from typing import Any, Dict, Union
 import numpy as np
 
 from napari.utils.color import ColorValue
-
-from ...utils.events import EventedModel
-from ..translations import trans
-from .categorical_colormap_utils import ColorCycle, compare_colormap_dicts
-from .standardize_color import transform_color
+from napari.utils.colormaps.categorical_colormap_utils import (
+    ColorCycle,
+    compare_colormap_dicts,
+)
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.events import EventedModel
+from napari.utils.translations import trans
 
 
 class CategoricalColormap(EventedModel):
diff --git a/napari/utils/colormaps/categorical_colormap_utils.py b/napari/utils/colormaps/categorical_colormap_utils.py
index f9c4e624..4d2cef52 100644
--- a/napari/utils/colormaps/categorical_colormap_utils.py
+++ b/napari/utils/colormaps/categorical_colormap_utils.py
@@ -4,11 +4,11 @@ from typing import Dict, Union
 
 import numpy as np
 
-from ...layers.utils.color_transformations import (
+from napari.layers.utils.color_transformations import (
     transform_color,
     transform_color_cycle,
 )
-from ..translations import trans
+from napari.utils.translations import trans
 
 
 @dataclass(eq=False)
diff --git a/napari/utils/colormaps/colormap.py b/napari/utils/colormaps/colormap.py
index 1fec9c65..9c2a4243 100644
--- a/napari/utils/colormaps/colormap.py
+++ b/napari/utils/colormaps/colormap.py
@@ -5,11 +5,10 @@ import numpy as np
 from pydantic import PrivateAttr, validator
 
 from napari.utils.color import ColorArray
-
-from ..events import EventedModel
-from ..events.custom_types import Array
-from ..translations import trans
-from .colorbars import make_colorbar
+from napari.utils.colormaps.colorbars import make_colorbar
+from napari.utils.events import EventedModel
+from napari.utils.events.custom_types import Array
+from napari.utils.translations import trans
 
 
 class ColormapInterpolationMode(str, Enum):
diff --git a/napari/utils/colormaps/colormap_utils.py b/napari/utils/colormaps/colormap_utils.py
index f170c613..80d98915 100644
--- a/napari/utils/colormaps/colormap_utils.py
+++ b/napari/utils/colormaps/colormap_utils.py
@@ -9,12 +9,12 @@ from vispy.color import BaseColormap as VispyColormap
 from vispy.color import Color, ColorArray, get_colormap, get_colormaps
 from vispy.color.colormap import LUT_len
 
-from ..translations import trans
-from .bop_colors import bopd
-from .colormap import Colormap, ColormapInterpolationMode
-from .inverse_colormaps import inverse_cmaps
-from .standardize_color import transform_color
-from .vendored import cm
+from napari.utils.colormaps.bop_colors import bopd
+from napari.utils.colormaps.colormap import Colormap, ColormapInterpolationMode
+from napari.utils.colormaps.inverse_colormaps import inverse_cmaps
+from napari.utils.colormaps.standardize_color import transform_color
+from napari.utils.colormaps.vendored import cm
+from napari.utils.translations import trans
 
 # All parsable input color types that a user can provide
 ColorType = Union[List, Tuple, np.ndarray, str, Color, ColorArray]
diff --git a/napari/utils/colormaps/inverse_colormaps.py b/napari/utils/colormaps/inverse_colormaps.py
index 12fce8bb..bd7a9faa 100644
--- a/napari/utils/colormaps/inverse_colormaps.py
+++ b/napari/utils/colormaps/inverse_colormaps.py
@@ -3,7 +3,7 @@ from https://github.com/cleterrier/ChrisLUTs. To make it compatible with napari'
 colormap classes, all the values in the colormap are normalized (divide by 255).
 """
 
-from ..translations import trans
+from napari.utils.translations import trans
 
 I_Bordeaux = [[1, 1, 1], [204 / 255, 0, 51 / 255]]
 I_Blue = [[1, 1, 1], [0, 51 / 255, 204 / 255]]
diff --git a/napari/utils/colormaps/standardize_color.py b/napari/utils/colormaps/standardize_color.py
index b56964f3..b0feb407 100644
--- a/napari/utils/colormaps/standardize_color.py
+++ b/napari/utils/colormaps/standardize_color.py
@@ -27,7 +27,7 @@ import numpy as np
 from vispy.color import ColorArray, get_color_dict, get_color_names
 from vispy.color.color_array import _string_to_rgb
 
-from ..translations import trans
+from napari.utils.translations import trans
 
 
 def transform_color(colors: Any) -> np.ndarray:
diff --git a/napari/utils/colormaps/vendored/_cm_listed.py b/napari/utils/colormaps/vendored/_cm_listed.py
index 1ecae8e2..63d3fe03 100644
--- a/napari/utils/colormaps/vendored/_cm_listed.py
+++ b/napari/utils/colormaps/vendored/_cm_listed.py
@@ -1,4 +1,4 @@
-from .colors import ListedColormap
+from napari.utils.colormaps.vendored.colors import ListedColormap
 
 _magma_data = [
     [0.001462, 0.000466, 0.013866],
diff --git a/napari/utils/colormaps/vendored/cm.py b/napari/utils/colormaps/vendored/cm.py
index 36dbe412..16e05b33 100644
--- a/napari/utils/colormaps/vendored/cm.py
+++ b/napari/utils/colormaps/vendored/cm.py
@@ -23,9 +23,9 @@ import functools
 import numpy as np
 from numpy import ma
 
-from . import colors
-from ._cm import datad
-from ._cm_listed import cmaps as cmaps_listed
+from napari.utils.colormaps.vendored import colors
+from napari.utils.colormaps.vendored._cm import datad
+from napari.utils.colormaps.vendored._cm_listed import cmaps as cmaps_listed
 
 
 cmap_d = {}
diff --git a/napari/utils/colormaps/vendored/colors.py b/napari/utils/colormaps/vendored/colors.py
index 3e887a19..6d969366 100644
--- a/napari/utils/colormaps/vendored/colors.py
+++ b/napari/utils/colormaps/vendored/colors.py
@@ -65,7 +65,7 @@ import itertools
 import re
 
 import numpy as np
-from ._color_data import (BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS,
+from napari.utils.colormaps.vendored._color_data import (BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS,
                           XKCD_COLORS, NTH_COLORS)
 
 
diff --git a/napari/utils/config.py b/napari/utils/config.py
index c338b346..0b1fe961 100644
--- a/napari/utils/config.py
+++ b/napari/utils/config.py
@@ -2,7 +2,7 @@
 """
 import os
 
-from ._octree import get_octree_config
+from napari.utils._octree import get_octree_config
 
 
 def _set(env_var: str) -> bool:
diff --git a/napari/utils/events/__init__.py b/napari/utils/events/__init__.py
index bf032d3c..647f600f 100644
--- a/napari/utils/events/__init__.py
+++ b/napari/utils/events/__init__.py
@@ -1,19 +1,21 @@
-from .event import (  # isort:skip
+from napari.utils.events.event import (  # isort:skip
     EmitterGroup,
     Event,
     EventEmitter,
     set_event_tracing_enabled,
 )
-from .containers._evented_dict import EventedDict
-from .containers._evented_list import EventedList
-from .containers._nested_list import NestableEventedList
-from .containers._selectable_list import SelectableEventedList
-from .containers._selection import Selection
-from .containers._set import EventedSet
-from .containers._typed import TypedMutableSequence
-from .event_utils import disconnect_events
-from .evented_model import EventedModel
-from .types import SupportsEvents
+from napari.utils.events.containers._evented_dict import EventedDict
+from napari.utils.events.containers._evented_list import EventedList
+from napari.utils.events.containers._nested_list import NestableEventedList
+from napari.utils.events.containers._selectable_list import (
+    SelectableEventedList,
+)
+from napari.utils.events.containers._selection import Selection
+from napari.utils.events.containers._set import EventedSet
+from napari.utils.events.containers._typed import TypedMutableSequence
+from napari.utils.events.event_utils import disconnect_events
+from napari.utils.events.evented_model import EventedModel
+from napari.utils.events.types import SupportsEvents
 
 __all__ = [
     'disconnect_events',
diff --git a/napari/utils/events/containers/__init__.py b/napari/utils/events/containers/__init__.py
index a51736be..5b378313 100644
--- a/napari/utils/events/containers/__init__.py
+++ b/napari/utils/events/containers/__init__.py
@@ -1,14 +1,14 @@
-from ._dict import TypedMutableMapping
-from ._evented_dict import EventedDict
-from ._evented_list import EventedList
-from ._nested_list import NestableEventedList
-from ._selectable_list import (
+from napari.utils.events.containers._dict import TypedMutableMapping
+from napari.utils.events.containers._evented_dict import EventedDict
+from napari.utils.events.containers._evented_list import EventedList
+from napari.utils.events.containers._nested_list import NestableEventedList
+from napari.utils.events.containers._selectable_list import (
     SelectableEventedList,
     SelectableNestableEventedList,
 )
-from ._selection import Selectable, Selection
-from ._set import EventedSet
-from ._typed import TypedMutableSequence
+from napari.utils.events.containers._selection import Selectable, Selection
+from napari.utils.events.containers._set import EventedSet
+from napari.utils.events.containers._typed import TypedMutableSequence
 
 __all__ = [
     'EventedList',
diff --git a/napari/utils/events/containers/_evented_dict.py b/napari/utils/events/containers/_evented_dict.py
index 02a93c01..0946287f 100644
--- a/napari/utils/events/containers/_evented_dict.py
+++ b/napari/utils/events/containers/_evented_dict.py
@@ -1,9 +1,9 @@
 """MutableMapping that emits events when altered."""
 from typing import Mapping, Sequence, Type, Union
 
-from ..event import EmitterGroup, Event
-from ..types import SupportsEvents
-from ._dict import _K, _T, TypedMutableMapping
+from napari.utils.events.containers._dict import _K, _T, TypedMutableMapping
+from napari.utils.events.event import EmitterGroup, Event
+from napari.utils.events.types import SupportsEvents
 
 
 class EventedDict(TypedMutableMapping[_K, _T]):
diff --git a/napari/utils/events/containers/_evented_list.py b/napari/utils/events/containers/_evented_list.py
index 6e0e956c..a318a8cf 100644
--- a/napari/utils/events/containers/_evented_list.py
+++ b/napari/utils/events/containers/_evented_list.py
@@ -26,10 +26,15 @@ import contextlib
 import logging
 from typing import Callable, Dict, Iterable, List, Sequence, Tuple, Type, Union
 
-from ...translations import trans
-from ..event import EmitterGroup, Event
-from ..types import SupportsEvents
-from ._typed import _L, _T, Index, TypedMutableSequence
+from napari.utils.events.containers._typed import (
+    _L,
+    _T,
+    Index,
+    TypedMutableSequence,
+)
+from napari.utils.events.event import EmitterGroup, Event
+from napari.utils.events.types import SupportsEvents
+from napari.utils.translations import trans
 
 logger = logging.getLogger(__name__)
 
diff --git a/napari/utils/events/containers/_nested_list.py b/napari/utils/events/containers/_nested_list.py
index ca770a49..86b820b7 100644
--- a/napari/utils/events/containers/_nested_list.py
+++ b/napari/utils/events/containers/_nested_list.py
@@ -19,9 +19,9 @@ from typing import (
     overload,
 )
 
-from ...translations import trans
-from ..event import Event
-from ._evented_list import EventedList, Index
+from napari.utils.events.containers._evented_list import EventedList, Index
+from napari.utils.events.event import Event
+from napari.utils.translations import trans
 
 logger = logging.getLogger(__name__)
 
diff --git a/napari/utils/events/containers/_selectable_list.py b/napari/utils/events/containers/_selectable_list.py
index 6d3f27e9..a3b9596e 100644
--- a/napari/utils/events/containers/_selectable_list.py
+++ b/napari/utils/events/containers/_selectable_list.py
@@ -1,10 +1,10 @@
 import warnings
 from typing import TypeVar
 
-from ...translations import trans
-from ._evented_list import EventedList
-from ._nested_list import NestableEventedList
-from ._selection import Selectable
+from napari.utils.events.containers._evented_list import EventedList
+from napari.utils.events.containers._nested_list import NestableEventedList
+from napari.utils.events.containers._selection import Selectable
+from napari.utils.translations import trans
 
 _T = TypeVar("_T")
 
diff --git a/napari/utils/events/containers/_selection.py b/napari/utils/events/containers/_selection.py
index 9392bd42..219301ec 100644
--- a/napari/utils/events/containers/_selection.py
+++ b/napari/utils/events/containers/_selection.py
@@ -1,8 +1,8 @@
 from typing import TYPE_CHECKING, Generic, Iterable, Optional, TypeVar
 
-from ...translations import trans
-from ..event import EmitterGroup
-from ._set import EventedSet
+from napari.utils.events.containers._set import EventedSet
+from napari.utils.events.event import EmitterGroup
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     from pydantic.fields import ModelField
diff --git a/napari/utils/events/containers/_set.py b/napari/utils/events/containers/_set.py
index 7a1bf6ae..2a2845a7 100644
--- a/napari/utils/events/containers/_set.py
+++ b/napari/utils/events/containers/_set.py
@@ -2,8 +2,8 @@ from __future__ import annotations
 
 from typing import TYPE_CHECKING, Any, Iterable, Iterator, MutableSet, TypeVar
 
-from ....utils.events import EmitterGroup
-from ....utils.translations import trans
+from napari.utils.events import EmitterGroup
+from napari.utils.translations import trans
 
 _T = TypeVar("_T")
 
diff --git a/napari/utils/events/containers/_typed.py b/napari/utils/events/containers/_typed.py
index 9da4f794..2c28d674 100644
--- a/napari/utils/events/containers/_typed.py
+++ b/napari/utils/events/containers/_typed.py
@@ -13,7 +13,7 @@ from typing import (
     overload,
 )
 
-from ....utils.translations import trans
+from napari.utils.translations import trans
 
 logger = logging.getLogger(__name__)
 
diff --git a/napari/utils/events/debugging.py b/napari/utils/events/debugging.py
index 3d15f459..95feaef0 100644
--- a/napari/utils/events/debugging.py
+++ b/napari/utils/events/debugging.py
@@ -6,8 +6,8 @@ from typing import TYPE_CHECKING, ClassVar, Set
 
 from pydantic import BaseSettings, Field, PrivateAttr
 
-from ...utils.misc import ROOT_DIR
-from ...utils.translations import trans
+from napari.utils.misc import ROOT_DIR
+from napari.utils.translations import trans
 
 try:
     from rich import print
@@ -23,7 +23,7 @@ except ModuleNotFoundError:
     dotenv = None  # type: ignore
 
 if TYPE_CHECKING:
-    from .event import Event
+    from napari.utils.events.event import Event
 
 
 class EventDebugSettings(BaseSettings):
diff --git a/napari/utils/events/event.py b/napari/utils/events/event.py
index 712c4315..e809d801 100644
--- a/napari/utils/events/event.py
+++ b/napari/utils/events/event.py
@@ -70,7 +70,7 @@ from typing import (
 
 from vispy.util.logs import _handle_exception
 
-from ..translations import trans
+from napari.utils.translations import trans
 
 
 class Event:
@@ -1235,7 +1235,7 @@ _log_event_stack = _noop
 def set_event_tracing_enabled(enabled=True, cfg=None):
     global _log_event_stack
     if enabled:
-        from .debugging import log_event_stack
+        from napari.utils.events.debugging import log_event_stack
 
         if cfg is not None:
             _log_event_stack = partial(log_event_stack, cfg=cfg)
diff --git a/napari/utils/events/evented_model.py b/napari/utils/events/evented_model.py
index 25b87726..ecf7b6b6 100644
--- a/napari/utils/events/evented_model.py
+++ b/napari/utils/events/evented_model.py
@@ -7,9 +7,9 @@ from typing import Any, Callable, ClassVar, Dict, Set, Union
 import numpy as np
 from pydantic import BaseModel, PrivateAttr, main, utils
 
-from ...utils.misc import pick_equality_operator
-from ..translations import trans
-from .event import EmitterGroup, Event
+from napari.utils.events.event import EmitterGroup, Event
+from napari.utils.misc import pick_equality_operator
+from napari.utils.translations import trans
 
 # encoders for non-napari specific field types.  To declare a custom encoder
 # for a napari type, add a `_json_encode` method to the class itself.
diff --git a/napari/utils/events/types.py b/napari/utils/events/types.py
index 3da68552..ad1a5b7b 100644
--- a/napari/utils/events/types.py
+++ b/napari/utils/events/types.py
@@ -1,6 +1,6 @@
 from typing import Protocol, runtime_checkable
 
-from .event import EmitterGroup
+from napari.utils.events.event import EmitterGroup
 
 
 @runtime_checkable
diff --git a/napari/utils/history.py b/napari/utils/history.py
index 9d1235bb..af4f8def 100644
--- a/napari/utils/history.py
+++ b/napari/utils/history.py
@@ -1,7 +1,7 @@
 import os
 from pathlib import Path
 
-from ..settings import get_settings
+from napari.settings import get_settings
 
 
 def update_open_history(filename):
diff --git a/napari/utils/interactions.py b/napari/utils/interactions.py
index 40f2a0d6..47cfc969 100644
--- a/napari/utils/interactions.py
+++ b/napari/utils/interactions.py
@@ -1,11 +1,11 @@
 import inspect
 import re
 import sys
 import warnings
 
 from numpydoc.docscrape import FunctionDoc
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 
 def mouse_wheel_callbacks(obj, event):
diff --git a/napari/utils/io.py b/napari/utils/io.py
index e56404d8..59cab056 100644
--- a/napari/utils/io.py
+++ b/napari/utils/io.py
@@ -3,7 +3,7 @@ import warnings
 
 import numpy as np
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 
 def imsave(filename: str, data: np.ndarray):
diff --git a/napari/utils/key_bindings.py b/napari/utils/key_bindings.py
index efca07f4..84190499 100644
--- a/napari/utils/key_bindings.py
+++ b/napari/utils/key_bindings.py
@@ -41,11 +41,11 @@ import types
 from collections import ChainMap
 from typing import Callable, Dict

 from vispy.util import keys
 
-from ..settings import get_settings
-from ..utils.action_manager import action_manager
-from ..utils.translations import trans
+from napari.settings import get_settings
+from napari.utils.action_manager import action_manager
+from napari.utils.translations import trans
 
 SPECIAL_KEYS = [
     keys.SHIFT,
diff --git a/napari/utils/misc.py b/napari/utils/misc.py
index 658885a9..46911181 100644
--- a/napari/utils/misc.py
+++ b/napari/utils/misc.py
@@ -32,7 +32,7 @@ from typing import (
 
 import numpy as np
 
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
     import packaging.version
diff --git a/napari/utils/naming.py b/napari/utils/naming.py
index 2eb350c0..1acacc4c 100644
--- a/napari/utils/naming.py
+++ b/napari/utils/naming.py
@@ -4,7 +4,7 @@ import inspect
 import re
 from collections import ChainMap
 
-from .misc import ROOT_DIR, formatdoc
+from napari.utils.misc import ROOT_DIR, formatdoc
 
 sep = ' '
 start = 1
diff --git a/napari/utils/notebook_display.py b/napari/utils/notebook_display.py
index 5eded6c1..9992472d 100644
--- a/napari/utils/notebook_display.py
+++ b/napari/utils/notebook_display.py
@@ -98,7 +98,7 @@ class NotebookScreenshot:
         """
         from imageio import imsave
 
-        from .._qt.qt_event_loop import get_app
+        from napari._qt.qt_event_loop import get_app
 
         get_app().processEvents()
         self.image = self.viewer.screenshot(
diff --git a/napari/utils/notifications.py b/napari/utils/notifications.py
index 34c2b1b1..b9fac5a9 100644
--- a/napari/utils/notifications.py
+++ b/napari/utils/notifications.py
@@ -9,8 +9,8 @@ from enum import auto
 from types import TracebackType
 from typing import Callable, List, Optional, Sequence, Tuple, Type, Union
 
-from .events import Event, EventEmitter
-from .misc import StringEnum
+from napari.utils.events import Event, EventEmitter
+from napari.utils.misc import StringEnum
 
 try:
     from napari_error_reporter import capture_exception, install_error_reporter
@@ -151,7 +151,7 @@ class ErrorNotification(Notification):
         self.exception = exception
 
     def as_html(self):
-        from ._tracebacks import get_tb_formatter
+        from napari.utils._tracebacks import get_tb_formatter
 
         fmt = get_tb_formatter()
         exc_info = (
@@ -162,7 +162,7 @@ class ErrorNotification(Notification):
         return fmt(exc_info, as_html=True)
 
     def as_text(self):
-        from ._tracebacks import get_tb_formatter
+        from napari.utils._tracebacks import get_tb_formatter
 
         fmt = get_tb_formatter()
         exc_info = (
@@ -173,7 +173,7 @@ class ErrorNotification(Notification):
         return fmt(exc_info, as_html=False, color="NoColor")
 
     def __str__(self):
-        from ._tracebacks import get_tb_formatter
+        from napari.utils._tracebacks import get_tb_formatter
 
         fmt = get_tb_formatter()
         exc_info = (
@@ -368,7 +368,7 @@ def show_console_notification(notification: Notification):
     Show a notification in the console.
     """
     try:
-        from ..settings import get_settings
+        from napari.settings import get_settings
 
         if (
             notification.severity
diff --git a/napari/utils/perf/__init__.py b/napari/utils/perf/__init__.py
index 0118cbee..453abfe3 100644
--- a/napari/utils/perf/__init__.py
+++ b/napari/utils/perf/__init__.py
@@ -50,9 +50,9 @@ not to leave them in the code. Think of them as similar to debug prints.
 """
 import os
 
-from ._config import perf_config
-from ._event import PerfEvent
-from ._timers import (
+from napari.utils.perf._config import perf_config
+from napari.utils.perf._event import PerfEvent
+from napari.utils.perf._timers import (
     add_counter_event,
     add_instant_event,
     block_timer,
diff --git a/napari/utils/perf/_config.py b/napari/utils/perf/_config.py
index 76d959a8..73094d7f 100644
--- a/napari/utils/perf/_config.py
+++ b/napari/utils/perf/_config.py
@@ -7,9 +7,9 @@ from typing import List, Optional
 
 import wrapt
 
-from ..translations import trans
-from ._patcher import patch_callables
-from ._timers import perf_timer
+from napari.utils.perf._patcher import patch_callables
+from napari.utils.perf._timers import perf_timer
+from napari.utils.translations import trans
 
 PERFMON_ENV_VAR = "NAPARI_PERFMON"
 
diff --git a/napari/utils/perf/_patcher.py b/napari/utils/perf/_patcher.py
index aef01f89..3f2282c3 100644
--- a/napari/utils/perf/_patcher.py
+++ b/napari/utils/perf/_patcher.py
@@ -8,7 +8,7 @@ import types
 from importlib import import_module
 from typing import Callable, List, Set, Tuple, Union
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 # The parent of a callable is a module or a class, class is of type "type".
 CallableParent = Union[types.ModuleType, type]
diff --git a/napari/utils/perf/_timers.py b/napari/utils/perf/_timers.py
index 5a7a617f..675eec63 100644
--- a/napari/utils/perf/_timers.py
+++ b/napari/utils/perf/_timers.py
@@ -5,9 +5,9 @@ import os
 from time import perf_counter_ns
 from typing import Dict, Optional
 
-from ._event import PerfEvent
-from ._stat import Stat
-from ._trace_file import PerfTraceFile
+from napari.utils.perf._event import PerfEvent
+from napari.utils.perf._stat import Stat
+from napari.utils.perf._trace_file import PerfTraceFile
 
 USE_PERFMON = os.getenv("NAPARI_PERFMON", "0") != "0"
 
diff --git a/napari/utils/perf/_trace_file.py b/napari/utils/perf/_trace_file.py
index fe75c680..4af68a13 100644
--- a/napari/utils/perf/_trace_file.py
+++ b/napari/utils/perf/_trace_file.py
@@ -4,7 +4,7 @@ import json
 from time import perf_counter_ns
 from typing import List
 
-from ._event import PerfEvent
+from napari.utils.perf._event import PerfEvent
 
 
 class PerfTraceFile:
diff --git a/napari/utils/progress.py b/napari/utils/progress.py
index 2f4dfaa2..8e97a93e 100644
--- a/napari/utils/progress.py
+++ b/napari/utils/progress.py
@@ -2,10 +2,9 @@ from typing import Iterable, Optional
 
 from tqdm import tqdm
 
+from napari.utils.events.containers import EventedSet
 from napari.utils.events.event import EmitterGroup, Event
-
-from ..utils.events.containers import EventedSet
-from ..utils.translations import trans
+from napari.utils.translations import trans
 
 
 class progress(tqdm):
diff --git a/napari/utils/settings/__init__.py b/napari/utils/settings/__init__.py
index ae6fce25..918aa452 100644
--- a/napari/utils/settings/__init__.py
+++ b/napari/utils/settings/__init__.py
@@ -1,7 +1,7 @@
 import warnings
 
-from ...settings import *
-from ..translations import trans
+from napari.settings import *
+from napari.utils.translations import trans
 
 warnings.warn(
     trans._(
diff --git a/napari/utils/theme.py b/napari/utils/theme.py
index 99e90202..047ddf6e 100644
--- a/napari/utils/theme.py
+++ b/napari/utils/theme.py
@@ -8,11 +8,11 @@ from typing import Union
 from pydantic import validator
 from pydantic.color import Color
 
-from .._vendor import darkdetect
-from ..resources._icons import build_theme_svgs
-from ..utils.translations import trans
-from .events import EventedModel
-from .events.containers._evented_dict import EventedDict
+from napari._vendor import darkdetect
+from napari.resources._icons import build_theme_svgs
+from napari.utils.events import EventedModel
+from napari.utils.events.containers._evented_dict import EventedDict
+from napari.utils.translations import trans
 
 try:
     from qtpy import QT_VERSION
@@ -280,7 +280,7 @@ def rebuild_theme_settings():
     here we simply update the settings to reflect current list of available
     themes.
     """
-    from ..settings import get_settings
+    from napari.settings import get_settings
 
     settings = get_settings()
     settings.appearance.refresh_themes()
diff --git a/napari/utils/transforms/__init__.py b/napari/utils/transforms/__init__.py
index dc99be88..1ba64005 100644
--- a/napari/utils/transforms/__init__.py
+++ b/napari/utils/transforms/__init__.py
@@ -1,5 +1,5 @@
-from .transform_utils import shear_matrix_from_angle
-from .transforms import (
+from napari.utils.transforms.transform_utils import shear_matrix_from_angle
+from napari.utils.transforms.transforms import (
     Affine,
     CompositeAffine,
     ScaleTranslate,
diff --git a/napari/utils/transforms/transform_utils.py b/napari/utils/transforms/transform_utils.py
index 9bb0b989..093d7111 100644
--- a/napari/utils/transforms/transform_utils.py
+++ b/napari/utils/transforms/transform_utils.py
@@ -1,7 +1,7 @@
 import numpy as np
 import scipy.linalg
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 
 def compose_linear_matrix(rotate, scale, shear) -> np.array:
diff --git a/napari/utils/transforms/transforms.py b/napari/utils/transforms/transforms.py
index aecb7f15..759585b5 100644
--- a/napari/utils/transforms/transforms.py
+++ b/napari/utils/transforms/transforms.py
@@ -4,9 +4,8 @@ from typing import Sequence
 import numpy as np
 import toolz as tz
 
-from ...utils.translations import trans
-from ..events import EventedList
-from .transform_utils import (
+from napari.utils.events import EventedList
+from napari.utils.transforms.transform_utils import (
     compose_linear_matrix,
     decompose_linear_matrix,
     embed_in_identity_matrix,
@@ -19,6 +18,7 @@ from .transform_utils import (
     shear_to_matrix,
     translate_to_vector,
 )
+from napari.utils.translations import trans
 
 
 class Transform:
diff --git a/napari/utils/translations.py b/napari/utils/translations.py
index d4be300f..f868b2da 100644
--- a/napari/utils/translations.py
+++ b/napari/utils/translations.py
@@ -10,7 +10,7 @@ from typing import Optional, Union
 
 from yaml import safe_load
 
-from ._base import _DEFAULT_CONFIG_PATH, _DEFAULT_LOCALE
+from napari.utils._base import _DEFAULT_CONFIG_PATH, _DEFAULT_LOCALE
 
 # Entry points
 NAPARI_LANGUAGEPACK_ENTRY = "napari.languagepack"
diff --git a/napari/utils/tree/__init__.py b/napari/utils/tree/__init__.py
index 24be064b..aedb3457 100644
--- a/napari/utils/tree/__init__.py
+++ b/napari/utils/tree/__init__.py
@@ -1,4 +1,4 @@
-from .group import Group
-from .node import Node
+from napari.utils.tree.group import Group
+from napari.utils.tree.node import Node
 
 __all__ = ["Node", "Group"]
diff --git a/napari/utils/tree/group.py b/napari/utils/tree/group.py
index 8766e0d3..b3d21de2 100644
--- a/napari/utils/tree/group.py
+++ b/napari/utils/tree/group.py
@@ -2,9 +2,11 @@ from __future__ import annotations
 
 from typing import Generator, Iterable, List, TypeVar, Union
 
-from ..events.containers._nested_list import MaybeNestedIndex
-from ..events.containers._selectable_list import SelectableNestableEventedList
-from .node import Node
+from napari.utils.events.containers._nested_list import MaybeNestedIndex
+from napari.utils.events.containers._selectable_list import (
+    SelectableNestableEventedList,
+)
+from napari.utils.tree.node import Node
 
 NodeType = TypeVar("NodeType", bound=Node)
 
diff --git a/napari/utils/tree/node.py b/napari/utils/tree/node.py
index 97870a8a..c00a87c3 100644
--- a/napari/utils/tree/node.py
+++ b/napari/utils/tree/node.py
@@ -1,9 +1,9 @@
 from typing import TYPE_CHECKING, Generator, List, Optional, Tuple
 
-from ...utils.translations import trans
+from napari.utils.translations import trans
 
 if TYPE_CHECKING:
-    from .group import Group
+    from napari.utils.tree.group import Group
 
 
 class Node:
diff --git a/napari/utils/validators.py b/napari/utils/validators.py
index 1d8e79ad..97201dd7 100644
--- a/napari/utils/validators.py
+++ b/napari/utils/validators.py
@@ -2,7 +2,7 @@ from collections.abc import Collection, Generator
 from itertools import tee
 from typing import Iterable
 
-from .translations import trans
+from napari.utils.translations import trans
 
 
 def validate_n_seq(n: int, dtype=None):
diff --git a/napari/view_layers.py b/napari/view_layers.py
index 586a3d81..6e03dbed 100644
--- a/napari/view_layers.py
+++ b/napari/view_layers.py
@@ -19,8 +19,7 @@ from numpydoc.docscrape import NumpyDocString as _NumpyDocString
 
 from napari.components.dims import Dims
 from napari.layers import Image
-
-from .viewer import Viewer
+from napari.viewer import Viewer
 
 __all__ = [
     'view_image',
@@ -81,7 +80,7 @@ def _merge_layer_viewer_sigs_docs(func):
     func : callable
         The same function, with merged metadata.
     """
-    from .utils.misc import _combine_signatures
+    from napari.utils.misc import _combine_signatures
 
     # get the `Viewer.add_*` method
     layer_string = func.__name__.replace("view_", "")
diff --git a/napari/viewer.py b/napari/viewer.py
index a5db543c..8329ada5 100644
--- a/napari/viewer.py
+++ b/napari/viewer.py
@@ -5,12 +5,12 @@ from weakref import WeakSet
 
 import magicgui as mgui
 
-from .components.viewer_model import ViewerModel
-from .utils import _magicgui, config
+from napari.components.viewer_model import ViewerModel
+from napari.utils import _magicgui, config
 
 if TYPE_CHECKING:
     # helpful for IDE support
-    from ._qt.qt_main_window import Window
+    from napari._qt.qt_main_window import Window
 
 
 @mgui.register_type(bind=_magicgui.proxy_viewer_ancestor)
@@ -56,11 +56,11 @@ class Viewer(ViewerModel):
         )
         # we delay initialization of plugin system to the first instantiation
         # of a viewer... rather than just on import of plugins module
-        from .plugins import _initialize_plugins
+        from napari.plugins import _initialize_plugins
 
         # having this import here makes all of Qt imported lazily, upon
         # instantiating the first Viewer.
-        from .window import Window
+        from napari.window import Window
 
         _initialize_plugins()
 
@@ -146,7 +146,7 @@ class Viewer(ViewerModel):
         self.window.close()
 
         if config.async_loading:
-            from .components.experimental.chunk import chunk_loader
+            from napari.components.experimental.chunk import chunk_loader
 
             # TODO_ASYNC: Find a cleaner way to do this? This fixes some
             # tests. We are telling the ChunkLoader that this layer is
diff --git a/napari/window.py b/napari/window.py
index 9ea58ee5..926ffd53 100644
--- a/napari/window.py
+++ b/napari/window.py
@@ -8,10 +8,10 @@ to server as a graphical user interface for napari.
 
 __all__ = ['Window']
 
-from .utils.translations import trans
+from napari.utils.translations import trans
 
 try:
-    from ._qt import Window
+    from napari._qt import Window
 
 except ImportError as e:
 
diff --git a/napari_builtins/io/__init__.py b/napari_builtins/io/__init__.py
index 65bb3165..b29b3655 100644
--- a/napari_builtins/io/__init__.py
+++ b/napari_builtins/io/__init__.py
@@ -1,4 +1,4 @@
-from ._read import (
+from napari_builtins.io._read import (
     csv_to_layer_data,
     imread,
     magic_imread,
@@ -6,7 +6,7 @@ from ._read import (
     read_csv,
     read_zarr_dataset,
 )
-from ._write import (
+from napari_builtins.io._write import (
     imsave_extensions,
     napari_write_image,
     napari_write_labels,
-- 
2.34.1
