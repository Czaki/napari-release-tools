From 550ad7a56e21b04274b62bffd7e70326c9cd6566 Mon Sep 17 00:00:00 2001
From: jaimergp <jaimergp@users.noreply.github.com>
Date: Wed, 17 May 2023 22:05:47 +0200
Subject: [PATCH] Add some more docs about packaging details and conda-forge
 releases (#48)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

# Description
The packaging docs needed some subtle changes in wording and content.

* I removed some unnecessarily condescending words like "simply" or
"just"
* Added more links
* Sections to distinguish conda-forge from PyPI
* Added some conda-forge details to the release guide

## Type of change
- [X] This change requires a documentation update

# References
Closes https://github.com/napari/packaging/issues/2

## Final checklist:
- [X] I have made corresponding changes to the documentation

Side question: is the issue template accurate for this repository? It
feels we could have a more relatable one :D

---------

Co-authored-by: Peter Sobolewski <76622105+psobolewskiPhD@users.noreply.github.com>
Co-authored-by: Melissa Weber Mendon√ßa <melissawm@gmail.com>
Co-authored-by: Grzegorz Bokota <bokota+github@gmail.com>
---
 docs/developers/packaging.md | 192 ++++++++++++++++++-----------------
 docs/developers/release.md   |  61 ++++++++++-
 2 files changed, 160 insertions(+), 93 deletions(-)

diff --git a/docs/developers/packaging.md b/docs/developers/packaging.md
index 30008bc0..fd0b9f39 100644
--- a/docs/developers/packaging.md
+++ b/docs/developers/packaging.md
@@ -4,55 +4,65 @@

 Once a release is cut, napari is distributed in two main ways:

-* Packages: both to PyPI and conda-forge.
+* Packages: both to [PyPI][20] and [conda-forge][21].
 * Installers: bundles that include napari plus its runtime dependencies in a step-by-step
   executable.

 ## Packages

-Despite its numerous dependencies, `napari` itself is a simple Python project that can be packaged
-in a straight-forward way.
+Despite its numerous dependencies, `napari` itself is a regular Python project that can be packaged using established workflows.

-Creating and submitting the packages to PyPI (the repository you query when you do `pip install`)
-is handled in the [`.github/workflows/make_release.yml`][2] workflow. Creation is
-handled with `make dist` (as specified in our [`Makefile`][3]) and submission is done using the
-[official PyPA GitHub Action][4]. This workflow will also create a GitHub Release.
+### PyPI packages

-Once the Python package makes it to PyPI, it will be picked by the `conda-forge` bots, which will
-automatically submit a PR to the [`napari-feedstock`][1] repository within a few hours. This is all
-automated by the `conda-forge` infrastructure (see [previous examples][16]), so we only need to
-check that the metadata in the recipe has been adjusted for the new release. Pay special attention
-to the runtime dependencies and version strings!
+Creating and submitting the packages to PyPI (the repository you query when you do `pip install`) is handled in the [`make_release.yml`][2] workflow.
+Creation is handled with `make dist` (as specified in our [`Makefile`][3]) and submission is done using the [official PyPA GitHub Action][4].
+This workflow will also create a GitHub release. See {doc}`release` for more details.

-> We keep a copy of the feedstock's recipe in the `napari/packaging` repo, which is updated manually
-> whenever a change to `setup.cfg` is detected. Check the file `conda-recipe/meta.yaml` and make
-> sure its `outputs` are synced to the `napari-feedstock` copy.
+### conda-forge packages

-Once the conda-forge CI is passing and the PR is approved and merged, the final packages will be
-built on the default branch and uploaded to the `conda-forge` channel. Due to the staging steps and
-CDN synchronization delays, the conda packages can take up to 1h to be available after the
-merge.
+Once the Python package makes it to PyPI, it will be picked by the `conda-forge` bots.
+The bots will automatically submit a PR to the [`napari-feedstock`][1] repository within a few hours.
+This is all automated by the `conda-forge` infrastructure (see [previous examples][16]).
+We only need to check that the metadata in the recipe has been adjusted for the new release.
+Pay special attention to the runtime dependencies and version strings!

-### Nightly packages
+> We keep a copy of the feedstock's recipe in the `napari/packaging` repo, which is updated manually whenever a change to `setup.cfg` is detected.
+> Check the file `conda-recipe/meta.yaml` and make sure its `outputs` are synced to the `napari-feedstock` copy.

-We also build nightly packages off `main` and publish them to the `napari/label/nightly` channel.
-These are the same packages that are used in the `constructor` installers (see below), so their CI
-is specified in `.github/workflows/make_bundle_conda.yml`.
+Once the conda-forge CI is passing and the PR is approved and merged, the final packages will be built on the default branch and uploaded to the `conda-forge` channel.
+Due to the staging steps and CDN synchronization delays, the conda packages can take up to 1 h to be available after the merge.

-To do it in a `conda-forge` compatible way, we actually _clone_ `napari-feedstock` and patch the
-source instructions so the code is retrieved from the repository branch directly. The version is
-also patched to match the `setuptools-scm` string. After [rerendering][8] the feedstock, we run
-`conda-build` in the same way `conda-forge` would do and upload the resulting tarballs to our
-[Anaconda.org channel][17].
+```{note}
+Check {doc}`release` for more details about the conda-forge release process and maintenance tasks
+```
+
+### conda packages in the `napari` channel
+
+The `napari` project also has a `napari` channel in anaconda.org.
+We mainly use it to provide:
+
+- Nightlies built off of `main`, uploaded to the `napari/label/nightly` channel.
+- Release candidates, uploaded to `napari/label/rc`.

-Additionally, the tarballs are also passed as artifacts to the next stage in the pipeline: building
-the `constructor` installers (more below).
+```{note}
+The `napari` channel also contains the final releases.
+However, these are not meant to be used by end users, who should use `conda-forge`.
+The releases uploaded to our channel are used to build our `constructor` installers (see below).
+Otherwise, we would have to wait for the `conda-forge` PR, which is only triggered by the PyPI release.
+That means we would not be able to create the installers in the same tagging event.
+```
+
+To do it in a `conda-forge` compatible way, we clone `napari-feedstock` and patch the `source` instructions to use the code from the repository branch.
+The version is also patched to match the `setuptools-scm` string.
+After [re-rendering][8] the feedstock, we run `conda-build` in the same way `conda-forge` would do and upload the resulting tarballs to our [Anaconda.org channel][17].
+
+Additionally, the tarballs are also passed as artifacts to the next stage in the pipeline: building the `constructor` installers (more below).

 ## Installers

-Once the packages have been built and uploaded to their corresponding repositories, we can bundle
-them along with their dependencies in a single executable that end users can run to install napari
-on their systems, with no prior knowledge of `pip`, `conda`, virtual environments or anything.
+Once the packages have been built and uploaded to their corresponding repositories,
+we can bundle them along with their dependencies in a single executable that end users can run to install napari on their systems,
+with no prior knowledge of `pip`, `conda`, virtual environments or anything.

 A software installer is usually expected to fulfill these requirements:

@@ -65,36 +75,31 @@ Right now, we are using two ways of generating the installers:
 * With `briefcase`, which takes PyPI packages.
 * With `constructor`, which takes `conda` packages.

-`conda` packages offer several advantages when it comes to bundling dependencies, since it makes
-very few assumptions about the underlying system installation. As a result, `constructor` bundles
-include libraries that might be missing in the target system and hence should provide a more robust
-user experience.
+`conda` packages offer several advantages when it comes to bundling dependencies, since it makes very few assumptions about the underlying system installation.
+As a result, `constructor` bundles include libraries that might be missing in the target system and hence should provide a more robust user experience.

 ### Briefcase-based installers

-[`briefcase`][5] based installers are marked for deprecation so we will not discuss them here.
-If you are curious, you can check `bundle.py` and `.github/workflows/make_bundle.yml` for
-details.
+[`briefcase`][5] based installers are marked for deprecation, so we will not discuss them here.
+If you are curious, you can check `bundle.py` and `.github/workflows/make_bundle.yml` for details.

 ### Constructor-based installers

-We use `constructor` to build the `napari` installers through the
-`.github/workflows/make_bundle_conda.yml` workflow, which only specifies the triggers used to call
-the actual workflow implementation under the `napari/packaging` repository. This repository stores
-all the logic and files needed to create the nightly `conda` packages and the `constructor`
-installers.
+We use `constructor` to build the `napari` installers through the `.github/workflows/make_bundle_conda.yml` workflow,
+which only specifies the triggers used to call the actual workflow implementation under the `napari/packaging` repository.
+This repository stores all the logic and files needed to create the nightly `conda` packages and the `constructor` installers.

-[`constructor`][6] allows you to build cross-platform installers out of `conda` packages. It
-supports the following installer types:
+[`constructor`][6] allows you to build cross-platform installers out of `conda` packages.
+It supports the following installer types:

-* On Linux, a shell-based installer is generated. Users can execute it with `bash installer.sh`.
-* On macOS, you can generate both PKG and shell-based installers. PKG files are graphical installers
-  native to macOS, and that's the method we use with napari.
-* On Windows, a graphical installer based on NSIS is generated.
+* On Linux, a shell-based installer is generated; users can execute it with `bash installer.sh`.
+* On macOS, you can generate both PKG and shell-based installers.
+  PKG files are graphical installers native to macOS, so that's the method we use with napari.
+* On Windows, a graphical installer based on [NSIS][19] is generated.

-The configuration is done through a `construct.yaml` file, documented [here][7]. We generate one on
-the fly in the `build_installers.py` script found in `napari/packaging`.
-Roughly, we will build this configuration file:
+The configuration is done through a `construct.yaml` file, documented [here][7].
+We generate one on the fly in the `build_installers.py` script found in `napari/packaging`.
+For a hypothetical napari v1.2.3 we would have built this configuration file:


 ```yaml
@@ -113,10 +118,10 @@ specs: # specs for the 'base'  environment
   - mamba    # we add these to manage different napari versions
   - pip      # we add these to manage different napari versions
 extra_envs:
-  napari-0.4.16: # this is the environment that will actually contain the napari packages
+  napari-1.2.3: # this is the environment that will actually contain the napari packages
     specs:
-      - napari=0.4.16=*pyside*
-      - napari-menu=0.4.16
+      - napari=1.2.3=*pyside*
+      - napari-menu=1.2.3
       - python   # pinned to a specific version, configured by CI
       - conda    # needed for the plugin manager
       - mamba    # needed for the plugin manager
@@ -125,11 +130,11 @@ menu_packages:
   - napari-menu  # don't create shortcuts for anything else in the environment

 # linux-specific config
-default_prefix: $HOME/napari-0.0.1  # default installation path
+default_prefix: $HOME/napari-1.2.3  # default installation path

 # macos-specific config
 default_location_pkg : Library # first component of the default path under ~/
-pkg_name: napari-0.0.1  # second component of the default path
+pkg_name: napari-1.2.3  # second component of the default path
 installer_type: pkg  # otherwise, defaults to sh (Linux-like)
 welcome_image: resources/napari_1227x600.png  # bg image with the napari logo on bottom-left corner
 welcome_file: resources/osx_pkg_welcome.rtf  # rendered text in the first screen
@@ -141,33 +146,32 @@ signing_identity_name: "Apple Developer ID: ..."  # Name of our installer signin
 welcome_image: resources/napari_164x314.png  # logo image for the first screen
 header_image:  resources/napari_150x57.png  # logo image (top left) for the rest of the installer
 icon_image: napari/resources/icon.ico  # favicon for the taskbar and title bar
-default_prefix: '%USERPROFILE%/napari-0.0.1'  # default location for user installs
-default_prefix_domain_user: '%LOCALAPPDATA%/napari-0.0.1'  # default location for network installs
-default_prefix_all_users: '%ALLUSERSPROFILE%/napari-0.0.1'  # default location for admin installs
+default_prefix: '%USERPROFILE%/napari-1.2.3'  # default location for user installs
+default_prefix_domain_user: '%LOCALAPPDATA%/napari-1.2.3'  # default location for network installs
+default_prefix_all_users: '%ALLUSERSPROFILE%/napari-1.2.3'  # default location for admin installs
 signing_certificate: certificate.pfx  # path to signing certificate
 ```

 The main OS-agnostic keys are:

-* `channels`: where the packages will be downloaded from. We mainly rely on conda-forge for this,
-  where `napari` is published. However, we also have `napari/label/bundle_tools`, where we store
-  our `constructor` stack forks (more on this later). In nightly installers, we locally build our
-  own development packages for `conda` without resorting to `conda-forge`. To make use of those
-  (which are eventually published to `napari/label/nightly`), we unpack the GitHub Actions artifact
-  in a specific location that `constructor` recognizes as a _local_ channel once indexed.
-* `extra_envs> napari-$VERSION`: the environment that will actually contain the napari installation.
-  In this key, you will find `specs`, which lists the conda packages to be installed in that
-  environment. Constructor will perform a conda solve here to retrieve the needed dependencies.
-* `menu_packages`: restrict which packages can create shortcuts. We only want the shortcuts provided
-  by `napari-menu`, and not any that could come from the (many) dependencies of napari.
-
-Then, depending on the operating systems and the installer format, we customize the configuration
-a bit more.
+* `channels`: where the packages will be downloaded from.
+  We mainly rely on `conda-forge` for this, where `napari` is published.
+  However, we also have `napari/label/bundle_tools`, where we store our `constructor` stack forks (more on this later).
+  In nightly installers, we locally build our own development packages for `conda`, without resorting to `conda-forge`.
+  To make use of those (which are eventually published to `napari/label/nightly`),
+  we unpack the GitHub Actions artifact in a specific location that `constructor` recognizes as a _local_ channel once indexed.
+* {{ '`extra_envs> napari-NAPARI_VER`'.replace('NAPARI_VER', napari_version) }}: the environment that will actually contain the napari installation.
+  In this key, you will find `specs`, which lists the conda packages to be installed in that environment.
+  Constructor will perform a conda solve here to retrieve the needed dependencies.
+* `menu_packages`: restrict which packages can create shortcuts.
+  We only want the shortcuts provided by `napari-menu`, and not any that could come from the (many) dependencies of napari.
+
+Then, depending on the operating systems and the installer format, we customize the configuration a bit more.

 #### Default installation path

 This depends on each OS. Our general strategy is to put the general installation under
-`~/<hidden>/napari-<INSTALLER-VERSION>`, which will eventually contain the napari installations under
+`~/<hidden>/napari-<VERSION>`, which will eventually contain the napari installations under
 `envs/`, with environments named as `napari-<VERSION>`. However, there are several constrains we
 need to take into account to make this happen:

@@ -175,22 +179,22 @@ need to take into account to make this happen:
   we understand by "user directory". This is further complicated by the existence of "domain users",
   which are not guaranteed to have a user directory per se.
 * On macOS, the PKG installer does not offer a lot of flexibility for this configuration. We will
-  put it under `~/Library/napari-<INSTALLER-VERSION>`, by default.
+  put it under `~/Library/napari-<VERSION>`, by default.

-This means that if you install `napari=0.4.16` using the installer, the actual `napari` executable
+This means that if you install {{ napari_conda_version }} using the installer, the actual `napari` executable
 can be found, by default, on the following locations:

-* Linux: `~/.local/napari-0.0.1/envs/napari-0.4.16/bin/napari`
-* MacOS: `~/Library/napari-0.0.1/envs/napari-0.4.16/bin/napari`
-* Windows: `~/napari-0.0.1/envs/napari-0.4.16/Library/bin/napari`
+* Linux: {{ '`~/.local/napari-NAPARI_VER/envs/napari-NAPARI_VER/bin/napari`'.replace('NAPARI_VER', napari_version) }}
+* macOS: {{ '`~/Library/napari-NAPARI_VER/envs/napari-NAPARI_VER/bin/napari`'.replace('NAPARI_VER', napari_version) }}`
+* Windows: {{ '`~/napari-NAPARI_VER/envs/napari-NAPARI_VER/Library/bin/napari`'.replace('NAPARI_VER', napari_version) }}

 #### Branding

 Graphical installers can be customized with logos and icons. These images are stored under the
-`resources/` directory (outside of the source), with the exception of the square logos/icons (which
+`resources/` directory (outside the source), except for the square logos/icons (which
 are stored under `napari/resources/` so the shortcuts can find them after the installation).

-Some of the steps are also configured to display a custom text, like the license or the welcome
+Some steps are also configured to display a custom text, like the license or the welcome
 screen on macOS.

 #### Signing
@@ -233,9 +237,9 @@ moving pieces being juggled to make this work. Let's begin by enumerating the st
    cross-platform shortcuts.
 3. `conda` interfaces with `menuinst` to delegate the shortcut creation. Since this was only enabled
    on Windows, we needed to unlock the other platforms and rewrite the parts that assumed Windows
-   only behaviour. Surprise, this involved custom solver behaviour too!
+   only behavior. Surprise, this involved custom solver behavior too!

-Since `menuinst` is frozen together with `conda` for `conda-standalone`, every little change in any
+Because `menuinst` is frozen together with `conda` for `conda-standalone`, every little change in any
 of those requires a rebuild of `conda-standalone` so `constructor` can find the new version during
 the installer creation. As a result, we needed to fork _and repackage_ all four components!

@@ -256,10 +260,10 @@ it to the final napari installer:

 Very fun! So where do all these packages live?

-| Package            | Fork                                            | Feedstock                                          |
+| Package            | Source                                          | Feedstock                                          |
 |--------------------|-------------------------------------------------|----------------------------------------------------|
-| `constructor`      | [jaimergp/constructor @ `menuinst+branding`][9] | [jaimergp-forge/constructor-feedstock][12]         |
-| `conda-standalone` | _N/A_                                           | [conda-forge/conda-standalone-feedstock PR#21][13] |
+| `constructor`      | [jaimergp/constructor @ `menuinst-cep`][9]      | [jaimergp-forge/constructor-feedstock][12]         |
+| `conda-standalone` | _Same as feedstock_.                            | [conda-forge/conda-standalone-feedstock PR#21][13] |
 | `conda`            | [jaimergp/conda @ `cep-menuinst`][10]           | [jaimergp-forge/conda-feedstock][14]               |
 | `menuinst`         | [jaimergp/menuinst @ `cep`][11]                 | [jaimergp-forge/menuinst-feedstock][15]            |

@@ -289,6 +293,7 @@ a high-level list of the main changes introduced in the stack.
 * Maintain backwards compatibility with Windows
 * Simplify API
 * Remove CLI
+* Provide binary launchers for better compatibility with the macOS permissions system

 ##### Changes in `conda`

@@ -307,8 +312,8 @@ a high-level list of the main changes introduced in the stack.

 * Use `--shortcuts-only`
 * Add branding options for macOS PKG installers
-* Always leave `_conda.exe` in the install location
-* Do not offer options for conda init or PATH manipulations (these should be Anaconda specific)
+* Always leave `_conda.exe` in the installation location
+* Do not offer options for `conda init` or PATH manipulations (these should be Anaconda specific)
 * Add signing for Windows
 * Add notarization for macOS PKG

@@ -322,7 +327,7 @@ a high-level list of the main changes introduced in the stack.
 [6]: https://github.com/conda/constructor
 [7]: https://github.com/conda/constructor/blob/main/CONSTRUCT.md
 [8]: https://conda-forge.org/docs/maintainer/updating_pkgs.html#rerendering-feedstocks
-[9]: https://github.com/jaimergp/constructor/tree/menuinst+branding
+[9]: https://github.com/jaimergp/constructor/tree/menuinst-cep
 [10]: https://github.com/jaimergp/conda/tree/cep-menuinst
 [11]: https://github.com/jaimergp/menuinst/tree/cep
 [12]: https://github.com/jaimergp-forge/constructor-feedstock
@@ -332,4 +337,7 @@ a high-level list of the main changes introduced in the stack.
 [16]: https://github.com/conda-forge/napari-feedstock/pulls?q=is%3Apr+sort%3Aupdated-desc+is%3Aclosed
 [17]: https://anaconda.org/napari
 [18]: https://github.com/napari/packaging/issues/15
+[19]: https://nsis.sourceforge.io/Main_Page
+[20]: https://pypi.org/project/napari
+[21]: https://anaconda.org/conda-forge/napari
 [nap-2]: https://napari.org/dev/naps/2-conda-based-packaging.html
diff --git a/docs/developers/release.md b/docs/developers/release.md
index 855e9e79..9ccd44e2 100644
--- a/docs/developers/release.md
+++ b/docs/developers/release.md
@@ -15,7 +15,8 @@ The latest release candidate can be installed with
 The release will be coordinated by a release manager whose responsibilities include...

 ## Two weeks before release (one week before release candidate)
-- Look through currently open PRs and get a sense of what would be good to merge before the first release candidate
+- Look through currently open PRs and get a sense of what would be good to merge before the first release candidate
+- Ensure `conda-recipe/meta.yaml` in `napari/packaging` is up-to-date (e.g. `run` dependencies match `setup.cfg` requirements).
 - Create a zulip thread in the release channel letting people know the release candidate is coming and pointing out PRs that would be nice to merge before release

 At this stage, bug fixes and features that are close to landing should be prioritized. The release manager will follow up with PR authors, reviewing and merging as needed.
@@ -166,3 +167,61 @@ For example:
 git tag vX.Y.Z main
 git push upstream --tags
 ```
+
+## conda-forge packages
+
+The packages on `conda-forge` are not controlled directly by our repositories.
+Instead, they are governed by the `conda-forge/napari-feedstock` repository.
+The essential actions are automated, but there are a few maintenance notes we need to have in mind.
+
+### New releases
+
+Once the PyPI release is available, the `conda-forge` bots will submit a PR to `conda-forge/napari-feedstock` within a few hours.
+Merging that PR to `main` will trigger the `conda-forge` release.
+Accounting for the build times and the CDN sync, this means that the `conda-forge` packages will be available 30-60 mins after the PR is merged.
+
+Before merging, please pay special attention to these aspects:
+
+- Version string has been correctly updated. The build number should have been reset to `0` now.
+- The CI passes correctly. Do check the logs, especially the test section (search for `TEST START`).
+- The `run` dependencies match the runtime requirements of the PyPI release (listed in `setup.cfg`).
+  Watch for modified version constraints, as well as added or removed packages.
+  Note that the `conda-forge` packages include some more dependencies for convenience,
+  so you might need to check the `extras` sections in `setup.cfg`.
+
+```{note}
+See these PRs for examples on previous conda-forge releases:
+- [napari v0.4.16](https://github.com/conda-forge/napari-feedstock/pull/41)
+- [napari v0.4.17](https://github.com/conda-forge/napari-feedstock/pull/42)
+```
+
+### Patch dependencies of previous releases
+
+`conda-forge` offers a mechanism to patch the metadata of existing releases.
+This is useful when a new dependency release breaks `napari` in some way or, in general,
+when the metadata of an existing package is proven wrong after it has been released.
+
+To amend the metadata, we need to:
+
+* Encode the patch instructions as a PR to
+  [`conda-forge/conda-forge-repodata-patches-feedstock`](https://github.com/conda-forge/conda-forge-repodata-patches-feedstock):
+  - Add the required changes to `recipe/gen_patch_json.py`, under the [`record_name == 'napari'` section](https://github.com/conda-forge/conda-forge-repodata-patches-feedstock/blob/6aa624be7fe4e3627daea095c8d92b7379b3bb66/recipe/gen_patch_json.py#L1562).
+  - Use a [timestamp condition](https://github.com/conda-forge/conda-forge-repodata-patches-feedstock/blob/6aa624be7fe4e3627daea095c8d92b7379b3bb66/recipe/gen_patch_json.py#L1564) to ensure only existing releases are patched.
+* If necessary, make sure the metadata is amended in the feedstock too.
+  Usually this is not needed until a new release is made, but it's important to remember!
+
+Some previous examples include:
+
+- [Fix `vispy` dependencies](https://github.com/conda-forge/conda-forge-repodata-patches-feedstock/pull/314)
+- [Fix `pillow` dependencies](https://github.com/conda-forge/conda-forge-repodata-patches-feedstock/pull/214)
+
+### Broken packages
+
+In some cases, a wrongly merged PR might cause the release of a broken artifact.
+If this is not fixable with a metadata patch (see above), then the packages can be marked as broken.
+To do so, we can submit a PR to `conda-forge/admin-requests`.
+
+For more details, follow the instructions for
+["Mark packages as broken on conda-forge"](https://github.com/conda-forge/admin-requests#mark-packages-as-broken-on-conda-forge).
+
+Please make sure a correct build for the problematic release is available before (or shortly after) the `admin-requests` PR is merged!
