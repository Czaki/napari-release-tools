From 964dcceb90b3b440c0339bb71b8f6335c5a095a6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Melissa=20Weber=20Mendon=C3=A7a?= <melissawm@gmail.com>
Date: Fri, 3 Feb 2023 15:43:47 -0300
Subject: [PATCH] Added environment creation and doc tools install (#72)

# Description

This is a redo of napari/napari#4827. Also includes some reorganization
on the contributing guide. cc @rwkozar

Co-authored-by: Rob Kozar <rwkozar88@yahoo.com>

## Type of change
- [x] Fixes or improves existing content

# References
Closes #46
Depends on #63 for the nice sphinx-design tabs :)

Co-authored-by: Rob Kozar <rwkozar88@yahoo.com>
Co-authored-by: Grzegorz Bokota <bokota+github@gmail.com>
---
 docs/developers/contributing.md             | 155 ++++++++++++--------
 docs/tutorials/fundamentals/installation.md |   4 +-
 2 files changed, 93 insertions(+), 66 deletions(-)

diff --git a/docs/developers/contributing.md b/docs/developers/contributing.md
index bd1ff815..d2658f96 100644
--- a/docs/developers/contributing.md
+++ b/docs/developers/contributing.md
@@ -9,69 +9,108 @@ If you are a new user, we recommend checking out the detailed [Github Docs](http
 ## Setting up a development installation

 In order to make changes to `napari`, you will need to [fork](https://docs.github.com/en/get-started/quickstart/contributing-to-projects#forking-a-repository) the
-[repository](https://github.com/napari/napari).
+[repository](https://github.com/napari/napari). If you are not familiar with `git`, we recommend reading up on [this guide](https://docs.github.com/en/get-started/using-git/about-git#basic-git-commands).

-If you are not familiar with `git`, we recommend reading up on [this guide](https://docs.github.com/en/get-started/using-git/about-git#basic-git-commands).
+1. Clone the forked repository to your local machine and change directories:

-Clone the forked repository to your local machine and change directories:
-```sh
-git clone https://github.com/your-username/napari.git
-cd napari
-```
+    ```sh
+    git clone https://github.com/your-username/napari.git
+    cd napari
+    ```

-Set the `upstream` remote to the base `napari` repository:
-```sh
-git remote add upstream https://github.com/napari/napari.git
-```
+2. Set the `upstream` remote to the base `napari` repository:

-We recommend starting with a fresh Python virtual environment, using an environment manager like
-[conda](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html) or [venv](https://docs.python.org/3/library/venv.html). Then, install the napari package
-in editable mode and all of the developer tools, along with a supported Qt backend. For example, for PyQt5, the default, you would use the following:
-```sh
-python -m pip install -e ".[pyqt,dev]"  # (quotes only needed for zsh shell)
-```
+    ```sh
+    git remote add upstream https://github.com/napari/napari.git
+    ```

-If you want to use PySide2 instead, you would use:
-```sh
-python -m pip install -e ".[pyside,dev]"  # (quotes only needed for zsh shell)
-```
+3. If you haven't already, create a development environment:

-Finally, if you already have a Qt backend installed or want to use an experimental one like Qt6 use:
-```sh
-python -m pip install -e ".[dev]"  # (quotes only needed for zsh shell)
-```
+    ::::{tab-set}

+    :::{tab-item} Using `conda`
+    After [installing `conda`](https://www.anaconda.com/products/distribution), create an environment called `napari-env` with Python {{ python_version }} and activate it.

+    {{ conda_create_env }}
+    :::

-We use [`pre-commit`](https://pre-commit.com) to sort imports with
-[`isort`](https://github.com/PyCQA/isort), format code with
-[`black`](https://github.com/psf/black), and lint with
-[`flake8`](https://github.com/PyCQA/flake8) automatically prior to each commit.
-To minimize test errors when submitting pull requests, please install `pre-commit`
-in your environment as follows:
+    :::{tab-item} Using `venv`
+    After installing Python on your machine, create a virtual environment on your terminal and activate it. On Linux and MacOS, you can run
+    ```sh
+    python -m venv <path-to-env>
+    source <path-to-env>/bin/activate
+    ```
+    See the [venv](https://docs.python.org/3/library/venv.html) documentation for instructions on Windows.
+    :::

-```sh
-pre-commit install
-```
+    ::::
+
+    ```{note}
+    It is highly recommended to create a fresh environment when working with
+    napari, to prevent issues with outdated or conflicting packages in your
+    development environment.
+    ```
+
+4. Install the package in editable mode, along with all of the developer tools.
+
+    If you only want to use napari, you can install it on most macOS, Linux and
+    Windows systems with Python {{ python_version_range }}
+    by following the directions on the
+    [instructions page](../tutorials/fundamentals/installation.md#install-as-python-package-recommended).
+
+    napari supports different Qt backends, and you can choose which one to install and use.
+
+    For example, for PyQt5, the default, you would use the following:
+    ```sh
+    pip install -e ".[pyqt,dev]"  # (quotes only needed for zsh shell)
+    ```

-Upon committing, your code will be formatted according to our [`black`
-configuration](https://github.com/napari/napari/blob/main/pyproject.toml), which includes the settings
-`skip-string-normalization = true` and `max-line-length = 79`. To learn more,
-see [`black`'s documentation](https://black.readthedocs.io/en/stable/).
-
-Code will also be linted to enforce the stylistic and logistical rules specified
-in our [`flake8` configuration](https://github.com/napari/napari/blob/main/setup.cfg), which currently ignores
-[E203](https://lintlyci.github.io/Flake8Rules/rules/E203.html),
-[E501](https://lintlyci.github.io/Flake8Rules/rules/E501.html),
-[W503](https://lintlyci.github.io/Flake8Rules/rules/W503.html) and
-[C901](https://lintlyci.github.io/Flake8Rules/rules/C901.html).  For information
-on any specific flake8 error code, see the [Flake8
-Rules](https://lintlyci.github.io/Flake8Rules/).  You may also wish to refer to
-the [PEP 8 style guide](https://peps.python.org/pep-0008/).
-
-If you wish to tell the linter to ignore a specific line use the `# noqa`
-comment along with the specific error code (e.g. `import sys  # noqa: E402`) but
-please do not ignore errors lightly.
+    If you want to use PySide2 instead, you would use:
+    ```sh
+    pip install -e ".[pyside,dev]"  # (quotes only needed for zsh shell)
+    ```
+
+    Finally, if you already have a Qt backend installed or want to use an experimental one like Qt6 use:
+    ```sh
+    pip install -e ".[dev]"  # (quotes only needed for zsh shell)
+    ```
+
+    Note that in this last case you will need to install your Qt backend separately.
+
+5. We use [`pre-commit`](https://pre-commit.com) to format code with
+   [`black`](https://github.com/psf/black) and lint with
+   [`ruff`](https://github.com/charliermarsh/ruff) automatically prior to each commit.
+   To minimize test errors when submitting pull requests, please install `pre-commit`
+   in your environment as follows:
+
+   ```sh
+   pre-commit install
+   ```
+
+   Upon committing, your code will be formatted according to our [`black`
+   configuration](https://github.com/napari/napari/blob/main/pyproject.toml), which includes the settings
+   `skip-string-normalization = true` and `max-line-length = 79`. To learn more,
+   see [`black`'s documentation](https://black.readthedocs.io/en/stable/).
+
+   Code will also be linted to enforce the stylistic and logistical rules specified
+   in our [`flake8` configuration](https://github.com/napari/napari/blob/main/setup.cfg), which currently ignores
+   [E203](https://lintlyci.github.io/Flake8Rules/rules/E203.html),
+   [E501](https://lintlyci.github.io/Flake8Rules/rules/E501.html),
+   [W503](https://lintlyci.github.io/Flake8Rules/rules/W503.html) and
+   [C901](https://lintlyci.github.io/Flake8Rules/rules/C901.html).  For information
+   on any specific flake8 error code, see the [Flake8
+   Rules](https://lintlyci.github.io/Flake8Rules/).  You may also wish to refer to
+   the [PEP 8 style guide](https://peps.python.org/pep-0008/).
+
+   If you wish to tell the linter to ignore a specific line use the `# noqa`
+   comment along with the specific error code (e.g. `import sys  # noqa: E402`) but
+   please do not ignore errors lightly.
+
+Now you are all set to start developing with napari.
+
+## Contributing documentation
+
+If you wish to contribute documentation changes to napari, please read the [guide on contributing documentation](documentation/index.md).

 ## Adding icons

@@ -223,18 +262,6 @@ git push -u origin your-branch-name
 You can then make a
 [pull-request](https://docs.github.com/en/get-started/quickstart/contributing-to-projects#making-a-pull-request) to `napari`'s `main` branch.

-## Building the docs
-
-From the project root:
-```sh
-make docs
-```
-
-The docs will be built at `docs/_build/html`.
-
-Most web browsers will allow you to preview HTML pages.
-Try entering `file:///absolute/path/to/napari/docs/_build/html/index.html` in your address bar.
-
 ## Code of Conduct

 `napari` has a [Code of Conduct](napari-coc) that should be honored by everyone who participates in the `napari` community.
diff --git a/docs/tutorials/fundamentals/installation.md b/docs/tutorials/fundamentals/installation.md
index 3554687c..0112d644 100644
--- a/docs/tutorials/fundamentals/installation.md
+++ b/docs/tutorials/fundamentals/installation.md
@@ -82,7 +82,7 @@ napari can be installed on most macOS (Intel x86), Linux, and Windows systems wi
 ```sh
 python -m pip install "napari[all]"
 ```
-You can then upgrade napari to a new version using
+You can then upgrade napari to a new version using:

 ```sh
 python -m pip install "napari[all]" --upgrade
@@ -105,7 +105,7 @@ conda-forge channel. We also recommend this path for users of arm64 macOS machin
 conda install -c conda-forge napari
 ```

-You can then upgrade to a new version of napari using
+You can then upgrade to a new version of napari using:

 ```sh
 conda update napari
