From c19b2ea226a386439a8c7547c4b1ace475ed3631 Mon Sep 17 00:00:00 2001
From: Lorenzo Gaifas <brisvag@gmail.com>
Date: Wed, 26 Apr 2023 17:18:03 +0200
Subject: [PATCH] Prevent canvas micro-panning on point add (#5742)

Currently, when adding points interactively the vispy camera is still
getting moved by mouse events.

This is not a problem with a mouse - since normally you don't move the
mouse while clicking - but it's pretty frustrating with a tablet, since
the cursor moves slightly every time you press down or release the
stylus. This results on the canvas moving around a tiny bit every time
you click.

This was a know issue, since there is a mouse-movement threshold in
place beyond which a point doesn't get added; however this does not
prevent the canvas from moving even within that threshold.

This PR prevents the vispy camera from receiving the event if this
threshold is not yet surpassed.

<!-- Please delete options that are not relevant. -->
- [x] Bug-ix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing
functionality to not work as expected)
- [ ] This change requires a documentation update
---
 napari/_vispy/canvas.py                       |   2 +
 .../layers/points/_points_mouse_bindings.py   |  14 +-
 .../_tests/test_points_mouse_bindings.py      | 356 ++++++++----------
 napari/utils/_proxies.py                      |  17 +-
 4 files changed, 178 insertions(+), 211 deletions(-)

diff --git a/napari/_vispy/canvas.py b/napari/_vispy/canvas.py
index 7bd437d6..785cdb0d 100644
--- a/napari/_vispy/canvas.py
+++ b/napari/_vispy/canvas.py
@@ -92,4 +92,6 @@ class VispyCanvas(SceneCanvas):
         """Ignore mouse wheel events which have modifiers."""
         if event.type == 'mouse_wheel' and len(event.modifiers) > 0:
             return
+        if event.handled:
+            return
         super()._process_mouse_event(event)
diff --git a/napari/layers/points/_points_mouse_bindings.py b/napari/layers/points/_points_mouse_bindings.py
index 95c19458..fb638416 100644
--- a/napari/layers/points/_points_mouse_bindings.py
+++ b/napari/layers/points/_points_mouse_bindings.py
@@ -111,13 +111,19 @@ DRAG_DIST_THRESHOLD = 5
 
 def add(layer, event):
     """Add a new point at the clicked position."""
+    start_pos = event.pos
+    dist = 0
+    yield
 
-    if event.type == 'mouse_press':
-        start_pos = event.pos
-
-    while event.type != 'mouse_release':
+    while event.type == 'mouse_move':
+        dist = np.linalg.norm(start_pos - event.pos)
+        if dist < DRAG_DIST_THRESHOLD:
+            # prevent vispy from moving the canvas if we're below threshold
+            event.handled = True
         yield
 
+    # in some weird cases you might have press and release without move,
+    # so we just make 100% sure dist is correct
     dist = np.linalg.norm(start_pos - event.pos)
     if dist < DRAG_DIST_THRESHOLD:
         coordinates = layer.world_to_data(event.position)
diff --git a/napari/layers/points/_tests/test_points_mouse_bindings.py b/napari/layers/points/_tests/test_points_mouse_bindings.py
index ef939422..26a4818e 100644
--- a/napari/layers/points/_tests/test_points_mouse_bindings.py
+++ b/napari/layers/points/_tests/test_points_mouse_bindings.py
@@ -32,6 +32,10 @@ class Event:
     dims_displayed: List[int] = field(default_factory=lambda: [0, 1])
 
 
+def read_only_event(*args, **kwargs):
+    return ReadOnlyWrapper(Event(*args, **kwargs), exceptions=('handled',))
+
+
 @pytest.fixture
 def create_known_points_layer_2d():
     """Create points layer with known coordinates
@@ -96,11 +100,11 @@ def test_not_adding_or_selecting_point(create_known_points_layer_2d):
     layer.mode = 'pan_zoom'
 
     # Simulate click
-    event = ReadOnlyWrapper(Event(type='mouse_press'))
+    event = read_only_event(type='mouse_press')
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release'))
+    event = read_only_event(type='mouse_release')
     mouse_release_callbacks(layer, event)
 
     # Check no new point added and non selected
@@ -116,15 +120,11 @@ def test_add_point(create_known_points_layer_2d):
     layer.mode = 'add'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_press', position=known_non_point)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_release', position=known_non_point)
     mouse_release_callbacks(layer, event)
 
     # Check new point added at coordinates location
@@ -139,20 +139,16 @@ def test_add_point_3d(create_known_points_layer_3d):
     layer.mode = 'add'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=known_not_point,
-            view_direction=[1, 0, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=known_not_point,
+        view_direction=[1, 0, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', position=known_not_point)
-    )
+    event = read_only_event(type='mouse_release', position=known_not_point)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -166,31 +162,29 @@ def test_drag_in_add_mode(create_known_points_layer_2d):
 
     # Add point at location where non exists
     layer.mode = 'add'
-    layer.mouse_pan = True
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
+    event = read_only_event(
+        type='mouse_press', position=known_non_point, pos=np.array([0, 0])
     )
     mouse_press_callbacks(layer, event)
 
     known_non_point_end = [40, 60]
 
     # Simulate drag end
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move', is_dragging=True, position=known_non_point_end
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=known_non_point_end,
+        pos=np.array([4, 4]),
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_release',
-            position=known_non_point_end,
-            pos=np.array([4, 4]),
-        )
+    event = read_only_event(
+        type='mouse_release',
+        position=known_non_point_end,
+        pos=np.array([4, 4]),
     )
     mouse_release_callbacks(layer, event)
 
@@ -206,11 +200,11 @@ def test_select_point(create_known_points_layer_2d):
     position = tuple(layer.data[0])
 
     # Simulate click
-    event = ReadOnlyWrapper(Event(type='mouse_press', position=position))
+    event = read_only_event(type='mouse_press', position=position)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', position=position))
+    event = read_only_event(type='mouse_release', position=position)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -226,18 +220,16 @@ def test_select_point_3d(create_known_points_layer_3d):
     position = tuple(layer.data[1])
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=position,
-            view_direction=[1, 0, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=position,
+        view_direction=[1, 0, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', position=position))
+    event = read_only_event(type='mouse_release', position=position)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -255,20 +247,18 @@ def test_unselect_by_click_point_3d(create_known_points_layer_3d):
     layer.selected_data = {0, 1}
 
     # Simulate shift+click on point 1
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=position,
-            modifiers=['Shift'],
-            view_direction=[1, 0, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=position,
+        modifiers=['Shift'],
+        view_direction=[1, 0, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_release', modifiers=['Shift'], position=position
     )
     mouse_release_callbacks(layer, event)
 
@@ -286,20 +276,18 @@ def test_select_by_shift_click_3d(create_known_points_layer_3d):
     layer.selected_data = {0}
 
     # Simulate shift+click on point 1
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=position,
-            modifiers=['Shift'],
-            view_direction=[1, 0, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=position,
+        modifiers=['Shift'],
+        view_direction=[1, 0, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_release', modifiers=['Shift'], position=position
     )
     mouse_release_callbacks(layer, event)
 
@@ -316,20 +304,16 @@ def test_unselect_by_click_empty_3d(create_known_points_layer_3d):
     layer.selected_data = {0, 1}
 
     # Simulate click on point
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=known_not_point,
-            view_direction=[1, 0, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=known_not_point,
+        view_direction=[1, 0, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', position=known_not_point)
-    )
+    event = read_only_event(type='mouse_release', position=known_not_point)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -345,11 +329,11 @@ def test_after_in_add_mode_point(create_known_points_layer_2d):
     position = tuple(layer.data[0])
 
     # Simulate click
-    event = ReadOnlyWrapper(Event(type='mouse_press', position=position))
+    event = read_only_event(type='mouse_press', position=position)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', position=position))
+    event = read_only_event(type='mouse_release', position=position)
     mouse_release_callbacks(layer, event)
 
     # Check no new point added and non selected
@@ -366,11 +350,11 @@ def test_after_in_select_mode_point(create_known_points_layer_2d):
     position = tuple(layer.data[0])
 
     # Simulate click
-    event = ReadOnlyWrapper(Event(type='mouse_press', position=position))
+    event = read_only_event(type='mouse_press', position=position)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', position=position))
+    event = read_only_event(type='mouse_release', position=position)
     mouse_release_callbacks(layer, event)
 
     # Check no new point added and non selected
@@ -387,11 +371,11 @@ def test_unselect_select_point(create_known_points_layer_2d):
     layer.selected_data = {2, 3}
 
     # Simulate click
-    event = ReadOnlyWrapper(Event(type='mouse_press', position=position))
+    event = read_only_event(type='mouse_press', position=position)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', position=position))
+    event = read_only_event(type='mouse_release', position=position)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -408,14 +392,14 @@ def test_add_select_point(create_known_points_layer_2d):
     layer.selected_data = {2, 3}
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_press', modifiers=['Shift'], position=position
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_release', modifiers=['Shift'], position=position
     )
     mouse_release_callbacks(layer, event)
 
@@ -433,14 +417,14 @@ def test_remove_select_point(create_known_points_layer_2d):
     layer.selected_data = {0, 2, 3}
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_press', modifiers=['Shift'], position=position
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', modifiers=['Shift'], position=position)
+    event = read_only_event(
+        type='mouse_release', modifiers=['Shift'], position=position
     )
     mouse_release_callbacks(layer, event)
 
@@ -456,15 +440,11 @@ def test_not_selecting_point(create_known_points_layer_2d):
     layer.mode = 'select'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_press', position=known_non_point)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_release', position=known_non_point)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -480,15 +460,11 @@ def test_unselecting_points(create_known_points_layer_2d):
     assert len(layer.selected_data) == 2
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_press', position=known_non_point)
     mouse_press_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_release', position=known_non_point)
     mouse_release_callbacks(layer, event)
 
     # Check clicked point selected
@@ -502,23 +478,21 @@ def test_selecting_all_points_with_drag_2d(create_known_points_layer_2d):
     layer.mode = 'select'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_press', position=known_non_point)
     mouse_press_callbacks(layer, event)
 
     # Simulate drag start
-    event = ReadOnlyWrapper(
-        Event(type='mouse_move', is_dragging=True, position=known_non_point)
+    event = read_only_event(
+        type='mouse_move', is_dragging=True, position=known_non_point
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate drag end
-    event = ReadOnlyWrapper(Event(type='mouse_move', is_dragging=True))
+    event = read_only_event(type='mouse_move', is_dragging=True)
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(Event(type='mouse_release', is_dragging=True))
+    event = read_only_event(type='mouse_release', is_dragging=True)
     mouse_release_callbacks(layer, event)
 
     # Check all points selected as drag box contains them
@@ -532,26 +506,24 @@ def test_selecting_no_points_with_drag_2d(create_known_points_layer_2d):
     layer.mode = 'select'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(type='mouse_press', position=known_non_point)
-    )
+    event = read_only_event(type='mouse_press', position=known_non_point)
     mouse_press_callbacks(layer, event)
 
     # Simulate drag start
-    event = ReadOnlyWrapper(
-        Event(type='mouse_move', is_dragging=True, position=known_non_point)
+    event = read_only_event(
+        type='mouse_move', is_dragging=True, position=known_non_point
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate drag end
-    event = ReadOnlyWrapper(
-        Event(type='mouse_move', is_dragging=True, position=(50, 60))
+    event = read_only_event(
+        type='mouse_move', is_dragging=True, position=(50, 60)
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', is_dragging=True, position=(50, 60))
+    event = read_only_event(
+        type='mouse_release', is_dragging=True, position=(50, 60)
     )
     mouse_release_callbacks(layer, event)
 
@@ -566,53 +538,45 @@ def test_selecting_points_with_drag_3d(create_known_points_layer_3d):
     layer.mode = 'select'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=(5, 0, 0),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=(5, 0, 0),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate drag start
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=(5, 0, 0),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=(5, 0, 0),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate drag end
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=(5, 6, 6),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=(5, 6, 6),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_release',
-            is_dragging=True,
-            position=(5, 6, 6),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_release',
+        is_dragging=True,
+        position=(5, 6, 6),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_release_callbacks(layer, event)
 
@@ -627,53 +591,45 @@ def test_selecting_no_points_with_drag_3d(create_known_points_layer_3d):
     layer.mode = 'select'
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press',
-            position=(5, 15, 15),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_press',
+        position=(5, 15, 15),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_press_callbacks(layer, event)
 
     # Simulate drag start
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=(5, 15, 15),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=(5, 15, 15),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate drag end
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=(5, 20, 20),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=(5, 20, 20),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_move_callbacks(layer, event)
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_release',
-            is_dragging=True,
-            position=(5, 20, 20),
-            view_direction=[1, 0, 0],
-            up_direction=[0, 1, 0],
-            dims_displayed=[0, 1, 2],
-        )
+    event = read_only_event(
+        type='mouse_release',
+        is_dragging=True,
+        position=(5, 20, 20),
+        view_direction=[1, 0, 0],
+        up_direction=[0, 1, 0],
+        dims_displayed=[0, 1, 2],
     )
     mouse_release_callbacks(layer, event)
 
@@ -725,10 +681,8 @@ def test_drag_start_selection(
     assert layer._drag_box is None
 
     # Simulate click
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_press', position=initial_position, modifiers=modifier
-        )
+    event = read_only_event(
+        type='mouse_press', position=initial_position, modifiers=modifier
     )
     mouse_press_callbacks(layer, event)
 
@@ -765,13 +719,11 @@ def test_drag_start_selection(
 
     # Simulate drag start on a different position
     offset_position = [initial_position[0] + 20, initial_position[1] + 20]
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=offset_position,
-            modifiers=modifier,
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=offset_position,
+        modifiers=modifier,
     )
     mouse_move_callbacks(layer, event)
 
@@ -804,13 +756,11 @@ def test_drag_start_selection(
 
     # Simulate drag start on new different position
     offset_position = zero_pos
-    event = ReadOnlyWrapper(
-        Event(
-            type='mouse_move',
-            is_dragging=True,
-            position=offset_position,
-            modifiers=modifier,
-        )
+    event = read_only_event(
+        type='mouse_move',
+        is_dragging=True,
+        position=offset_position,
+        modifiers=modifier,
     )
     mouse_move_callbacks(layer, event)
 
@@ -842,8 +792,8 @@ def test_drag_start_selection(
         )
 
     # Simulate release
-    event = ReadOnlyWrapper(
-        Event(type='mouse_release', is_dragging=True, modifiers=modifier)
+    event = read_only_event(
+        type='mouse_release', is_dragging=True, modifiers=modifier
     )
     mouse_release_callbacks(layer, event)
 
diff --git a/napari/utils/_proxies.py b/napari/utils/_proxies.py
index de780186..1ed8111b 100644
--- a/napari/utils/_proxies.py
+++ b/napari/utils/_proxies.py
@@ -17,8 +17,15 @@ class ReadOnlyWrapper(wrapt.ObjectProxy):
     Disable item and attribute setting with the exception of  ``__wrapped__``.
     """
 
+    def __init__(self, wrapped, exceptions=()):
+        super().__init__(wrapped)
+        self._self_exceptions = exceptions
+
     def __setattr__(self, name, val):
-        if name != '__wrapped__':
+        if (
+            name not in ('__wrapped__', '_self_exceptions')
+            and name not in self._self_exceptions
+        ):
             raise TypeError(
                 trans._(
                     'cannot set attribute {name}',
@@ -30,9 +37,11 @@ class ReadOnlyWrapper(wrapt.ObjectProxy):
         super().__setattr__(name, val)
 
     def __setitem__(self, name, val):
-        raise TypeError(
-            trans._('cannot set item {name}', deferred=True, name=name)
-        )
+        if name not in self._self_exceptions:
+            raise TypeError(
+                trans._('cannot set item {name}', deferred=True, name=name)
+            )
+        super().__setitem__(name, val)
 
 
 _SUNDER = re.compile('^_[^_]')
-- 
2.34.1
